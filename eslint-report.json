[{"filePath":"/Users/andyrao/Documents/projects/agv1/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/DataTableContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/DataTableContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":17,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":17,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext } from 'react';\nimport { DataTableContextValue } from './types';\n\nconst DataTableContext = createContext<DataTableContextValue | undefined>(undefined);\n\nexport const DataTableProvider: React.FC<{\n  children: React.ReactNode;\n  value: DataTableContextValue;\n}> = ({ children, value }) => {\n  return (\n    <DataTableContext.Provider value={value}>\n      {children}\n    </DataTableContext.Provider>\n  );\n};\n\nexport const useDataTableContext = () => {\n  const context = useContext(DataTableContext);\n  if (!context) {\n    throw new Error('useDataTableContext must be used within DataTableProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/DataTableErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/DataTableGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/data-table-refactored.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/data-table-toolbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2121,2124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2121,2124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3157,3160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3157,3160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Settings2, Download, FileSpreadsheet } from \"lucide-react\";\nimport { ProfileManager } from \"./profile-manager\";\nimport { GridApi, ColDef as AgColDef } from \"ag-grid-community\";\nimport { GridProfile } from \"@/stores/profile.store\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst monospaceFonts = [\n  { value: 'JetBrains Mono', label: 'JetBrains Mono' },\n  { value: 'Fira Code', label: 'Fira Code' },\n  { value: 'Source Code Pro', label: 'Source Code Pro' },\n  { value: 'IBM Plex Mono', label: 'IBM Plex Mono' },\n  { value: 'Roboto Mono', label: 'Roboto Mono' },\n  { value: 'Monaco', label: 'Monaco' },\n  { value: 'Consolas', label: 'Consolas' },\n  { value: 'Courier New', label: 'Courier New' },\n  { value: 'monospace', label: 'System Monospace' },\n];\n\ninterface DataTableToolbarProps {\n  onFontChange: (font: string) => void;\n  onSpacingChange: (spacing: string) => void;\n  onOpenColumnSettings?: () => void;\n  gridApi?: GridApi | null;\n  onProfileChange?: (profile: GridProfile) => void;\n  getColumnDefsWithStyles?: () => AgColDef[];\n}\n\nexport function DataTableToolbar({ \n  onFontChange, \n  onOpenColumnSettings,\n  gridApi,\n  onProfileChange,\n  getColumnDefsWithStyles \n}: DataTableToolbarProps) {\n  const { toast } = useToast();\n  \n  const handleExportExcel = () => {\n    if (!gridApi) {\n      toast({\n        title: \"Export failed\",\n        description: \"Grid is not ready for export\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      gridApi.exportDataAsExcel({\n        fileName: `data-export-${new Date().toISOString().split('T')[0]}.xlsx`,\n        author: 'AG-Grid Export',\n        sheetName: 'Data',\n        processCellCallback: (params) => {\n          const colDef = params.column.getColDef();\n          // Use valueFormatter for export if available\n          if (colDef.valueFormatter) {\n            return typeof colDef.valueFormatter === 'function'\n              ? colDef.valueFormatter(params as any)\n              : params.value;\n          }\n          return params.value;\n        }\n      });\n      \n      toast({\n        title: \"Export successful\",\n        description: \"Data exported to Excel file\",\n      });\n    } catch {\n      toast({\n        title: \"Export failed\",\n        description: \"An error occurred while exporting data\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  const handleExportCsv = () => {\n    if (!gridApi) {\n      toast({\n        title: \"Export failed\",\n        description: \"Grid is not ready for export\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      gridApi.exportDataAsCsv({\n        fileName: `data-export-${new Date().toISOString().split('T')[0]}.csv`,\n        processCellCallback: (params) => {\n          const colDef = params.column.getColDef();\n          // Use valueFormatter for export if available\n          if (colDef.valueFormatter) {\n            return typeof colDef.valueFormatter === 'function'\n              ? colDef.valueFormatter(params as any)\n              : params.value;\n          }\n          return params.value;\n        }\n      });\n      \n      toast({\n        title: \"Export successful\",\n        description: \"Data exported to CSV file\",\n      });\n    } catch {\n      toast({\n        title: \"Export failed\",\n        description: \"An error occurred while exporting data\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  return (\n    <div className=\"flex items-center justify-between p-4 border-b bg-muted/40\">\n      <div className=\"flex items-center gap-4\">\n        <ProfileManager \n          gridApi={gridApi || null} \n          onProfileChange={onProfileChange}\n          getColumnDefsWithStyles={getColumnDefsWithStyles}\n        />\n        <div className=\"border-l pl-4 flex items-center gap-2\">\n          <label htmlFor=\"font-select\" className=\"text-sm font-medium\">\n            Font:\n          </label>\n          <Select onValueChange={onFontChange} defaultValue=\"monospace\">\n            <SelectTrigger id=\"font-select\" className=\"w-[180px] h-8\">\n              <SelectValue placeholder=\"Select font\" />\n            </SelectTrigger>\n            <SelectContent>\n              {monospaceFonts.map((font) => (\n                <SelectItem key={font.value} value={font.value}>\n                  <span style={{ fontFamily: font.value }}>{font.label}</span>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={handleExportExcel}\n          className=\"h-8\"\n          disabled={!gridApi}\n        >\n          <FileSpreadsheet className=\"mr-2 h-4 w-4\" />\n          Excel\n        </Button>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={handleExportCsv}\n          className=\"h-8\"\n          disabled={!gridApi}\n        >\n          <Download className=\"mr-2 h-4 w-4\" />\n          CSV\n        </Button>\n        {onOpenColumnSettings && (\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={onOpenColumnSettings}\n            className=\"h-8\"\n          >\n            <Settings2 className=\"mr-2 h-4 w-4\" />\n            Customize Columns\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/data-table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/debug-profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/ColumnCustomizationDialog.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'columnDefinitions'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":108,"suggestions":[{"desc":"Update the dependencies array to be: [open, columnDefs, columnState, columnDefinitions.size, setColumnDefinitions, setColumnState, setOpen, columnDefinitions]","fix":{"range":[3498,3600],"text":"[open, columnDefs, columnState, columnDefinitions.size, setColumnDefinitions, setColumnState, setOpen, columnDefinitions]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4218,4221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4218,4221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5036,5039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5036,5039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useEffect, memo, useState, useMemo } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';\nimport { ColumnSelectorPanel } from './panels/ColumnSelectorPanel';\nimport { PropertyEditorPanel } from './panels/PropertyEditorPanel';\nimport { BulkActionsPanel } from './panels/BulkActionsPanel';\nimport { ColDef, ColumnState } from 'ag-grid-community';\nimport { useColumnCustomizationStore } from './store/column-customization.store';\nimport { Undo2, Redo2, Settings2, Columns, ChevronLeft, ChevronRight, Zap, Trash2, Volume2, VolumeX } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useButtonFeedback, useProgressIndicator } from './utils/feedback';\nimport { cn } from '@/lib/utils';\nimport { useSoundPreference } from './hooks/useSoundPreference';\n\ninterface ColumnCustomizationDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  columnDefs: ColDef[];\n  columnState?: ColumnState[]; // AG-Grid column state\n  onApply: (updatedColumns: ColDef[]) => void;\n}\n\nexport const ColumnCustomizationDialog: React.FC<ColumnCustomizationDialogProps> = memo(({\n  open,\n  onOpenChange,\n  columnDefs,\n  columnState,\n  onApply\n}) => {\n  const {\n    selectedColumns,\n    columnDefinitions,\n    pendingChanges,\n    setOpen,\n    setColumnDefinitions,\n    setColumnState,\n    applyChanges,\n    resetChanges,\n    clearAllCustomizations,\n    showColumnDrawer,\n    setShowColumnDrawer,\n    bulkActionsPanelCollapsed,\n    setBulkActionsPanelCollapsed\n  } = useColumnCustomizationStore();\n  const { toast } = useToast();\n  const { buttonRef: applyCloseButtonRef, triggerFeedback } = useButtonFeedback();\n  const { progressRef, showProgress, hideProgress } = useProgressIndicator();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showClearAllConfirmation, setShowClearAllConfirmation] = useState(false);\n  const { soundEnabled, toggleSound } = useSoundPreference();\n\n  // Initialize column definitions when dialog opens\n  useEffect(() => {\n    if (open) {\n      // Only update if columnDefs have actually changed\n      const needsUpdate = columnDefs.length !== columnDefinitions.size ||\n        columnDefs.some(col => {\n          const colId = col.field || col.colId || '';\n          const existing = columnDefinitions.get(colId);\n          return !existing || existing !== col;\n        });\n      \n      if (needsUpdate && columnDefs.length > 0) {\n        const columnMap = new Map<string, ColDef>();\n        columnDefs.forEach(col => {\n          const colId = col.field || col.colId || '';\n          if (colId) {\n            columnMap.set(colId, col);\n          }\n        });\n        setColumnDefinitions(columnMap);\n      }\n      \n      // Also set column state if provided\n      if (columnState) {\n        console.log('[ColumnCustomizationDialog] Setting column state:', {\n          columnStateLength: columnState.length,\n          sampleState: columnState.slice(0, 3).map(cs => ({\n            colId: cs.colId,\n            hide: cs.hide,\n            width: cs.width\n          }))\n        });\n        setColumnState(columnState);\n      } else {\n        console.log('[ColumnCustomizationDialog] No column state provided');\n      }\n    }\n    setOpen(open);\n  }, [open, columnDefs, columnState, columnDefinitions.size, setColumnDefinitions, setColumnState, setOpen]);\n\n  const selectedCount = selectedColumns.size;\n  const totalColumns = columnDefinitions.size;\n\n  // Check if there are any customizations to clear\n  const hasAnyCustomizations = useMemo(() => {\n    const customizationProperties = [\n      'cellStyle', 'headerStyle', 'cellClass', 'headerClass',\n      'valueFormatter', 'filter', 'filterParams',\n      'cellEditor', 'cellEditorParams',\n      'width', 'minWidth', 'maxWidth', 'pinned', 'lockPosition', 'lockVisible'\n    ];\n    \n    for (const column of columnDefinitions.values()) {\n      for (const prop of customizationProperties) {\n        const value = (column as any)[prop];\n        if (value !== undefined && value !== null && value !== false && value !== '') {\n          return true;\n        }\n      }\n    }\n    \n    // Also check for applied templates\n    return false;\n  }, [columnDefinitions]);\n\n  // Count customized columns for confirmation dialog\n  const customizedColumnsCount = useMemo(() => {\n    const customizationProperties = [\n      'cellStyle', 'headerStyle', 'cellClass', 'headerClass',\n      'valueFormatter', 'filter', 'filterParams',\n      'cellEditor', 'cellEditorParams',\n      'width', 'minWidth', 'maxWidth', 'pinned', 'lockPosition', 'lockVisible'\n    ];\n    \n    let count = 0;\n    for (const column of columnDefinitions.values()) {\n      let hasCustomizations = false;\n      for (const prop of customizationProperties) {\n        const value = (column as any)[prop];\n        if (value !== undefined && value !== null && value !== false && value !== '') {\n          hasCustomizations = true;\n          break;\n        }\n      }\n      if (hasCustomizations) count++;\n    }\n    \n    return count;\n  }, [columnDefinitions]);\n\n  // Apply changes\n  const _handleApplyChanges = useCallback(() => {\n    console.log('[ColumnCustomizationDialog] handleApplyChanges called');\n    // Use requestAnimationFrame for smooth UI updates\n    requestAnimationFrame(() => {\n      const updatedColumns = applyChanges();\n      console.log('[ColumnCustomizationDialog] Columns after applyChanges:', {\n        count: updatedColumns.length,\n        hasCustomizations: updatedColumns.some(col => \n          col.cellStyle || col.valueFormatter || col.cellClass\n        )\n      });\n      onApply(updatedColumns);\n    });\n  }, [applyChanges, onApply]);\n\n  // Apply and close in a single operation\n  const handleApplyAndClose = useCallback(() => {\n    console.log('[ColumnCustomizationDialog] handleApplyAndClose called');\n    \n    // Use requestAnimationFrame to defer UI updates\n    requestAnimationFrame(() => {\n      // Show processing state\n      setIsProcessing(true);\n      showProgress();\n      \n      // Apply changes immediately\n      const updatedColumns = applyChanges();\n      console.log('[ColumnCustomizationDialog] Columns after applyChanges:', {\n        count: updatedColumns.length,\n        hasCustomizations: updatedColumns.some(col => \n          col.cellStyle || col.valueFormatter || col.cellClass\n        )\n      });\n      \n      // Count customizations once\n      const customizationCount = updatedColumns.filter(col => \n        col.cellStyle || col.headerStyle || col.valueFormatter || col.cellClass || col.headerClass\n      ).length;\n      \n      // Apply changes to grid immediately\n      onApply(updatedColumns);\n      \n      // Close dialog immediately for perceived performance\n      onOpenChange(false);\n      \n      // Defer non-critical operations\n      requestAnimationFrame(() => {\n        // Hide processing state\n        hideProgress();\n        setIsProcessing(false);\n        \n        // Defer feedback to next tick\n        Promise.resolve().then(() => {\n          // Trigger feedback asynchronously\n          triggerFeedback({\n            haptic: true,\n            visual: true,\n            sound: soundEnabled\n          });\n          \n          // Show toast if customizations were applied\n          if (customizationCount > 0) {\n            toast({\n              title: 'Column customizations applied',\n              description: `Updated ${customizationCount} column${customizationCount !== 1 ? 's' : ''} with custom styles and formatting`,\n            });\n          }\n        });\n        \n        // Use aria-live region instead of creating/removing elements\n        const announcement = customizationCount > 0 \n          ? `Success! Applied customizations to ${customizationCount} column${customizationCount !== 1 ? 's' : ''}`\n          : 'Settings applied successfully';\n        \n        // Announce to screen readers using existing aria-live region\n        const liveRegion = document.getElementById('aria-live-region');\n        if (liveRegion) {\n          liveRegion.textContent = announcement;\n          // Clear after announcement\n          setTimeout(() => { liveRegion.textContent = ''; }, 3000);\n        }\n      });\n    });\n  }, [applyChanges, onApply, onOpenChange, toast, triggerFeedback, showProgress, hideProgress, soundEnabled]);\n\n  // Discard changes\n  const handleDiscardChanges = useCallback(() => {\n    const changeCount = Array.from(pendingChanges.values()).reduce((acc, changes) => acc + Object.keys(changes).length, 0);\n    resetChanges();\n    toast({\n      title: 'Changes discarded',\n      description: `${changeCount} pending change${changeCount !== 1 ? 's' : ''} discarded`,\n    });\n  }, [resetChanges, pendingChanges, toast]);\n\n  // Clear all customizations\n  const handleClearAllCustomizations = useCallback(() => {\n    setShowClearAllConfirmation(true);\n  }, []);\n\n  // Confirm clear all customizations\n  const handleConfirmClearAll = useCallback(() => {\n    const clearedCount = clearAllCustomizations();\n    setShowClearAllConfirmation(false);\n    toast({\n      title: 'All columns cleared',\n      description: `Removed customizations from ${clearedCount} column${clearedCount !== 1 ? 's' : ''}`,\n    });\n  }, [clearAllCustomizations, toast]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-[90vw] w-[1100px] h-[80vh] p-0 flex flex-col bg-background overflow-hidden\">\n        {/* Modern, Sophisticated Header */}\n        <DialogHeader className=\"px-6 py-4 border-b bg-gradient-to-r from-background to-muted/30\">\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex h-9 w-9 items-center justify-center rounded-md bg-primary/10 border border-primary/20\">\n                <Settings2 className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div className=\"space-y-1\">\n                <DialogTitle className=\"text-lg font-semibold leading-none\">\n                  Column Settings\n                </DialogTitle>\n                <DialogDescription className=\"sr-only\">\n                  Configure column properties, styling, and behavior for the data grid\n                </DialogDescription>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n                    {selectedCount} selected\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-xs px-2 py-0.5\">\n                    {totalColumns} total\n                  </Badge>\n                  {pendingChanges.size > 0 && (\n                    <Badge variant=\"default\" className=\"text-xs px-2 py-0.5\">\n                      {Array.from(pendingChanges.values()).reduce((acc, changes) => acc + Object.keys(changes).length, 0)} changes\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleSound}\n                className=\"h-8 w-8 p-0 rounded-full\"\n                title={soundEnabled ? \"Disable sound effects\" : \"Enable sound effects\"}\n              >\n                {soundEnabled ? (\n                  <Volume2 className=\"h-4 w-4\" />\n                ) : (\n                  <VolumeX className=\"h-4 w-4\" />\n                )}\n                <span className=\"sr-only\">{soundEnabled ? \"Disable sound effects\" : \"Enable sound effects\"}</span>\n              </Button>\n            </div>\n          </div>\n        </DialogHeader>\n\n        {/* Clean Body Layout */}\n        <div className=\"flex-1 flex overflow-hidden min-h-0 relative bg-background\">\n          {/* Column Selector - Mobile Drawer or Desktop Panel */}\n          {showColumnDrawer ? (\n            <>\n              {/* Mobile-style column selector button */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowColumnDrawer(true)}\n                className=\"fixed left-4 bottom-20 z-50 h-10 px-3 shadow-lg bg-background border\"\n              >\n                <Columns className=\"h-4 w-4 mr-2\" />\n                Columns\n              </Button>\n              <Sheet open={showColumnDrawer} onOpenChange={setShowColumnDrawer}>\n                <SheetContent side=\"left\" className=\"w-[300px] p-0\">\n                  <SheetHeader className=\"px-4 py-3 border-b\">\n                    <SheetTitle>Select Columns</SheetTitle>\n                  </SheetHeader>\n                  <div className=\"flex-1 overflow-hidden\">\n                    <ColumnSelectorPanel />\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </>\n          ) : (\n            <div className=\"w-[260px] border-r bg-muted/30 overflow-hidden flex flex-col\">\n              <ColumnSelectorPanel />\n            </div>\n          )}\n\n          {/* Property Editor Panel */}\n          <div className=\"flex-1 overflow-hidden flex flex-col min-w-0\">\n            <PropertyEditorPanel uiMode=\"advanced\" />\n          </div>\n\n          {/* Quick Actions Panel - Collapsible */}\n          {selectedColumns.size > 0 && (\n            <>\n              {/* Toggle Button */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setBulkActionsPanelCollapsed(!bulkActionsPanelCollapsed)}\n                className={cn(\n                  \"absolute top-1/2 -translate-y-1/2 z-20 h-16 w-6 px-0 py-2 rounded-l-md rounded-r-none border border-r-0 bg-background hover:bg-muted/50 shadow-sm transition-all duration-300\",\n                  bulkActionsPanelCollapsed ? \"right-4\" : \"right-[336px]\"\n                )}\n                title={bulkActionsPanelCollapsed ? \"Show Quick Actions\" : \"Hide Quick Actions\"}\n              >\n                {bulkActionsPanelCollapsed ? (\n                  <ChevronLeft className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronRight className=\"h-4 w-4\" />\n                )}\n              </Button>\n              \n              {/* Collapsible Panel */}\n              <div className={cn(\n                \"w-[320px] border-l bg-muted/30 overflow-hidden flex flex-col transition-all duration-300 mr-4\",\n                bulkActionsPanelCollapsed ? \"w-0 mr-0\" : \"w-[320px] mr-4\"\n              )}>\n                <div className=\"px-4 py-3 border-b bg-gradient-to-r from-muted/30 to-background\">\n                  <div className=\"flex items-center gap-2\">\n                    <Zap className=\"h-4 w-4 text-primary\" />\n                    <span className=\"text-sm font-semibold\">Quick Actions</span>\n                  </div>\n                </div>\n                <BulkActionsPanel />\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Modern Footer */}\n        <DialogFooter className=\"px-6 py-3 border-t flex items-center justify-between bg-gradient-to-r from-muted/30 to-background\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              disabled={true}\n              className=\"h-8 px-3 gap-1.5 text-muted-foreground\"\n            >\n              <Undo2 className=\"h-3.5 w-3.5\" />\n              <span className=\"text-sm\">Undo</span>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              disabled={true}\n              className=\"h-8 px-3 gap-1.5 text-muted-foreground\"\n            >\n              <Redo2 className=\"h-3.5 w-3.5\" />\n              <span className=\"text-sm\">Redo</span>\n            </Button>\n            \n            {/* Clear All Customizations Button */}\n            <div className=\"h-4 w-px bg-border mx-1\" />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearAllCustomizations}\n              disabled={!hasAnyCustomizations}\n              className=\"h-8 px-3 gap-1.5 font-bold text-red-500 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-950/20 disabled:text-muted-foreground disabled:hover:text-muted-foreground disabled:hover:bg-transparent disabled:font-normal\"\n              title={hasAnyCustomizations ? \"Remove all customizations from all columns\" : \"No customizations to clear\"}\n              style={{ color: hasAnyCustomizations ? 'tomato' : undefined }}\n            >\n              <Trash2 className=\"h-3.5 w-3.5\" />\n              <span className=\"text-sm\">Clear All Columns</span>\n            </Button>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleDiscardChanges}\n              className=\"h-8 px-4 text-sm\"\n              disabled={isProcessing}\n            >\n              Reset\n            </Button>\n            <div className=\"relative\">\n              <Button\n                ref={applyCloseButtonRef}\n                variant=\"default\"\n                size=\"sm\"\n                onClick={handleApplyAndClose}\n                disabled={isProcessing}\n                className=\"h-8 px-6 text-sm relative overflow-visible min-w-[120px]\"\n              >\n                {isProcessing ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 border border-primary-foreground/30 border-t-primary-foreground rounded-full animate-spin\" />\n                    <span>Applying...</span>\n                  </div>\n                ) : (\n                  'Apply & Close'\n                )}\n              </Button>\n              <div \n                ref={progressRef} \n                className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-transparent overflow-hidden transition-opacity duration-300\"\n                style={{ opacity: 0 }}\n              >\n                <div className=\"h-full w-full bg-primary animate-[slide_1.5s_ease-in-out_infinite]\" \n                     style={{ \n                       background: 'linear-gradient(90deg, transparent, hsl(var(--primary) / 0.8), transparent)',\n                       transform: 'translateX(-100%)'\n                     }} \n                />\n              </div>\n            </div>\n          </div>\n        </DialogFooter>\n        \n        {/* Aria live region for screen reader announcements */}\n        <div id=\"aria-live-region\" className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\" />\n      </DialogContent>\n      \n      {/* Clear All Customizations Confirmation Dialog */}\n      <Dialog open={showClearAllConfirmation} onOpenChange={setShowClearAllConfirmation}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Trash2 className=\"h-5 w-5 text-destructive\" />\n              Clear All Columns\n            </DialogTitle>\n            <DialogDescription>\n              This will remove all customizations from {customizedColumnsCount} column{customizedColumnsCount !== 1 ? 's' : ''}.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4 space-y-3\">\n            <p className=\"text-sm text-muted-foreground\">The following will be removed:</p>\n            <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n              <li>Cell and header styling</li>\n              <li>Value formatters</li>\n              <li>Filters and editors</li>\n              <li>Column sizing and positioning</li>\n              <li>Applied templates</li>\n            </ul>\n            <p className=\"text-sm font-medium text-foreground\">This action cannot be undone.</p>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowClearAllConfirmation(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={handleConfirmClearAll}\n            >\n              Clear All Columns\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </Dialog>\n  );\n});\n\nColumnCustomizationDialog.displayName = 'ColumnCustomizationDialog';","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/components/AlignmentIconPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/components/CollapsibleSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/components/CustomizationBadges.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/components/FormatWizard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/components/MixedValueInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/components/NumericInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/components/OptimizedSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/components/ThreeStateCheckbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/editors/StyleEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/editors/ValueFormatterEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5677,5680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5677,5680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5754,5757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5754,5757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'generateCellStyle' and 'generateFormatter'. Either include them or remove the dependency array.","line":722,"column":7,"nodeType":"ArrayExpression","endLine":722,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [columnType, generateFormatter, generateCellStyle]","fix":{"range":[24670,24706],"text":"[columnType, generateFormatter, generateCellStyle]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Switch } from '@/components/ui/switch';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { \n  Plus, \n  Trash2, \n  Eye, \n  Palette,\n  ArrowUp,\n  ArrowDown,\n  Settings,\n  Copy,\n  Check\n} from 'lucide-react';\n\ninterface ValueFormatterEditorProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  initialFormatter?: (params: { value: unknown }) => string;\n  onSave: (formatter: (params: { value: unknown }) => string, cellStyle?: (params: { value: unknown }) => React.CSSProperties) => void;\n  title: string;\n  columnType?: 'text' | 'number' | 'date' | 'boolean';\n}\n\ninterface FormattingRule {\n  id: string;\n  condition: {\n    type: 'equals' | 'contains' | 'startsWith' | 'endsWith' | 'greaterThan' | 'lessThan' | 'greaterEqual' | 'lessEqual' | 'between' | 'isEmpty' | 'isNotEmpty';\n    value: string;\n    value2?: string; // for 'between' condition\n  };\n  display: {\n    type: 'text' | 'original' | 'custom';\n    text: string;\n  };\n  styling: {\n    backgroundColor?: string;\n    textColor?: string;\n    fontSize?: number;\n    fontWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n    fontStyle?: 'normal' | 'italic';\n    textDecoration?: 'none' | 'underline' | 'line-through';\n    textAlign?: 'left' | 'center' | 'right';\n    border?: {\n      width: number;\n      style: 'solid' | 'dashed' | 'dotted' | 'double';\n      color: string;\n      sides: {\n        top: boolean;\n        right: boolean;\n        bottom: boolean;\n        left: boolean;\n      };\n    };\n    padding?: {\n      top: number;\n      right: number;\n      bottom: number;\n      left: number;\n    };\n  };\n  enabled: boolean;\n}\n\nconst DEFAULT_RULE: Omit<FormattingRule, 'id'> = {\n  condition: {\n    type: 'equals',\n    value: ''\n  },\n  display: {\n    type: 'custom',\n    text: ''\n  },\n  styling: {\n    // All styling properties start as undefined - only apply what user explicitly sets\n    backgroundColor: undefined,\n    textColor: undefined,\n    fontSize: undefined,\n    fontWeight: undefined,\n    fontStyle: undefined,\n    textDecoration: undefined,\n    textAlign: undefined,\n    border: {\n      width: 0,\n      style: 'solid',\n      color: '#000000',\n      sides: {\n        top: false,\n        right: false,\n        bottom: false,\n        left: false\n      }\n    },\n    padding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  enabled: true\n};\n\nconst CONDITION_OPTIONS = [\n  { value: 'equals', label: 'Equals', needsValue: true, needsValue2: false },\n  { value: 'contains', label: 'Contains', needsValue: true, needsValue2: false },\n  { value: 'startsWith', label: 'Starts with', needsValue: true, needsValue2: false },\n  { value: 'endsWith', label: 'Ends with', needsValue: true, needsValue2: false },\n  { value: 'greaterThan', label: 'Greater than', needsValue: true, needsValue2: false },\n  { value: 'lessThan', label: 'Less than', needsValue: true, needsValue2: false },\n  { value: 'greaterEqual', label: 'Greater than or equal', needsValue: true, needsValue2: false },\n  { value: 'lessEqual', label: 'Less than or equal', needsValue: true, needsValue2: false },\n  { value: 'between', label: 'Between', needsValue: true, needsValue2: true },\n  { value: 'isEmpty', label: 'Is empty', needsValue: false, needsValue2: false },\n  { value: 'isNotEmpty', label: 'Is not empty', needsValue: false, needsValue2: false }\n];\n\nconst SAMPLE_DATA = {\n  text: ['Sample Text', 'Hello World', 'Test', '', 'Option1'],\n  number: [1, 25, 100, 0, -5, 150],\n  date: ['2024-01-15', '2024-12-25', '2024-06-30'],\n  boolean: [true, false, true]\n};\n\nexport const ValueFormatterEditor: React.FC<ValueFormatterEditorProps> = ({\n  open,\n  onOpenChange,\n  initialFormatter,\n  onSave,\n  title,\n  columnType = 'text'\n}) => {\n  const [rules, setRules] = useState<FormattingRule[]>([]);\n  const [defaultFallback, setDefaultFallback] = useState({\n    display: { type: 'original' as const, text: '' },\n    styling: {\n      // Default fallback styling also starts undefined - no styles unless explicitly set\n      backgroundColor: undefined,\n      textColor: undefined,\n      fontSize: undefined,\n      fontWeight: undefined,\n      fontStyle: undefined,\n      textDecoration: undefined,\n      textAlign: undefined,\n      border: {\n        width: 0,\n        style: 'solid' as const,\n        color: '#000000',\n        sides: {\n          top: false,\n          right: false,\n          bottom: false,\n          left: false\n        }\n      },\n      padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    }\n  });\n  const [copiedFormatter, setCopiedFormatter] = useState(false);\n  const [copiedCellStyle, setCopiedCellStyle] = useState(false);\n  const [copiedExcel, setCopiedExcel] = useState(false);\n\n  // Initialize rules from existing formatter\n  useEffect(() => {\n    if (initialFormatter && typeof initialFormatter === 'function') {\n      // Check if the formatter has visual editor metadata\n      const visualRules = (initialFormatter as any).__visualRules;\n      const visualDefaultFallback = (initialFormatter as any).__visualDefaultFallback;\n      \n      console.log('[ValueFormatterEditor] Initializing from existing formatter:', {\n        hasVisualRules: !!visualRules,\n        hasDefaultFallback: !!visualDefaultFallback,\n        rulesCount: visualRules?.length || 0\n      });\n      \n      if (visualRules && Array.isArray(visualRules)) {\n        // Restore the original rules\n        setRules(visualRules);\n        console.log('[ValueFormatterEditor] Restored', visualRules.length, 'rules from metadata');\n      } else {\n        // No visual rules available - start with empty rules\n        setRules([]);\n        console.log('[ValueFormatterEditor] No visual rules found - starting with empty rules');\n      }\n      \n      if (visualDefaultFallback) {\n        // Restore the default fallback\n        setDefaultFallback(visualDefaultFallback);\n        console.log('[ValueFormatterEditor] Restored default fallback from metadata');\n      }\n    } else {\n      setRules([]);\n    }\n  }, [initialFormatter]);\n\n  const addRule = () => {\n    const newRule: FormattingRule = {\n      id: Date.now().toString(),\n      ...DEFAULT_RULE\n    };\n    setRules(prev => [...prev, newRule]);\n  };\n\n  const updateRule = (id: string, updates: Partial<FormattingRule>) => {\n    setRules(prev => prev.map(rule => \n      rule.id === id ? { ...rule, ...updates } : rule\n    ));\n  };\n\n  const deleteRule = (id: string) => {\n    setRules(prev => prev.filter(rule => rule.id !== id));\n  };\n\n  const moveRule = (id: string, direction: 'up' | 'down') => {\n    setRules(prev => {\n      const index = prev.findIndex(rule => rule.id === id);\n      if (index === -1) return prev;\n      \n      const newIndex = direction === 'up' ? index - 1 : index + 1;\n      if (newIndex < 0 || newIndex >= prev.length) return prev;\n      \n      const newRules = [...prev];\n      [newRules[index], newRules[newIndex]] = [newRules[newIndex], newRules[index]];\n      return newRules;\n    });\n  };\n\n  // Check if a value matches a condition\n  const matchesCondition = (value: unknown, condition: FormattingRule['condition']): boolean => {\n    const strValue = String(value || '');\n    const numValue = Number(value);\n    \n    switch (condition.type) {\n      case 'equals':\n        return strValue === condition.value;\n      case 'contains':\n        return strValue.toLowerCase().includes(condition.value.toLowerCase());\n      case 'startsWith':\n        return strValue.toLowerCase().startsWith(condition.value.toLowerCase());\n      case 'endsWith':\n        return strValue.toLowerCase().endsWith(condition.value.toLowerCase());\n      case 'greaterThan':\n        return !isNaN(numValue) && numValue > Number(condition.value);\n      case 'lessThan':\n        return !isNaN(numValue) && numValue < Number(condition.value);\n      case 'greaterEqual':\n        return !isNaN(numValue) && numValue >= Number(condition.value);\n      case 'lessEqual':\n        return !isNaN(numValue) && numValue <= Number(condition.value);\n      case 'between':\n        return !isNaN(numValue) && numValue >= Number(condition.value) && numValue <= Number(condition.value2 || condition.value);\n      case 'isEmpty':\n        return strValue === '';\n      case 'isNotEmpty':\n        return strValue !== '';\n      default:\n        return false;\n    }\n  };\n\n  // Generate display text based on rule\n  const getDisplayText = (value: unknown, display: FormattingRule['display']): string => {\n    switch (display.type) {\n      case 'original':\n        return String(value || '');\n      case 'text':\n      case 'custom':\n        return display.text;\n      default:\n        return String(value || '');\n    }\n  };\n\n  // Convert styling object to CSS properties - only include explicitly set properties\n  const styleToCss = (styling: FormattingRule['styling']): React.CSSProperties => {\n    const css: React.CSSProperties = {};\n\n    // Only include properties that are explicitly defined (not undefined)\n    if (styling.backgroundColor !== undefined) {\n      css.backgroundColor = styling.backgroundColor;\n    }\n    if (styling.textColor !== undefined) {\n      css.color = styling.textColor;\n    }\n    if (styling.fontSize !== undefined) {\n      css.fontSize = `${styling.fontSize}px`;\n    }\n    if (styling.fontWeight !== undefined) {\n      css.fontWeight = styling.fontWeight;\n    }\n    if (styling.fontStyle !== undefined) {\n      css.fontStyle = styling.fontStyle;\n    }\n    if (styling.textDecoration !== undefined) {\n      css.textDecoration = styling.textDecoration;\n    }\n    if (styling.textAlign !== undefined) {\n      css.textAlign = styling.textAlign;\n    }\n\n    // Handle padding - only if any side has a value > 0\n    if (styling.padding && (styling.padding.top > 0 || styling.padding.right > 0 || styling.padding.bottom > 0 || styling.padding.left > 0)) {\n      css.padding = `${styling.padding.top}px ${styling.padding.right}px ${styling.padding.bottom}px ${styling.padding.left}px`;\n    }\n\n    // Handle borders - only if width > 0 and at least one side is enabled\n    if (styling.border && styling.border.width > 0 && (styling.border.sides.top || styling.border.sides.right || styling.border.sides.bottom || styling.border.sides.left)) {\n      const borderStyle = `${styling.border.width}px ${styling.border.style} ${styling.border.color}`;\n      if (styling.border.sides.top) css.borderTop = borderStyle;\n      if (styling.border.sides.right) css.borderRight = borderStyle;\n      if (styling.border.sides.bottom) css.borderBottom = borderStyle;\n      if (styling.border.sides.left) css.borderLeft = borderStyle;\n    }\n\n    console.log('[ValueFormatterEditor] styleToCss generated:', css);\n    return css;\n  };\n\n  // Generate the formatter function\n  const generateFormatter = (): (params: { value: unknown }) => string => {\n    return (params: { value: unknown }) => {\n      const value = params.value;\n      \n      // Check each rule in order\n      for (const rule of rules) {\n        if (rule.enabled && matchesCondition(value, rule.condition)) {\n          return getDisplayText(value, rule.display);\n        }\n      }\n      \n      // Fallback to default\n      return getDisplayText(value, defaultFallback.display);\n    };\n  };\n\n  // Generate the cell style function\n  const generateCellStyle = (): (params: { value: unknown }) => React.CSSProperties | undefined => {\n    return (params: { value: unknown }) => {\n      const value = params.value;\n      \n      // Check each rule in order\n      for (const rule of rules) {\n        if (rule.enabled && matchesCondition(value, rule.condition)) {\n          const ruleStyles = styleToCss(rule.styling);\n          // Only return styles if there are actually some set\n          return Object.keys(ruleStyles).length > 0 ? ruleStyles : undefined;\n        }\n      }\n      \n      // Fallback to default styling - only if there are actually some styles set\n      const fallbackStyles = styleToCss(defaultFallback.styling);\n      return Object.keys(fallbackStyles).length > 0 ? fallbackStyles : undefined;\n    };\n  };\n\n     // Generate Excel-style format string with extended styling syntax\n   const generateExcelFormatString = (): string => {\n     if (rules.length === 0) {\n       return '@'; // Default: show original value\n     }\n\n     const sections: string[] = [];\n     \n     // Process each rule to create format sections\n     rules.forEach((rule, _index) => {\n       if (!rule.enabled) return;\n       \n       let section = '';\n       \n       // Add condition\n       switch (rule.condition.type) {\n         case 'equals':\n           // For exact matches, we'll use positive/negative/zero format\n           if (!isNaN(Number(rule.condition.value))) {\n             const num = Number(rule.condition.value);\n             if (num > 0) section += '[>0]';\n             else if (num < 0) section += '[<0]';\n             else section += '[=0]';\n           } else {\n             section += `[=\"${rule.condition.value}\"]`;\n           }\n           break;\n         case 'greaterThan':\n           section += `[>${rule.condition.value}]`;\n           break;\n         case 'lessThan':\n           section += `[<${rule.condition.value}]`;\n           break;\n         case 'greaterEqual':\n           section += `[>=${rule.condition.value}]`;\n           break;\n         case 'lessEqual':\n           section += `[<=${rule.condition.value}]`;\n           break;\n         case 'between':\n           section += `[>=${rule.condition.value}][<=${rule.condition.value2 || rule.condition.value}]`;\n           break;\n         case 'isEmpty':\n           section += '[@=\"\"]';\n           break;\n         case 'isNotEmpty':\n           section += '[<>\"\"]';\n           break;\n         case 'contains':\n           section += `[=\"*${rule.condition.value}*\"]`;\n           break;\n         case 'startsWith':\n           section += `[=\"${rule.condition.value}*\"]`;\n           break;\n         case 'endsWith':\n           section += `[=\"*${rule.condition.value}\"]`;\n           break;\n         default:\n           // For text conditions, we'll create a text-based format\n           section += `[=\"${rule.condition.value}\"]`;\n       }\n       \n       // Add extended styling directives - only for explicitly set properties\n       \n       // Text color - only if explicitly set\n       if (rule.styling.textColor !== undefined) {\n         const colorName = getColorName(rule.styling.textColor);\n         if (colorName) {\n           section += `[${colorName}]`;\n         } else {\n           section += `[${rule.styling.textColor}]`;\n         }\n       }\n       \n       // Background color - only if explicitly set\n       if (rule.styling.backgroundColor !== undefined) {\n         section += `[BG:${rule.styling.backgroundColor}]`;\n       }\n       \n       // Font size - only if explicitly set\n       if (rule.styling.fontSize !== undefined) {\n         section += `[Size:${rule.styling.fontSize}]`;\n       }\n       \n       // Font weight - only if explicitly set\n       if (rule.styling.fontWeight !== undefined) {\n         if (rule.styling.fontWeight === 'bold' || rule.styling.fontWeight === '700') {\n           section += '[Bold]';\n         } else {\n           section += `[Weight:${rule.styling.fontWeight}]`;\n         }\n       }\n       \n       // Font style - only if explicitly set\n       if (rule.styling.fontStyle !== undefined && rule.styling.fontStyle === 'italic') {\n         section += '[Italic]';\n       }\n       \n       // Text decoration - only if explicitly set\n       if (rule.styling.textDecoration !== undefined) {\n         if (rule.styling.textDecoration === 'underline') {\n           section += '[Underline]';\n         } else if (rule.styling.textDecoration === 'line-through') {\n           section += '[Strikethrough]';\n         }\n       }\n       \n       // Text alignment - only if explicitly set\n       if (rule.styling.textAlign !== undefined) {\n         if (rule.styling.textAlign === 'center') {\n           section += '[Center]';\n         } else if (rule.styling.textAlign === 'right') {\n           section += '[Right]';\n         } else if (rule.styling.textAlign === 'left') {\n           section += '[Left]';\n         }\n       }\n       \n       // Border - only if explicitly set (width > 0 and at least one side enabled)\n       if (rule.styling.border && rule.styling.border.width > 0 && (rule.styling.border.sides.top || rule.styling.border.sides.right || rule.styling.border.sides.bottom || rule.styling.border.sides.left)) {\n         const { width, style, color, sides } = rule.styling.border;\n         \n         // Check if all sides are enabled (full border)\n         const allSides = sides.top && sides.right && sides.bottom && sides.left;\n         \n         if (allSides) {\n           section += `[Border:${width}px-${style}-${color}]`;\n         } else {\n           // For individual sides, we'll use a simplified notation\n           const activeSides = [];\n           if (sides.top) activeSides.push('top');\n           if (sides.right) activeSides.push('right');  \n           if (sides.bottom) activeSides.push('bottom');\n           if (sides.left) activeSides.push('left');\n           section += `[Border:${width}px-${style}-${color}-${activeSides.join('+')}]`;\n         }\n       }\n       \n       // Padding - only if explicitly set (any side > 0)\n       if (rule.styling.padding && (rule.styling.padding.top > 0 || rule.styling.padding.right > 0 || rule.styling.padding.bottom > 0 || rule.styling.padding.left > 0)) {\n         const { top, right, bottom, left } = rule.styling.padding;\n         \n         if (top === right && right === bottom && bottom === left) {\n           // All sides same\n           section += `[P:${top}px]`;\n         } else if (top === bottom && left === right) {\n           // Vertical/horizontal same\n           section += `[P:${top}px-${left}px]`;\n         } else {\n           // All different\n           section += `[P:${top}px-${right}px-${bottom}px-${left}px]`;\n         }\n       }\n       \n       // Add display format\n       if (rule.display.type === 'custom') {\n         section += `\"${rule.display.text}\"`;\n       } else {\n         // Determine number format based on column type and value\n         if (columnType === 'number') {\n           section += '#,##0.00';\n         } else {\n           section += '@'; // Text format\n         }\n       }\n       \n       sections.push(section);\n     });\n     \n     // Add default fallback\n     if (defaultFallback.display.type === 'text') {\n       sections.push(`\"${defaultFallback.display.text}\"`);\n     } else {\n       sections.push('@'); // Show original value\n     }\n     \n     return sections.join(';') || '@';\n   };\n\n   // Helper function to get color names for Excel format\n   const getColorName = (hexColor: string): string | null => {\n     const colorMap: Record<string, string> = {\n       '#ff0000': 'Red',\n       '#00ff00': 'Green', \n       '#0000ff': 'Blue',\n       '#ffff00': 'Yellow',\n       '#ff00ff': 'Magenta',\n       '#00ffff': 'Cyan',\n       '#000000': 'Black',\n       '#ffffff': 'White',\n       '#16a34a': 'Green',\n       '#dc2626': 'Red',\n       '#2563eb': 'Blue',\n       '#ca8a04': 'Yellow'\n     };\n     return colorMap[hexColor.toLowerCase()] || null;\n   };\n\n   // Generate readable formatter code for display\n   const generateFormatterCode = (): string => {\n     if (rules.length === 0) {\n       return `(params) => {\n   // No rules defined - return original value\n   return String(params.value || '');\n }`;\n     }\n\n     const conditions = rules.map((rule, index) => {\n       if (!rule.enabled) return `  // Rule ${index + 1} (disabled)`;\n       \n       let conditionCheck = '';\n       const value = rule.condition.value;\n       const value2 = rule.condition.value2;\n       \n       switch (rule.condition.type) {\n         case 'equals':\n           conditionCheck = `String(value) === '${value}'`;\n           break;\n         case 'contains':\n           conditionCheck = `String(value).toLowerCase().includes('${value.toLowerCase()}')`;\n           break;\n         case 'startsWith':\n           conditionCheck = `String(value).toLowerCase().startsWith('${value.toLowerCase()}')`;\n           break;\n         case 'endsWith':\n           conditionCheck = `String(value).toLowerCase().endsWith('${value.toLowerCase()}')`;\n           break;\n         case 'greaterThan':\n           conditionCheck = `Number(value) > ${value}`;\n           break;\n         case 'lessThan':\n           conditionCheck = `Number(value) < ${value}`;\n           break;\n         case 'greaterEqual':\n           conditionCheck = `Number(value) >= ${value}`;\n           break;\n         case 'lessEqual':\n           conditionCheck = `Number(value) <= ${value}`;\n           break;\n         case 'between':\n           conditionCheck = `Number(value) >= ${value} && Number(value) <= ${value2 || value}`;\n           break;\n         case 'isEmpty':\n           conditionCheck = `String(value) === ''`;\n           break;\n         case 'isNotEmpty':\n           conditionCheck = `String(value) !== ''`;\n           break;\n       }\n       \n       const returnValue = rule.display.type === 'custom' \n         ? `'${rule.display.text}'` \n         : 'String(value)';\n       \n       return `  if (${conditionCheck}) {\n     return ${returnValue}; // Rule ${index + 1}\n   }`;\n     }).filter(Boolean).join('\\n');\n\n     const fallbackReturn = defaultFallback.display.type === 'text' \n       ? `'${defaultFallback.display.text}'`\n       : 'String(value || \\'\\')';\n\n     return `(params) => {\n   const value = params.value;\n   \n ${conditions}\n   \n   // Default fallback\n   return ${fallbackReturn};\n }`;\n   };\n\n   // Generate readable cell style code for display\n   const generateCellStyleCode = (): string => {\n     if (rules.length === 0) {\n       return `(params) => {\n   // No styling rules defined\n   return ${JSON.stringify(styleToCss(defaultFallback.styling), null, 2)};\n }`;\n     }\n\n     const conditions = rules.map((rule, index) => {\n       if (!rule.enabled) return `  // Rule ${index + 1} (disabled)`;\n       \n       let conditionCheck = '';\n       const value = rule.condition.value;\n       const value2 = rule.condition.value2;\n       \n       switch (rule.condition.type) {\n         case 'equals':\n           conditionCheck = `String(value) === '${value}'`;\n           break;\n         case 'contains':\n           conditionCheck = `String(value).toLowerCase().includes('${value.toLowerCase()}')`;\n           break;\n         case 'greaterThan':\n           conditionCheck = `Number(value) > ${value}`;\n           break;\n         case 'lessThan':\n           conditionCheck = `Number(value) < ${value}`;\n           break;\n         case 'between':\n           conditionCheck = `Number(value) >= ${value} && Number(value) <= ${value2 || value}`;\n           break;\n         case 'isEmpty':\n           conditionCheck = `String(value) === ''`;\n           break;\n         case 'isNotEmpty':\n           conditionCheck = `String(value) !== ''`;\n           break;\n         default:\n           conditionCheck = `String(value) === '${value}'`;\n       }\n       \n       const styles = styleToCss(rule.styling);\n       const styleString = JSON.stringify(styles, null, 4).replace(/\\n/g, '\\n     ');\n       \n       return `  if (${conditionCheck}) {\n     return ${styleString}; // Rule ${index + 1}\n   }`;\n     }).filter(Boolean).join('\\n');\n\n     const fallbackStyles = styleToCss(defaultFallback.styling);\n     const fallbackStyleString = JSON.stringify(fallbackStyles, null, 2);\n\n     return `(params) => {\n   const value = params.value;\n   \n ${conditions}\n   \n   // Default fallback\n   return ${fallbackStyleString};\n }`;\n   };\n\n   // Preview data with applied formatting\n   const previewData = useMemo(() => {\n     const sampleValues = SAMPLE_DATA[columnType] || SAMPLE_DATA.text;\n     const formatter = generateFormatter();\n     const styleFunc = generateCellStyle();\n     \n     return sampleValues.map(value => ({\n       original: value,\n       formatted: formatter({ value }),\n       style: styleFunc({ value })\n     }));\n   }, [rules, defaultFallback, columnType]);\n\n     const handleSave = () => {\n     const formatter = generateFormatter();\n     const cellStyle = generateCellStyle();\n     const excelFormatString = generateExcelFormatString();\n     \n     // Attach Excel format string metadata to the formatter\n     Object.defineProperty(formatter, '__formatString', { \n       value: excelFormatString, \n       writable: false,\n       enumerable: false,\n       configurable: true\n     });\n     \n     // Attach formatter type metadata\n     Object.defineProperty(formatter, '__formatterType', { \n       value: 'visual', \n       writable: false,\n       enumerable: false,\n       configurable: true\n     });\n     \n     // Attach visual editor metadata for full round-trip editing\n     Object.defineProperty(formatter, '__visualRules', { \n       value: rules, \n       writable: false,\n       enumerable: false,\n       configurable: true\n     });\n     \n     Object.defineProperty(formatter, '__visualDefaultFallback', { \n       value: defaultFallback, \n       writable: false,\n       enumerable: false,\n       configurable: true\n     });\n     \n     console.log('[ValueFormatterEditor] Generated formatter with metadata:', {\n       formatString: excelFormatString,\n       rulesCount: rules.length,\n       hasDefaultFallback: !!defaultFallback\n     });\n     \n     onSave(formatter, cellStyle);\n     onOpenChange(false);\n   };\n\n   // Copy to clipboard functions\n   const copyFormatterCode = async () => {\n     try {\n       await navigator.clipboard.writeText(generateFormatterCode());\n       setCopiedFormatter(true);\n       setTimeout(() => setCopiedFormatter(false), 2000);\n     } catch (err) {\n       console.error('Failed to copy formatter code:', err);\n     }\n   };\n\n   const copyCellStyleCode = async () => {\n     try {\n       await navigator.clipboard.writeText(generateCellStyleCode());\n       setCopiedCellStyle(true);\n       setTimeout(() => setCopiedCellStyle(false), 2000);\n     } catch (err) {\n       console.error('Failed to copy cell style code:', err);\n     }\n   };\n\n   const copyExcelFormat = async () => {\n     try {\n       await navigator.clipboard.writeText(generateExcelFormatString());\n       setCopiedExcel(true);\n       setTimeout(() => setCopiedExcel(false), 2000);\n     } catch (err) {\n       console.error('Failed to copy Excel format:', err);\n     }\n   };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-7xl h-[800px] p-0 flex flex-col\">\n        <DialogHeader className=\"px-6 py-4 border-b\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Palette className=\"h-5 w-5\" />\n            {title} - Conditional Formatter Builder\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex gap-4 h-full overflow-hidden\">\n          {/* Rules Panel */}\n          <div className=\"flex-1 flex flex-col\">\n            <div className=\"p-4 border-b bg-muted/30\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-semibold\">Formatting Rules</h3>\n                  <p className=\"text-sm text-muted-foreground\">Rules are applied in order. First matching rule wins.</p>\n                </div>\n                <Button onClick={addRule} size=\"sm\" className=\"gap-2\">\n                  <Plus className=\"h-4 w-4\" />\n                  Add Rule\n                </Button>\n              </div>\n            </div>\n\n            <ScrollArea className=\"flex-1\">\n              <div className=\"p-4 space-y-4\">\n                {rules.map((rule, index) => (\n                  <RuleEditor\n                    key={rule.id}\n                    rule={rule}\n                    index={index}\n                    totalRules={rules.length}\n                    onUpdate={(updates) => updateRule(rule.id, updates)}\n                    onDelete={() => deleteRule(rule.id)}\n                    onMove={(direction) => moveRule(rule.id, direction)}\n                    columnType={columnType}\n                  />\n                ))}\n\n                {/* Default Fallback */}\n                <Card className=\"border-dashed\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Settings className=\"h-4 w-4\" />\n                      Default (Fallback)\n                    </CardTitle>\n                    <CardDescription className=\"text-xs\">\n                      Applied when no rules match\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-xs\">Display</Label>\n                        <Select\n                          value={defaultFallback.display.type}\n                          onValueChange={(value: 'original' | 'text') => \n                            setDefaultFallback(prev => ({\n                              ...prev,\n                              display: { ...prev.display, type: value }\n                            }))\n                          }\n                        >\n                          <SelectTrigger className=\"h-8\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"original\">Show Original Value</SelectItem>\n                            <SelectItem value=\"text\">Custom Text</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        {defaultFallback.display.type === 'text' && (\n                          <Input\n                            placeholder=\"Default text\"\n                            value={defaultFallback.display.text}\n                            onChange={(e) => \n                              setDefaultFallback(prev => ({\n                                ...prev,\n                                display: { ...prev.display, text: e.target.value }\n                              }))\n                            }\n                            className=\"h-8\"\n                          />\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </ScrollArea>\n          </div>\n\n          {/* Preview Panel */}\n          <div className=\"w-[350px] border-l bg-muted/30 flex flex-col\">\n            <div className=\"p-4 border-b\">\n              <h3 className=\"font-semibold flex items-center gap-2\">\n                <Eye className=\"h-4 w-4\" />\n                Live Preview\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                See how your rules will look with sample data\n              </p>\n            </div>\n            \n                         <ScrollArea className=\"flex-1 p-4\">\n               <div className=\"space-y-4\">\n                 {/* Live Preview Section */}\n                 <div className=\"space-y-3\">\n                   {previewData.map((item, index) => (\n                     <div key={index} className=\"space-y-1\">\n                       <div className=\"text-xs text-muted-foreground\">\n                         Input: <code className=\"bg-background px-1 py-0.5 rounded\">{JSON.stringify(item.original)}</code>\n                       </div>\n                       <div \n                         className=\"p-3 rounded border text-sm font-medium min-h-[40px] flex items-center\"\n                         style={item.style}\n                       >\n                         {item.formatted}\n                       </div>\n                     </div>\n                   ))}\n                 </div>\n\n                 <Separator />\n\n                 {/* Generated Code Section */}\n                 <div className=\"space-y-2\">\n                   <div className=\"flex items-center gap-2\">\n                     <Settings className=\"h-4 w-4\" />\n                     <h4 className=\"font-semibold text-sm\">Generated Code</h4>\n                   </div>\n                   \n                                        <Tabs defaultValue=\"excel\" className=\"w-full\">\n                     <TabsList className=\"grid w-full grid-cols-3\">\n                       <TabsTrigger value=\"excel\" className=\"text-xs\">Excel Format</TabsTrigger>\n                       <TabsTrigger value=\"formatter\" className=\"text-xs\">JavaScript</TabsTrigger>\n                       <TabsTrigger value=\"cellStyle\" className=\"text-xs\">Cell Style</TabsTrigger>\n                     </TabsList>\n                     \n                     <TabsContent value=\"excel\" className=\"mt-2\">\n                       <div className=\"bg-muted/50 rounded border\">\n                         <div className=\"flex items-center justify-between p-2 border-b\">\n                           <span className=\"text-xs font-medium\">Excel Format String</span>\n                           <Button\n                             variant=\"ghost\"\n                             size=\"sm\"\n                             onClick={copyExcelFormat}\n                             className=\"h-6 px-2 gap-1\"\n                           >\n                             {copiedExcel ? (\n                               <>\n                                 <Check className=\"h-3 w-3 text-green-600\" />\n                                 <span className=\"text-xs text-green-600\">Copied!</span>\n                               </>\n                             ) : (\n                               <>\n                                 <Copy className=\"h-3 w-3\" />\n                                 <span className=\"text-xs\">Copy</span>\n                               </>\n                             )}\n                           </Button>\n                         </div>\n                         <div className=\"p-3\">\n                           <div className=\"bg-background p-2 rounded border mb-2\">\n                             <code className=\"text-sm font-mono text-foreground break-all\">\n                               {generateExcelFormatString()}\n                             </code>\n                           </div>\n                           <div className=\"text-xs text-muted-foreground\">\n                             This Excel-style format string can be used with ag-grid's valueFormatter or in Excel/Google Sheets.\n                           </div>\n                         </div>\n                       </div>\n                     </TabsContent>\n                     \n                     <TabsContent value=\"formatter\" className=\"mt-2\">\n                       <div className=\"bg-muted/50 rounded border\">\n                         <div className=\"flex items-center justify-between p-2 border-b\">\n                           <span className=\"text-xs font-medium\">Value Formatter Function</span>\n                           <Button\n                             variant=\"ghost\"\n                             size=\"sm\"\n                             onClick={copyFormatterCode}\n                             className=\"h-6 px-2 gap-1\"\n                           >\n                             {copiedFormatter ? (\n                               <>\n                                 <Check className=\"h-3 w-3 text-green-600\" />\n                                 <span className=\"text-xs text-green-600\">Copied!</span>\n                               </>\n                             ) : (\n                               <>\n                                 <Copy className=\"h-3 w-3\" />\n                                 <span className=\"text-xs\">Copy</span>\n                               </>\n                             )}\n                           </Button>\n                         </div>\n                         <div className=\"p-3\">\n                           <pre className=\"text-xs font-mono text-muted-foreground whitespace-pre-wrap overflow-auto max-h-[200px]\">\n                             {generateFormatterCode()}\n                           </pre>\n                         </div>\n                       </div>\n                     </TabsContent>\n                     \n                     <TabsContent value=\"cellStyle\" className=\"mt-2\">\n                       <div className=\"bg-muted/50 rounded border\">\n                         <div className=\"flex items-center justify-between p-2 border-b\">\n                           <span className=\"text-xs font-medium\">Cell Style Function</span>\n                           <Button\n                             variant=\"ghost\"\n                             size=\"sm\"\n                             onClick={copyCellStyleCode}\n                             className=\"h-6 px-2 gap-1\"\n                           >\n                             {copiedCellStyle ? (\n                               <>\n                                 <Check className=\"h-3 w-3 text-green-600\" />\n                                 <span className=\"text-xs text-green-600\">Copied!</span>\n                               </>\n                             ) : (\n                               <>\n                                 <Copy className=\"h-3 w-3\" />\n                                 <span className=\"text-xs\">Copy</span>\n                               </>\n                             )}\n                           </Button>\n                         </div>\n                         <div className=\"p-3\">\n                           <pre className=\"text-xs font-mono text-muted-foreground whitespace-pre-wrap overflow-auto max-h-[200px]\">\n                             {generateCellStyleCode()}\n                           </pre>\n                         </div>\n                       </div>\n                     </TabsContent>\n                   </Tabs>\n\n                   {/* Rules Summary */}\n                   <div className=\"mt-3 p-2 bg-background rounded border\">\n                     <div className=\"text-xs font-medium mb-1\">Rules Summary:</div>\n                     {rules.length === 0 ? (\n                       <div className=\"text-xs text-muted-foreground italic\">No rules defined</div>\n                     ) : (\n                       <div className=\"space-y-1\">\n                         {rules.map((rule, index) => (\n                           <div key={rule.id} className=\"text-xs\">\n                             <span className={`font-medium ${rule.enabled ? 'text-foreground' : 'text-muted-foreground'}`}>\n                               Rule {index + 1}:\n                             </span>\n                             <span className=\"text-muted-foreground ml-1\">\n                               {rule.condition.type} \"{rule.condition.value}\"\n                               {rule.condition.value2 && ` and \"${rule.condition.value2}\"`}\n                               → \"{rule.display.text || 'original'}\"\n                               {!rule.enabled && ' (disabled)'}\n                             </span>\n                           </div>\n                         ))}\n                       </div>\n                     )}\n                   </div>\n                 </div>\n               </div>\n             </ScrollArea>\n          </div>\n        </div>\n\n        <DialogFooter className=\"px-6 py-4 border-t\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>\n            Apply Formatting Rules\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\n// Individual Rule Editor Component\ninterface RuleEditorProps {\n  rule: FormattingRule;\n  index: number;\n  totalRules: number;\n  onUpdate: (updates: Partial<FormattingRule>) => void;\n  onDelete: () => void;\n  onMove: (direction: 'up' | 'down') => void;\n  columnType: string;\n}\n\nconst RuleEditor: React.FC<RuleEditorProps> = ({\n  rule,\n  index,\n  totalRules,\n  onUpdate,\n  onDelete,\n  onMove,\n  columnType: _columnType\n}) => {\n  const conditionOption = CONDITION_OPTIONS.find(opt => opt.value === rule.condition.type);\n\n  return (\n    <Card className={rule.enabled ? '' : 'opacity-50'}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm flex items-center gap-2\">\n            Rule {index + 1}\n            <Switch\n              checked={rule.enabled}\n              onCheckedChange={(enabled) => onUpdate({ enabled })}\n            />\n          </CardTitle>\n          <div className=\"flex items-center gap-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onMove('up')}\n              disabled={index === 0}\n              className=\"h-7 w-7 p-0\"\n            >\n              <ArrowUp className=\"h-3 w-3\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onMove('down')}\n              disabled={index === totalRules - 1}\n              className=\"h-7 w-7 p-0\"\n            >\n              <ArrowDown className=\"h-3 w-3\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onDelete}\n              className=\"h-7 w-7 p-0 text-destructive hover:text-destructive\"\n            >\n              <Trash2 className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Tabs defaultValue=\"condition\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"condition\" className=\"text-xs\">Condition</TabsTrigger>\n            <TabsTrigger value=\"display\" className=\"text-xs\">Display</TabsTrigger>\n            <TabsTrigger value=\"styling\" className=\"text-xs\">Styling</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"condition\" className=\"space-y-3 mt-3\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-xs\">When value</Label>\n              <Select\n                value={rule.condition.type}\n                onValueChange={(value: FormattingRule['condition']['type']) =>\n                  onUpdate({\n                    condition: { ...rule.condition, type: value }\n                  })\n                }\n              >\n                <SelectTrigger className=\"h-8\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {CONDITION_OPTIONS.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {conditionOption?.needsValue && (\n              <div className=\"space-y-2\">\n                <Label className=\"text-xs\">Value</Label>\n                <Input\n                  placeholder=\"Enter value\"\n                  value={rule.condition.value}\n                  onChange={(e) =>\n                    onUpdate({\n                      condition: { ...rule.condition, value: e.target.value }\n                    })\n                  }\n                  className=\"h-8\"\n                />\n              </div>\n            )}\n            \n            {conditionOption?.needsValue2 && (\n              <div className=\"space-y-2\">\n                <Label className=\"text-xs\">And</Label>\n                <Input\n                  placeholder=\"Enter second value\"\n                  value={rule.condition.value2 || ''}\n                  onChange={(e) =>\n                    onUpdate({\n                      condition: { ...rule.condition, value2: e.target.value }\n                    })\n                  }\n                  className=\"h-8\"\n                />\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"display\" className=\"space-y-3 mt-3\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-xs\">Display as</Label>\n              <Select\n                value={rule.display.type}\n                onValueChange={(value: FormattingRule['display']['type']) =>\n                  onUpdate({\n                    display: { ...rule.display, type: value }\n                  })\n                }\n              >\n                <SelectTrigger className=\"h-8\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"original\">Original Value</SelectItem>\n                  <SelectItem value=\"custom\">Custom Text</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {rule.display.type === 'custom' && (\n              <div className=\"space-y-2\">\n                <Label className=\"text-xs\">Custom Text</Label>\n                <Input\n                  placeholder=\"e.g., Option 1\"\n                  value={rule.display.text}\n                  onChange={(e) =>\n                    onUpdate({\n                      display: { ...rule.display, text: e.target.value }\n                    })\n                  }\n                  className=\"h-8\"\n                />\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"styling\" className=\"space-y-3 mt-3\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-xs\">Background</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    type=\"color\"\n                    value={rule.styling.backgroundColor}\n                    onChange={(e) =>\n                      onUpdate({\n                        styling: { ...rule.styling, backgroundColor: e.target.value }\n                      })\n                    }\n                    className=\"h-8 w-16 p-1\"\n                  />\n                  <Input\n                    value={rule.styling.backgroundColor}\n                    onChange={(e) =>\n                      onUpdate({\n                        styling: { ...rule.styling, backgroundColor: e.target.value }\n                      })\n                    }\n                    className=\"h-8 flex-1 font-mono text-xs\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-xs\">Text Color</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    type=\"color\"\n                    value={rule.styling.textColor}\n                    onChange={(e) =>\n                      onUpdate({\n                        styling: { ...rule.styling, textColor: e.target.value }\n                      })\n                    }\n                    className=\"h-8 w-16 p-1\"\n                  />\n                  <Input\n                    value={rule.styling.textColor}\n                    onChange={(e) =>\n                      onUpdate({\n                        styling: { ...rule.styling, textColor: e.target.value }\n                      })\n                    }\n                    className=\"h-8 flex-1 font-mono text-xs\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-xs\">Font Weight</Label>\n                <Select\n                  value={rule.styling.fontWeight}\n                  onValueChange={(value: FormattingRule['styling']['fontWeight']) =>\n                    onUpdate({\n                      styling: { ...rule.styling, fontWeight: value }\n                    })\n                  }\n                >\n                  <SelectTrigger className=\"h-8\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"normal\">Normal</SelectItem>\n                    <SelectItem value=\"bold\">Bold</SelectItem>\n                    <SelectItem value=\"100\">100</SelectItem>\n                    <SelectItem value=\"200\">200</SelectItem>\n                    <SelectItem value=\"300\">300</SelectItem>\n                    <SelectItem value=\"400\">400</SelectItem>\n                    <SelectItem value=\"500\">500</SelectItem>\n                    <SelectItem value=\"600\">600</SelectItem>\n                    <SelectItem value=\"700\">700</SelectItem>\n                    <SelectItem value=\"800\">800</SelectItem>\n                    <SelectItem value=\"900\">900</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-xs\">Font Size</Label>\n                <Input\n                  type=\"number\"\n                  value={rule.styling.fontSize || 14}\n                  onChange={(e) =>\n                    onUpdate({\n                      styling: { ...rule.styling, fontSize: Number(e.target.value) }\n                    })\n                  }\n                  className=\"h-8\"\n                  min={8}\n                  max={72}\n                />\n              </div>\n            </div>\n            \n            {/* Border Settings */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-xs\">Border</Label>\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div className=\"space-y-1\">\n                  <Label className=\"text-xs text-muted-foreground\">Width</Label>\n                  <Input\n                    type=\"number\"\n                    value={rule.styling.border?.width || 0}\n                    onChange={(e) =>\n                      onUpdate({\n                        styling: {\n                          ...rule.styling,\n                          border: {\n                            ...rule.styling.border!,\n                            width: Number(e.target.value)\n                          }\n                        }\n                      })\n                    }\n                    className=\"h-7\"\n                    min={0}\n                    max={10}\n                  />\n                </div>\n                <div className=\"space-y-1\">\n                  <Label className=\"text-xs text-muted-foreground\">Style</Label>\n                  <Select\n                    value={rule.styling.border?.style || 'solid'}\n                    onValueChange={(value: 'solid' | 'dashed' | 'dotted' | 'double') =>\n                      onUpdate({\n                        styling: {\n                          ...rule.styling,\n                          border: {\n                            ...rule.styling.border!,\n                            style: value\n                          }\n                        }\n                      })\n                    }\n                  >\n                    <SelectTrigger className=\"h-7\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"solid\">Solid</SelectItem>\n                      <SelectItem value=\"dashed\">Dashed</SelectItem>\n                      <SelectItem value=\"dotted\">Dotted</SelectItem>\n                      <SelectItem value=\"double\">Double</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-1\">\n                  <Label className=\"text-xs text-muted-foreground\">Color</Label>\n                  <Input\n                    type=\"color\"\n                    value={rule.styling.border?.color || '#000000'}\n                    onChange={(e) =>\n                      onUpdate({\n                        styling: {\n                          ...rule.styling,\n                          border: {\n                            ...rule.styling.border!,\n                            color: e.target.value\n                          }\n                        }\n                      })\n                    }\n                    className=\"h-7 p-1\"\n                  />\n                </div>\n              </div>\n              \n              {/* Border Sides */}\n              {(rule.styling.border?.width || 0) > 0 && (\n                <div className=\"flex items-center gap-4 text-xs\">\n                  <Label className=\"text-muted-foreground\">Sides:</Label>\n                  {[\n                    { key: 'top', label: 'Top' },\n                    { key: 'right', label: 'Right' },\n                    { key: 'bottom', label: 'Bottom' },\n                    { key: 'left', label: 'Left' }\n                  ].map(side => (\n                    <label key={side.key} className=\"flex items-center gap-1 cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={rule.styling.border?.sides[side.key as keyof typeof rule.styling.border.sides] || false}\n                        onChange={(e) =>\n                          onUpdate({\n                            styling: {\n                              ...rule.styling,\n                              border: {\n                                ...rule.styling.border!,\n                                sides: {\n                                  ...rule.styling.border!.sides,\n                                  [side.key]: e.target.checked\n                                }\n                              }\n                            }\n                          })\n                        }\n                        className=\"w-3 h-3\"\n                      />\n                      {side.label}\n                    </label>\n                  ))}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/hooks/useOptimizedStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/hooks/useSoundPreference.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/panels/BulkActionsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1157,1160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1157,1160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1686,1689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1686,1689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2101,2104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2101,2104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3964,3967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3964,3967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11223,11226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11223,11226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11284,11287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11284,11287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'TEMPLATE_PROPERTIES'. Either include it or remove the dependency array.","line":379,"column":6,"nodeType":"ArrayExpression","endLine":379,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [selectedColumns, columnDefinitions, pendingChanges, TEMPLATE_PROPERTIES]","fix":{"range":[13356,13408],"text":"[selectedColumns, columnDefinitions, pendingChanges, TEMPLATE_PROPERTIES]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'TEMPLATE_PROPERTIES'. Either include it or remove the dependency array.","line":576,"column":6,"nodeType":"ArrayExpression","endLine":576,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [TEMPLATE_PROPERTIES, updateBulkProperties]","fix":{"range":[21248,21270],"text":"[TEMPLATE_PROPERTIES, updateBulkProperties]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useCallback, useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useColumnCustomizationStore } from '../store/column-customization.store';\nimport { ColDef } from 'ag-grid-community';\nimport {\n  Copy,\n  Eraser,\n  Save,\n  Trash2,\n  AlertCircle,\n  Edit2,\n  Sparkles\n} from 'lucide-react';\n\n// Template storage key\nconst TEMPLATES_STORAGE_KEY = 'column-customization-templates';\n\n// Template interface\ninterface ColumnTemplate {\n  id: string;\n  name: string;\n  createdAt: number;\n  properties: Partial<ColDef>;\n  isSystem?: boolean; // Flag to identify system templates\n}\n\n// Predefined system templates\nconst SYSTEM_TEMPLATES: ColumnTemplate[] = [\n  {\n    id: 'system-currency',\n    name: 'Currency Format',\n    createdAt: Date.now(),\n    isSystem: true,\n    properties: {\n      valueFormatter: (params: any) => {\n        if (params.value == null) return '';\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD'\n        }).format(params.value);\n      },\n      cellStyle: { textAlign: 'right', fontWeight: '500' },\n      headerStyle: () => ({ textAlign: 'right', fontWeight: '600' }),\n      type: 'numericColumn'\n    }\n  },\n  {\n    id: 'system-percentage',\n    name: 'Percentage Format',\n    createdAt: Date.now(),\n    isSystem: true,\n    properties: {\n      valueFormatter: (params: any) => {\n        if (params.value == null) return '';\n        return `${(params.value * 100).toFixed(2)}%`;\n      },\n      cellStyle: { textAlign: 'right', color: '#059669' },\n      headerStyle: () => ({ textAlign: 'right' }),\n      type: 'numericColumn'\n    }\n  },\n  {\n    id: 'system-date',\n    name: 'Date Format',\n    createdAt: Date.now(),\n    isSystem: true,\n    properties: {\n      valueFormatter: (params: any) => {\n        if (!params.value) return '';\n        return new Date(params.value).toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric'\n        });\n      },\n      cellStyle: { textAlign: 'center' },\n      headerStyle: () => ({ textAlign: 'center' }),\n      filter: 'agDateColumnFilter'\n    }\n  },\n  {\n    id: 'system-bold-header',\n    name: 'Bold Headers',\n    createdAt: Date.now(),\n    isSystem: true,\n    properties: {\n      headerStyle: () => ({ \n        fontWeight: '700', \n        backgroundColor: '#f8fafc',\n        borderBottom: '2px solid #e2e8f0'\n      }),\n      wrapHeaderText: true,\n      autoHeaderHeight: true\n    }\n  },\n  {\n    id: 'system-center-align',\n    name: 'Center Aligned',\n    createdAt: Date.now(),\n    isSystem: true,\n    properties: {\n      cellStyle: { textAlign: 'center' },\n      headerStyle: () => ({ textAlign: 'center' })\n    }\n  },\n  {\n    id: 'system-highlight',\n    name: 'Highlighted Column',\n    createdAt: Date.now(),\n    isSystem: true,\n    properties: {\n      cellStyle: { \n        backgroundColor: '#fef3c7', \n        borderLeft: '3px solid #f59e0b',\n        fontWeight: '500'\n      },\n      headerStyle: () => ({ \n        backgroundColor: '#fbbf24', \n        color: '#92400e',\n        fontWeight: '600'\n      })\n    }\n  },\n  {\n    id: 'system-compact',\n    name: 'Compact Layout',\n    createdAt: Date.now(),\n    isSystem: true,\n    properties: {\n      cellStyle: { \n        fontSize: '12px', \n        padding: '4px 8px',\n        lineHeight: '1.2'\n      },\n      headerStyle: () => ({ \n        fontSize: '11px', \n        fontWeight: '600',\n        padding: '4px 8px'\n      }),\n      autoHeight: false\n    }\n  },\n  {\n    id: 'system-status',\n    name: 'Status Badges',\n    createdAt: Date.now(),\n    isSystem: true,\n    properties: {\n      cellRenderer: (params: any) => {\n        if (!params.value) return '';\n        const status = params.value.toLowerCase();\n        const colors = {\n          active: '#10b981',\n          inactive: '#6b7280',\n          pending: '#f59e0b',\n          completed: '#3b82f6',\n          error: '#ef4444'\n        };\n        const color = colors[status as keyof typeof colors] || '#6b7280';\n        return `<span style=\"background: ${color}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: 500;\">${params.value}</span>`;\n      },\n      cellStyle: { textAlign: 'center' },\n      headerStyle: () => ({ textAlign: 'center' })\n    }\n  }\n];\n\n// Helper function to get system template descriptions\nconst getSystemTemplateDescription = (templateId: string): string => {\n  const descriptions: Record<string, string> = {\n    'system-currency': 'Formats numbers as currency with right alignment',\n    'system-percentage': 'Displays values as percentages with green color',\n    'system-date': 'Formats dates in readable format with center alignment',\n    'system-bold-header': 'Makes headers bold with enhanced styling',\n    'system-center-align': 'Centers text in both cells and headers',\n    'system-highlight': 'Highlights column with yellow background',\n    'system-compact': 'Reduces font size and padding for compact view',\n    'system-status': 'Renders status values as colored badges'\n  };\n  return descriptions[templateId] || 'System template';\n};\n\nexport const BulkActionsPanel: React.FC = () => {\n  const {\n    selectedColumns,\n    columnDefinitions,\n    pendingChanges,\n    updateBulkProperties,\n    setAppliedTemplate\n  } = useColumnCustomizationStore();\n\n  const [selectedTemplateIds, setSelectedTemplateIds] = useState<string[]>([]);\n  const [userTemplates, setUserTemplates] = useState<ColumnTemplate[]>([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [templateName, setTemplateName] = useState('');\n  const [templateToDelete, setTemplateToDelete] = useState<string>('');\n  const [editingTemplateId, setEditingTemplateId] = useState<string>('');\n\n  // Combine system and user templates\n  const templates = useMemo(() => {\n    return [...SYSTEM_TEMPLATES, ...userTemplates];\n  }, [userTemplates]);\n\n  // Properties to save in templates - comprehensive list\n  const TEMPLATE_PROPERTIES = [\n    // NOTE: 'field' and 'headerName' are intentionally excluded from templates\n    // They should only be applied to single columns, not in bulk\n    \n    // Data type and basic properties\n    'cellDataType', 'type', 'valueGetter', 'valueSetter',\n    \n    // Filter configurations\n    'filter', 'filterParams', 'floatingFilter', 'floatingFilterComponent', 'floatingFilterComponentParams',\n    'suppressHeaderMenuButton', 'suppressFiltersToolPanel', 'filterValueGetter',\n    \n    // Editor configurations\n    'editable', 'cellEditor', 'cellEditorParams', 'cellEditorPopup', 'cellEditorPopupPosition',\n    'singleClickEdit', 'stopEditingWhenCellsLoseFocus', 'cellEditorSelector',\n    \n    // Format configurations\n    'valueFormatter', 'useValueFormatterForExport',\n    'cellClass', 'cellClassRules', 'cellStyle',\n    \n    // Header configurations\n    'headerClass', 'headerStyle', 'headerTooltip', 'headerComponent', 'headerComponentParams',\n    'headerTextAlign', 'headerCheckboxSelection', 'headerCheckboxSelectionFilteredOnly',\n    'wrapHeaderText', 'autoHeaderHeight',  // Added from StylingTab\n    \n    // Cell renderer\n    'cellRenderer', 'cellRendererParams', 'cellRendererSelector',\n    \n    // Layout and display\n    'wrapText', 'autoHeight', 'rowSpan', 'colSpan',\n    'textAlign', 'verticalAlign',\n    \n    // Sorting and aggregation\n    'sortable', 'sort', 'sortingOrder', 'comparator',\n    'unSortIcon', 'aggFunc', 'allowedAggFuncs',\n    \n    // Pinning and sizing\n    'pinned', 'lockPosition', 'lockPinned', 'lockVisible',\n    'width', 'minWidth', 'maxWidth', 'flex',\n    'resizable', 'suppressSizeToFit',\n    'initialWidth', 'initialHide', 'initialPinned',  // Added from GeneralTab\n    \n    // Tooltips\n    'tooltip', 'tooltipField', 'tooltipValueGetter', 'tooltipComponent', 'tooltipComponentParams',\n    \n    // Other properties\n    'suppressKeyboardEvent', 'suppressNavigable', 'suppressPaste',\n    'checkboxSelection', 'showDisabledCheckboxes'\n  ];\n\n  // Load templates from localStorage\n  useEffect(() => {\n    const storedTemplates = localStorage.getItem(TEMPLATES_STORAGE_KEY);\n    if (storedTemplates) {\n      try {\n        setUserTemplates(JSON.parse(storedTemplates));\n      } catch (e) {\n        console.error('Failed to load templates:', e);\n      }\n    }\n  }, []);\n\n  // Save templates to localStorage\n  const saveTemplates = useCallback((newTemplates: ColumnTemplate[]) => {\n    setUserTemplates(newTemplates);\n    localStorage.setItem(TEMPLATES_STORAGE_KEY, JSON.stringify(newTemplates));\n  }, []);\n\n  // Get current column configuration\n  const getCurrentColumnConfig = useCallback(() => {\n    if (selectedColumns.size === 0) return null;\n    \n    // Get the first selected column's configuration\n    const firstColumnId = Array.from(selectedColumns)[0];\n    const columnDef = columnDefinitions.get(firstColumnId);\n    const changes = pendingChanges.get(firstColumnId);\n    \n    if (!columnDef) return null;\n    \n    const config: Partial<ColDef> = {};\n    \n    TEMPLATE_PROPERTIES.forEach(property => {\n      // Check pending changes first, then column definition\n      const value = changes?.[property] ?? columnDef[property as keyof ColDef];\n      if (value !== undefined) {\n        // Special handling for functions - convert to serializable format\n        if (typeof value === 'function') {\n          // For formatters, we just copy the function reference\n          if (property === 'valueFormatter') {\n            // Store the formatter function directly\n            if (value && typeof value === 'function') {\n              config[property] = value;\n            }\n          } else if (property === 'headerStyle') {\n            // Special handling for headerStyle function\n            try {\n              // Extract styles for both regular header and floating filter\n              const regularStyle = value({ floatingFilter: false });\n              const floatingStyle = value({ floatingFilter: true });\n              \n              // Store as an object that preserves the conditional logic\n              config[property] = {\n                _isHeaderStyleConfig: true,\n                regular: regularStyle,\n                floating: floatingStyle\n              };\n            } catch (e) {\n              console.warn(`Failed to extract headerStyle:`, e);\n              // Try to store just the regular style\n              try {\n                const regularStyle = value({});\n                if (regularStyle && typeof regularStyle === 'object') {\n                  config[property] = regularStyle;\n                }\n              } catch (e2) {\n                console.warn(`Failed to extract headerStyle completely:`, e2);\n              }\n            }\n          } else if (property === 'cellStyle') {\n            // Check if this is our conditional formatting function with metadata\n            const formatString = (value as any).__formatString;\n            const baseStyle = (value as any).__baseStyle;\n            \n            if (formatString) {\n              // Store as a configuration object that can be recreated\n              config[property] = {\n                type: 'function',\n                formatString: formatString,\n                baseStyle: baseStyle\n              };\n            } else {\n              // Extract style by calling the function if it's a function\n              try {\n                const extractedStyle = value({});\n                if (extractedStyle && typeof extractedStyle === 'object') {\n                  config[property] = extractedStyle;\n                }\n              } catch (e) {\n                // If function fails, try to store as is\n                console.warn(`Failed to extract cellStyle:`, e);\n              }\n            }\n          } else if (property === 'comparator' || property === 'valueGetter' || property === 'valueSetter' || \n                     property === 'cellRenderer' || property === 'cellEditor' || property === 'filterValueGetter' ||\n                     property === 'tooltipValueGetter') {\n            // For other functions, store a flag that they exist\n            config[`_has${property.charAt(0).toUpperCase() + property.slice(1)}`] = true;\n          }\n        } else if (value && typeof value === 'object' && property === 'headerStyle' && \n                   value._isHeaderStyleConfig) {\n          // If it's already in our special format, store it as is\n          config[property] = value;\n        } else {\n          // For non-function values, store directly\n          config[property] = value;\n        }\n      }\n    });\n    \n    console.log('[BulkActionsPanel] Template configuration captured:', {\n      columnId: firstColumnId,\n      propertiesFound: Object.keys(config),\n      hasHeaderStyle: !!config.headerStyle,\n      headerStyleType: config.headerStyle ? typeof config.headerStyle : 'none',\n      hasCellStyle: !!config.cellStyle,\n      hasValueFormatter: !!config.valueFormatter,\n      totalProperties: Object.keys(config).length\n    });\n    \n    return config;\n  }, [selectedColumns, columnDefinitions, pendingChanges]);\n\n  // Save current configuration as template\n  const saveAsTemplate = useCallback(() => {\n    const config = getCurrentColumnConfig();\n    if (!config || !templateName.trim()) return;\n    \n    const newTemplate: ColumnTemplate = {\n      id: editingTemplateId || Date.now().toString(),\n      name: templateName.trim(),\n      createdAt: Date.now(),\n      properties: config\n    };\n    \n    let newTemplates: ColumnTemplate[];\n    if (editingTemplateId) {\n      // Update existing template\n      newTemplates = userTemplates.map(t => \n        t.id === editingTemplateId ? newTemplate : t\n      );\n    } else {\n      // Add new template\n      newTemplates = [...userTemplates, newTemplate];\n    }\n    \n    saveTemplates(newTemplates);\n    setShowSaveDialog(false);\n    setTemplateName('');\n    setEditingTemplateId('');\n  }, [getCurrentColumnConfig, templateName, userTemplates, saveTemplates, editingTemplateId]);\n\n  // Apply template to selected columns\n  const applyTemplate = useCallback(() => {\n    if (!selectedTemplateIds.length) return;\n    \n    console.log('[BulkActionsPanel] Applying multiple templates:', {\n      templateIds: selectedTemplateIds,\n      templateNames: selectedTemplateIds.map(id => templates.find(t => t.id === id)?.name).filter(Boolean),\n      selectedColumnsCount: selectedColumns.size\n    });\n    \n    // Merge all selected templates - later templates override earlier ones\n    const mergedProperties: Partial<ColDef> = {};\n    const appliedTemplateNames: string[] = [];\n    \n    selectedTemplateIds.forEach(templateId => {\n      const template = templates.find(t => t.id === templateId);\n      if (!template) return;\n      \n      appliedTemplateNames.push(template.name);\n      \n      // Create a copy of template properties\n      const templateProps = { ...template.properties };\n      \n      // Remove field and headerName to ensure they're never applied from templates\n      delete templateProps.field;\n      delete templateProps.headerName;\n      \n      // Special handling for certain properties\n      \n      // If template has a valueFormatter, apply it directly\n      if (templateProps.valueFormatter && typeof templateProps.valueFormatter === 'function') {\n        mergedProperties.valueFormatter = templateProps.valueFormatter;\n      }\n      // Handle useValueFormatterForExport (boolean flag)\n      if (templateProps.useValueFormatterForExport !== undefined) {\n        mergedProperties.useValueFormatterForExport = templateProps.useValueFormatterForExport;\n      }\n      \n      // Handle headerStyle - convert back to function if needed\n      if (templateProps.headerStyle) {\n        const headerStyle = templateProps.headerStyle;\n        if (headerStyle._isHeaderStyleConfig) {\n          // Convert to function format\n          mergedProperties.headerStyle = (params: { floatingFilter?: boolean }) => {\n            if (params?.floatingFilter) {\n              return headerStyle.floating || null;\n            }\n            return headerStyle.regular || null;\n          };\n        } else if (typeof headerStyle === 'object') {\n          // Legacy format - just a style object\n          mergedProperties.headerStyle = (params: { floatingFilter?: boolean }) => {\n            if (!params?.floatingFilter) {\n              return headerStyle;\n            }\n            return null;\n          };\n        }\n      }\n      \n      // Handle cellStyle - recreate function if needed\n      if (templateProps.cellStyle) {\n        const cellStyle = templateProps.cellStyle;\n        if (cellStyle.type === 'function' && cellStyle.formatString) {\n          // We'll handle this after merging, store the config for now\n          mergedProperties._cellStyleConfig = cellStyle;\n        } else if (typeof cellStyle === 'object' && !cellStyle.type) {\n          // Static style object\n          mergedProperties.cellStyle = cellStyle;\n        }\n      }\n      \n      // Merge all other properties (later templates override earlier ones)\n      Object.keys(templateProps).forEach(key => {\n        if (key !== 'valueFormatter' && key !== 'headerStyle' && key !== 'useValueFormatterForExport' && key !== 'cellStyle') {\n          mergedProperties[key] = templateProps[key];\n        }\n      });\n    });\n    \n    console.log('[BulkActionsPanel] Merged template properties:', {\n      appliedTemplates: appliedTemplateNames,\n      mergedPropertiesCount: Object.keys(mergedProperties).length,\n      properties: Object.keys(mergedProperties),\n      hasHeaderStyle: !!mergedProperties.headerStyle,\n      headerStyleType: mergedProperties.headerStyle ? typeof mergedProperties.headerStyle : 'none',\n      hasValueFormatter: !!mergedProperties.valueFormatter\n    });\n    \n    // Handle cellStyle config if present\n    if (mergedProperties._cellStyleConfig) {\n      const cellStyleConfig = mergedProperties._cellStyleConfig;\n      delete mergedProperties._cellStyleConfig; // Remove temporary config\n      \n      // Import and recreate the cellStyle function\n      import('../../../utils/formatters').then(({ createCellStyleFunction }) => {\n        const styleFunc = createCellStyleFunction(cellStyleConfig.formatString, cellStyleConfig.baseStyle);\n        // Attach metadata for future serialization\n        Object.defineProperty(styleFunc, '__formatString', { \n          value: cellStyleConfig.formatString, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        Object.defineProperty(styleFunc, '__baseStyle', { \n          value: cellStyleConfig.baseStyle, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        // Update cellStyle separately\n        updateBulkProperties({ cellStyle: styleFunc });\n      });\n    }\n    \n    // Apply all merged properties at once\n    updateBulkProperties(mergedProperties);\n    \n    // Track which templates were applied to each selected column\n    selectedColumns.forEach(columnId => {\n      // For multiple templates, we'll track the combined template names\n      const combinedTemplateName = appliedTemplateNames.join(' + ');\n      const combinedTemplateId = selectedTemplateIds.join('+');\n      setAppliedTemplate(columnId, combinedTemplateId, combinedTemplateName);\n    });\n    \n    setSelectedTemplateIds([]); // Clear selection after applying\n  }, [selectedTemplateIds, templates, updateBulkProperties, selectedColumns, setAppliedTemplate]);\n\n  // Delete template\n  const deleteTemplate = useCallback(() => {\n    if (!templateToDelete) return;\n    \n    // Prevent deleting system templates\n    const templateToDeleteObj = templates.find(t => t.id === templateToDelete);\n    if (templateToDeleteObj?.isSystem) {\n      console.warn('Cannot delete system template');\n      setShowDeleteDialog(false);\n      setTemplateToDelete('');\n      return;\n    }\n    \n    const newTemplates = userTemplates.filter(t => t.id !== templateToDelete);\n    saveTemplates(newTemplates);\n    setShowDeleteDialog(false);\n    setTemplateToDelete('');\n    \n    // Clear selection if deleted template was selected\n    if (selectedTemplateIds.includes(templateToDelete)) {\n      setSelectedTemplateIds(selectedTemplateIds.filter(id => id !== templateToDelete));\n    }\n  }, [templateToDelete, userTemplates, saveTemplates, selectedTemplateIds, templates]);\n\n  // Clear all customizations from selected columns\n  const clearSelectedCustomizations = useCallback(() => {\n    // Use the same comprehensive list as templates\n    const propertiesToClear = TEMPLATE_PROPERTIES.filter(prop => !prop.startsWith('_'));\n    \n    // Build object with all properties set to undefined\n    const clearProperties: Record<string, undefined> = {};\n    propertiesToClear.forEach(property => {\n      clearProperties[property] = undefined;\n    });\n    \n    // Batch clear all properties at once\n    updateBulkProperties(clearProperties);\n  }, [updateBulkProperties]);\n\n  // Count pending changes\n  const changeCount = useMemo(() => {\n    let count = 0;\n    pendingChanges.forEach((changes) => {\n      count += Object.keys(changes).length;\n    });\n    return count;\n  }, [pendingChanges]);\n\n  const isDisabled = selectedColumns.size === 0;\n  const canSaveTemplate = selectedColumns.size === 1;\n  const hasTemplates = userTemplates.length > 0;\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Compact header section */}\n      <div className=\"px-4 py-2 border-b bg-card/50\">\n        <h3 className=\"text-xs font-semibold uppercase text-muted-foreground tracking-wider\">\n          Templates\n        </h3>\n        {selectedColumns.size > 1 && (\n          <Alert className=\"mt-1\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-xs\">\n              Select only one column to save as a template\n            </AlertDescription>\n          </Alert>\n        )}\n      </div>\n\n      {/* Scrollable content area - expanded */}\n      <div className=\"flex-1 overflow-y-auto min-h-0\">\n        <div className=\"p-3\">\n          {/* Template Selection */}\n          {!hasTemplates ? (\n            <div className=\"px-3 py-4 text-center text-xs text-muted-foreground border rounded-md bg-muted/20\">\n              <p className=\"mb-1\">No templates saved</p>\n              <p className=\"text-xs opacity-70\">Save current settings as a template</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-xs text-muted-foreground\">\n                  {selectedTemplateIds.length} selected\n                </div>\n                <div className=\"flex gap-1\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-6 px-2 text-xs\"\n                    onClick={() => setSelectedTemplateIds(templates.map(t => t.id))}\n                    disabled={selectedTemplateIds.length === templates.length}\n                  >\n                    All\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-6 px-2 text-xs\"\n                    onClick={() => setSelectedTemplateIds([])}\n                    disabled={selectedTemplateIds.length === 0}\n                  >\n                    None\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Template list - expanded height */}\n              <div className=\"max-h-80 overflow-y-auto border rounded-lg bg-background\">\n                <div className=\"p-2 space-y-1\">\n                  {templates.map((template) => (\n                    <div \n                      key={template.id} \n                      className={`group flex items-center gap-3 p-2 rounded-md border transition-all hover:bg-muted/50 ${\n                        selectedTemplateIds.includes(template.id) \n                          ? 'bg-muted/30 border-primary/20' \n                          : 'border-transparent hover:border-border'\n                      } ${\n                        template.isSystem \n                          ? 'bg-gradient-to-r from-blue-50/50 to-transparent dark:from-blue-950/20 dark:to-transparent' \n                          : ''\n                      }`}\n                    >\n                      <Checkbox\n                        id={`template-${template.id}`}\n                        checked={selectedTemplateIds.includes(template.id)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedTemplateIds([...selectedTemplateIds, template.id]);\n                          } else {\n                            setSelectedTemplateIds(selectedTemplateIds.filter(id => id !== template.id));\n                          }\n                        }}\n                        className=\"shrink-0\"\n                      />\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2\">\n                          <label \n                            htmlFor={`template-${template.id}`} \n                            className=\"text-sm font-medium cursor-pointer truncate\"\n                          >\n                            {template.name}\n                          </label>\n                          {template.isSystem && (\n                            <Sparkles className=\"h-3 w-3 text-blue-500 shrink-0\" title=\"System template\" />\n                          )}\n                        </div>\n                        {template.isSystem && (\n                          <p className=\"text-xs text-muted-foreground mt-0.5 truncate\">\n                            {getSystemTemplateDescription(template.id)}\n                          </p>\n                        )}\n                      </div>\n                      \n                      {!template.isSystem && (\n                        <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-6 w-6 p-0\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setEditingTemplateId(template.id);\n                              setTemplateName(template.name);\n                              setShowSaveDialog(true);\n                            }}\n                            title=\"Edit template\"\n                          >\n                            <Edit2 className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-6 w-6 p-0 text-destructive hover:text-destructive\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setTemplateToDelete(template.id);\n                              setShowDeleteDialog(true);\n                            }}\n                            title=\"Delete template\"\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Compact footer section with horizontal layouts */}\n      <div className=\"border-t bg-card/50 p-3 space-y-3\">\n        {/* Apply Templates Button - full width */}\n        <Button\n          variant=\"default\"\n          size=\"sm\"\n          className=\"w-full h-8 text-sm gap-2\"\n          onClick={applyTemplate}\n          disabled={!selectedTemplateIds.length}\n          title={selectedTemplateIds.length ? `Apply ${selectedTemplateIds.length} template${selectedTemplateIds.length !== 1 ? 's' : ''}` : \"Select templates to apply\"}\n        >\n          <Copy className=\"h-4 w-4\" />\n          Apply Templates {selectedTemplateIds.length > 0 && `(${selectedTemplateIds.length})`}\n        </Button>\n\n        {/* Action buttons - horizontal layout */}\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1 h-8 text-sm gap-1\"\n            onClick={() => {\n              setEditingTemplateId('');\n              setTemplateName('');\n              setShowSaveDialog(true);\n            }}\n            disabled={!canSaveTemplate}\n            title={!canSaveTemplate ? \"Select only one column to save as template\" : \"Save current column as template\"}\n          >\n            <Save className=\"h-3 w-3\" />\n            Save New\n          </Button>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            className=\"flex-1 h-8 text-sm gap-1\"\n            onClick={clearSelectedCustomizations}\n            disabled={isDisabled}\n          >\n            <Eraser className=\"h-3 w-3\" />\n            Clear Selected\n          </Button>\n        </div>\n\n        {/* Compact status grid */}\n        <div className=\"grid grid-cols-2 gap-1 text-xs\">\n          <div className=\"flex items-center justify-between p-1.5 rounded bg-muted/30\">\n            <span className=\"text-muted-foreground\">Selected</span>\n            <span className=\"font-medium\">{selectedColumns.size}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-1.5 rounded bg-muted/30\">\n            <span className=\"text-muted-foreground\">Changes</span>\n            <span className=\"font-medium\">{changeCount}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Save Template Dialog */}\n      <Dialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingTemplateId ? 'Update Template' : 'Save as Template'}\n            </DialogTitle>\n            <DialogDescription>\n              Save the current column configuration as a reusable template\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"template-name\" className=\"text-sm font-medium\">\n                Template Name\n              </label>\n              <Input\n                id=\"template-name\"\n                value={templateName}\n                onChange={(e) => setTemplateName(e.target.value)}\n                placeholder=\"e.g., Currency Column\"\n                className=\"h-9\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowSaveDialog(false);\n                setTemplateName('');\n                setEditingTemplateId('');\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={saveAsTemplate}\n              disabled={!templateName.trim()}\n            >\n              {editingTemplateId ? 'Update' : 'Save'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Template Dialog */}\n      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Delete Template</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete this template? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowDeleteDialog(false);\n                setTemplateToDelete('');\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={deleteTemplate}\n            >\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/panels/ColumnSelectorPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":378,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14996,14999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14996,14999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useCallback, useState } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Search, Columns3, Filter, Eye, EyeOff, Hash, Type, Calendar, ToggleLeft, Package, CircleDot, DollarSign, Palette, Edit3, Settings, X } from 'lucide-react';\nimport { ColDef } from 'ag-grid-community';\nimport { useColumnCustomizationStore } from '../store/column-customization.store';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { CustomizationBadges, CustomizationType } from '../components/CustomizationBadges';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\n\n// Helper function to get icon component based on column type\nconst getColumnIcon = (type: string) => {\n  switch (type) {\n    case 'number':\n    case 'numericColumn':\n      return Hash;\n    case 'currency':\n      return DollarSign;\n    case 'date':\n    case 'dateColumn':\n      return Calendar;\n    case 'text':\n    case 'textColumn':\n      return Type;\n    case 'boolean':\n    case 'booleanColumn':\n      return ToggleLeft;\n    case 'object':\n      return Package;\n    default:\n      return CircleDot;\n  }\n};\n\nexport const ColumnSelectorPanel: React.FC = React.memo(() => {\n  const {\n    selectedColumns,\n    columnDefinitions,\n    columnState,\n    searchTerm,\n    cellDataTypeFilter,\n    visibilityFilter,\n    templateColumns,\n    appliedTemplates,\n    toggleColumnSelection,\n    selectColumns,\n    deselectColumns,\n    setSearchTerm,\n    setCellDataTypeFilter,\n    setVisibilityFilter,\n    toggleTemplateColumn\n  } = useColumnCustomizationStore();\n\n  const parentRef = React.useRef<HTMLDivElement>(null);\n\n  // Get all columns as array\n  const allColumns = useMemo(() => {\n    return Array.from(columnDefinitions.values());\n  }, [columnDefinitions]);\n\n  // Get available cellDataType options\n  const availableCellDataTypes = useMemo(() => {\n    const types = new Set<string>();\n    allColumns.forEach(col => {\n      if (col.cellDataType) {\n        types.add(col.cellDataType);\n      }\n    });\n    return Array.from(types).sort();\n  }, [allColumns]);\n\n  // Filter columns based on search, cellDataType, and visibility\n  const filteredColumns = useMemo(() => {\n    let filtered = allColumns;\n\n    // Filter by search term\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(col =>\n        col.field?.toLowerCase().includes(term) ||\n        col.headerName?.toLowerCase().includes(term)\n      );\n    }\n\n    // Filter by cellDataType\n    if (cellDataTypeFilter && cellDataTypeFilter !== 'all') {\n      filtered = filtered.filter(col => col.cellDataType === cellDataTypeFilter);\n    }\n\n    // Filter by visibility using column state\n    if (visibilityFilter !== 'all') {\n      filtered = filtered.filter(col => {\n        // Try multiple ways to match column with state\n        const field = col.field || '';\n        const colId = col.colId || field;\n        \n        // Try to find column state by field first, then by colId\n        let colState = columnState.get(field);\n        if (!colState && field !== colId) {\n          colState = columnState.get(colId);\n        }\n        \n        // Check if column state exists at all - if not, the grid API might not be returning state for all columns\n        // AG-Grid only includes columns in getColumnState if they have been modified from defaults\n        // So if a column has no state, it means it's using default settings (visible)\n        const isHidden = colState?.hide === true; // Only hidden if explicitly set to true\n        \n        return visibilityFilter === 'hidden' ? isHidden : !isHidden;\n      });\n    }\n\n    return filtered;\n  }, [allColumns, searchTerm, cellDataTypeFilter, visibilityFilter, columnState]);\n\n  // Prepare items for virtual scrolling (simple flat list)\n  const flatItems = useMemo(() => {\n    return filteredColumns.map(column => ({ \n      type: 'column' as const, \n      column,\n      id: column.field || column.colId || ''\n    }));\n  }, [filteredColumns]);\n\n  // Virtual scrolling setup\n  const virtualizer = useVirtualizer({\n    count: flatItems.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 40, // Estimated height per item\n    overscan: 5\n  });\n\n  const selectAllFilteredColumns = useCallback(() => {\n    const columnIds = filteredColumns\n      .map(col => col.field || col.colId || '')\n      .filter(id => id && !selectedColumns.has(id));\n    if (columnIds.length > 0) {\n      selectColumns(columnIds);\n    }\n  }, [filteredColumns, selectedColumns, selectColumns]);\n\n  const deselectAllFilteredColumns = useCallback(() => {\n    const columnIds = filteredColumns\n      .map(col => col.field || col.colId || '')\n      .filter(id => id && selectedColumns.has(id));\n    if (columnIds.length > 0) {\n      deselectColumns(columnIds);\n    }\n  }, [filteredColumns, selectedColumns, deselectColumns]);\n\n  const isAllSelected = useMemo(() => \n    filteredColumns.length > 0 &&\n    filteredColumns.every(col => selectedColumns.has(col.field || col.colId || '')),\n    [filteredColumns, selectedColumns]\n  );\n  const isIndeterminate = useMemo(() => \n    filteredColumns.some(col => selectedColumns.has(col.field || col.colId || '')) &&\n    !isAllSelected,\n    [filteredColumns, selectedColumns, isAllSelected]\n  );\n\n  // Count of filtered columns that are selected\n  const filteredSelectedCount = useMemo(() => \n    filteredColumns.filter(col =>\n      selectedColumns.has(col.field || col.colId || '')\n    ).length,\n    [filteredColumns, selectedColumns]\n  );\n\n  return (\n    <TooltipProvider>\n      <div className=\"h-full flex flex-col\">\n        {/* Modern Header */}\n        <div className=\"px-4 py-3 border-b border-border/40 bg-gradient-to-r from-muted/15 to-muted/5 backdrop-blur-sm\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-1.5 rounded-md bg-gradient-to-br from-primary/20 to-primary/10 border border-primary/20\">\n              <Columns3 className=\"h-4 w-4 text-primary\" />\n            </div>\n            <span className=\"text-sm font-semibold tracking-tight\">Columns</span>\n            <Badge variant=\"outline\" className=\"text-xs px-2 py-1 ml-auto font-medium rounded-md border-border/60\">\n              {filteredColumns.length}\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"flex-1 flex flex-col p-4\">\n          {/* Modern Search Bar */}\n          <div className=\"relative mb-3\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              placeholder=\"Search columns...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-9 h-9 text-sm rounded-lg border-border/60 bg-background/80 backdrop-blur-sm focus:border-primary/60 focus:ring-primary/20 transition-all duration-200\"\n            />\n          </div>\n\n          {/* Filters */}\n          <div className=\"space-y-3 mb-4\">\n            {/* CellDataType Filter */}\n            <Select\n              value={cellDataTypeFilter}\n              onValueChange={setCellDataTypeFilter}\n            >\n              <SelectTrigger className=\"h-9 text-sm rounded-lg border-border/60 bg-background/80 backdrop-blur-sm\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue placeholder=\"Filter by data type\" />\n              </SelectTrigger>\n              <SelectContent className=\"rounded-lg border-border/60 bg-background/95 backdrop-blur-md\">\n                <SelectItem value=\"all\" className=\"text-sm\">All Data Types</SelectItem>\n                {availableCellDataTypes.map(type => {\n                  const TypeIcon = getColumnIcon(type);\n                  return (\n                    <SelectItem key={type} value={type} className=\"text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <TypeIcon className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"capitalize\">{type}</span>\n                      </div>\n                    </SelectItem>\n                  );\n                })}\n              </SelectContent>\n            </Select>\n\n            {/* Visibility Filter */}\n            <Select\n              value={visibilityFilter}\n              onValueChange={(value: 'all' | 'visible' | 'hidden') => setVisibilityFilter(value)}\n            >\n              <SelectTrigger className=\"h-9 text-sm rounded-lg border-border/60 bg-background/80 backdrop-blur-sm\">\n                {visibilityFilter === 'visible' ? (\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                ) : visibilityFilter === 'hidden' ? (\n                  <EyeOff className=\"h-4 w-4 mr-2\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                )}\n                <SelectValue placeholder=\"Filter by visibility\" />\n              </SelectTrigger>\n              <SelectContent className=\"rounded-lg border-border/60 bg-background/95 backdrop-blur-md\">\n                <SelectItem value=\"all\" className=\"text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4\" />\n                    <span>All Columns</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"visible\" className=\"text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4 text-green-600\" />\n                    <span>Visible Columns</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"hidden\" className=\"text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <EyeOff className=\"h-4 w-4 text-red-600\" />\n                    <span>Hidden Columns</span>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Modern Selection Controls */}\n          <div className=\"flex items-center gap-2.5 mb-4\">\n            <Checkbox\n              checked={isAllSelected ? true : isIndeterminate ? \"indeterminate\" : false}\n              onCheckedChange={(checked) => {\n                if (checked === true || checked === \"indeterminate\") {\n                  selectAllFilteredColumns();\n                } else {\n                  deselectAllFilteredColumns();\n                }\n              }}\n              className=\"rounded\"\n            />\n            <span className=\"text-xs font-medium text-foreground\">\n              {(searchTerm || cellDataTypeFilter !== 'all' || visibilityFilter !== 'all') ? 'All Filtered' : 'All'}\n            </span>\n            {filteredSelectedCount > 0 && (\n              <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5 font-medium rounded-md bg-secondary/80 border border-secondary/40\">\n                {filteredSelectedCount}/{filteredColumns.length}\n              </Badge>\n            )}\n          </div>\n\n          {/* Virtual Column List */}\n          <div className=\"flex-1 -mx-1\">\n            <div\n              ref={parentRef}\n              className=\"h-full overflow-auto px-1 scrollbar-thin\"\n              style={{ contain: 'strict' }}\n            >\n              <div\n                style={{\n                  height: `${virtualizer.getTotalSize()}px`,\n                  width: '100%',\n                  position: 'relative',\n                }}\n              >\n                {virtualizer.getVirtualItems().map((virtualItem) => {\n                  const item = flatItems[virtualItem.index];\n\n                  return (\n                    <div\n                      key={virtualItem.key}\n                      style={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        width: '100%',\n                        height: `${virtualItem.size}px`,\n                        transform: `translateY(${virtualItem.start}px)`,\n                      }}\n                    >\n                      <ColumnItem\n                        column={item.column}\n                        columnId={item.id}\n                        selected={selectedColumns.has(item.id)}\n                        isTemplate={templateColumns instanceof Set ? templateColumns.has(item.id) : false}\n                        isHidden={(() => {\n                          // Try to find column state by field first, then by colId\n                          const field = item.column.field || '';\n                          const colId = item.column.colId || field;\n                          let colState = columnState.get(field);\n                          if (!colState && field !== colId) {\n                            colState = columnState.get(colId);\n                          }\n                          return colState?.hide || false;\n                        })()}\n                        appliedTemplate={appliedTemplates.get(item.id)}\n                        onToggle={toggleColumnSelection}\n                        onToggleTemplate={toggleTemplateColumn}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n});\n\nColumnSelectorPanel.displayName = 'ColumnSelectorPanel';\n\n// Clean Column Item Component\nconst ColumnItem: React.FC<{\n  column: ColDef;\n  columnId: string;\n  selected: boolean;\n  isTemplate: boolean;\n  isHidden: boolean;\n  appliedTemplate?: { templateId: string; templateName: string; appliedAt: number };\n  onToggle: (columnId: string) => void;\n  onToggleTemplate: (columnId: string) => void;\n}> = React.memo(({ column, columnId, selected, isTemplate: _isTemplate, isHidden, appliedTemplate, onToggle, onToggleTemplate: _onToggleTemplate }) => {\n  const { removeColumnCustomization, removeAppliedTemplate, pendingChanges } = useColumnCustomizationStore();\n  const [isHoveringTemplate, setIsHoveringTemplate] = useState(false);\n  const iconKey = (column.cellDataType || column.type || 'text') as string;\n  const IconComponent = getColumnIcon(iconKey);\n\n  // Detect customizations including template info\n  const customizations = useMemo(() => {\n    const customs: CustomizationType[] = [];\n    \n    // Get pending changes for this column\n    const pending = pendingChanges.get(columnId) || {};\n    \n    // Merge original column with pending changes to get effective column state\n    const effectiveColumn = { ...column, ...pending };\n    \n    // Helper function to check if a value exists and is not undefined\n    const hasValue = (value: any) => value !== undefined && value !== null;\n    \n    // Check for styling customizations\n    const hasStyle = hasValue(effectiveColumn.cellStyle) || hasValue(effectiveColumn.headerStyle) || \n                     hasValue(effectiveColumn.cellClass) || hasValue(effectiveColumn.headerClass);\n    if (hasStyle) {\n      let styleCount = 0;\n      if (hasValue(effectiveColumn.cellStyle)) styleCount++;\n      if (hasValue(effectiveColumn.headerStyle)) styleCount++;\n      if (hasValue(effectiveColumn.cellClass)) styleCount++;\n      if (hasValue(effectiveColumn.headerClass)) styleCount++;\n      customs.push({ \n        type: 'style', \n        label: 'Styling customizations', \n        icon: Palette,\n        count: styleCount\n      });\n    }\n\n    // Check for formatter\n    if (hasValue(effectiveColumn.valueFormatter)) {\n      customs.push({ \n        type: 'formatter', \n        label: 'Value formatter', \n        icon: Hash \n      });\n    }\n\n    // Check for filter\n    if (hasValue(effectiveColumn.filter) || hasValue(effectiveColumn.filterParams)) {\n      customs.push({ \n        type: 'filter', \n        label: 'Filter settings', \n        icon: Filter \n      });\n    }\n\n    // Check for editor\n    if (hasValue(effectiveColumn.cellEditor) || hasValue(effectiveColumn.cellEditorParams)) {\n      customs.push({ \n        type: 'editor', \n        label: 'Cell editor', \n        icon: Edit3 \n      });\n    }\n\n    // Check for general settings (width, pinning, etc)\n    const hasGeneral = hasValue(effectiveColumn.width) || hasValue(effectiveColumn.minWidth) || hasValue(effectiveColumn.maxWidth) || \n                      hasValue(effectiveColumn.pinned) || hasValue(effectiveColumn.lockPosition) || hasValue(effectiveColumn.lockVisible);\n    if (hasGeneral) {\n      let generalCount = 0;\n      if (hasValue(effectiveColumn.width) || hasValue(effectiveColumn.minWidth) || hasValue(effectiveColumn.maxWidth)) generalCount++;\n      if (hasValue(effectiveColumn.pinned)) generalCount++;\n      if (hasValue(effectiveColumn.lockPosition) || hasValue(effectiveColumn.lockVisible)) generalCount++;\n      customs.push({ \n        type: 'general', \n        label: 'General settings', \n        icon: Settings,\n        count: generalCount\n      });\n    }\n\n    return customs;\n  }, [column, columnId, pendingChanges]);\n\n  const handleToggle = useCallback(() => {\n    onToggle(columnId);\n  }, [columnId, onToggle]);\n\n  const _handleToggleTemplate = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    _onToggleTemplate(columnId);\n  }, [columnId, _onToggleTemplate]);\n\n  const handleRemoveCustomization = useCallback((type: string) => {\n    removeColumnCustomization(columnId, type);\n  }, [columnId, removeColumnCustomization]);\n\n  return (\n    <div \n      className={`relative flex items-center gap-2 px-3 py-1.5 rounded-md hover:bg-muted/50 transition-colors group cursor-pointer ${\n        selected ? 'bg-muted/30' : ''\n      }`}\n      onClick={handleToggle}\n    >\n      {selected && (\n        <div className=\"absolute left-0 h-full w-1 bg-primary rounded-r\" />\n      )}\n      <Checkbox\n        checked={selected}\n        onCheckedChange={handleToggle}\n        onClick={(e) => e.stopPropagation()}\n        className=\"shrink-0\"\n      />\n      <IconComponent className=\"h-4 w-4 shrink-0 text-muted-foreground\" />\n      <span className=\"text-sm flex-1 flex items-center gap-1 min-w-0\">\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <span className={`truncate ${isHidden ? 'opacity-50' : ''}`}>\n              {column.headerName || column.field}\n            </span>\n          </TooltipTrigger>\n          <TooltipContent>\n            {column.headerName || column.field}\n          </TooltipContent>\n        </Tooltip>\n        {isHidden && (\n          <EyeOff className=\"h-3 w-3 text-muted-foreground shrink-0\" />\n        )}\n      </span>\n      \n      {/* Customization Count with Popover - moved to the right */}\n      {(customizations.length > 0 || appliedTemplate) && (\n        <Popover>\n          <PopoverTrigger asChild>\n            <div \n              className=\"h-5 w-5 shrink-0 rounded-full bg-primary/10 flex items-center justify-center cursor-pointer hover:bg-primary/20 transition-colors ml-auto\"\n              title={`${customizations.length + (appliedTemplate ? 1 : 0)} customization${customizations.length + (appliedTemplate ? 1 : 0) !== 1 ? 's' : ''} applied`}\n            >\n              <span className=\"text-[10px] font-medium text-primary\">{customizations.length + (appliedTemplate ? 1 : 0)}</span>\n            </div>\n          </PopoverTrigger>\n          <PopoverContent side=\"left\" align=\"center\" className=\"w-auto p-3\">\n            <div className=\"space-y-2\">\n              {appliedTemplate && (\n                <div className=\"mb-2\">\n                  <p className=\"text-xs font-medium text-muted-foreground mb-1\">Template:</p>\n                  <div \n                    className=\"relative inline-block\"\n                    onMouseEnter={() => setIsHoveringTemplate(true)}\n                    onMouseLeave={() => setIsHoveringTemplate(false)}\n                  >\n                    <Badge \n                      variant=\"outline\" \n                      className={cn(\n                        \"text-xs px-2 py-0.5 transition-all\",\n                        isHoveringTemplate && \"pr-7\"\n                      )}\n                    >\n                      {appliedTemplate.templateName}\n                    </Badge>\n                    {isHoveringTemplate && (\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          console.log('[ColumnSelector] Removing template:', appliedTemplate.templateName, 'from column:', columnId);\n                          removeAppliedTemplate(columnId);\n                          setIsHoveringTemplate(false);\n                        }}\n                        className=\"absolute right-1 top-1/2 -translate-y-1/2 h-4 w-4 flex items-center justify-center rounded-sm hover:bg-black/10 dark:hover:bg-white/10 transition-colors\"\n                        aria-label=\"Remove template\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n              {customizations.length > 0 && (\n                <>\n                  <p className=\"text-xs font-medium mb-2\">Customizations:</p>\n                  <CustomizationBadges\n                    customizations={customizations}\n                    onRemove={handleRemoveCustomization}\n                    className=\"flex-wrap\"\n                    maxVisible={10} // Show all in popover\n                  />\n                </>\n              )}\n            </div>\n          </PopoverContent>\n        </Popover>\n      )}\n    </div>\n  );\n}, (prevProps, nextProps) => {\n  // Custom comparison to prevent unnecessary re-renders\n  return (\n    prevProps.selected === nextProps.selected &&\n    prevProps.isTemplate === nextProps.isTemplate &&\n    prevProps.isHidden === nextProps.isHidden &&\n    prevProps.columnId === nextProps.columnId &&\n    prevProps.column === nextProps.column && // Compare entire column object for customization changes\n    prevProps.appliedTemplate?.templateId === nextProps.appliedTemplate?.templateId // Check template changes\n  );\n});\n\nColumnItem.displayName = 'ColumnItem';","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/panels/PropertyEditorPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/store/column-customization.store.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3495,3498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3495,3498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3772,3775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3772,3775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4391,4394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4391,4394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4456,4459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4456,4459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":377,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14673,14676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14673,14676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14811,14814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14811,14814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":593,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":593,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23523,23526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23523,23526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { ColDef as AgColDef, ColumnState } from 'ag-grid-community';\nimport { createCellStyleFunction, hasConditionalStyling } from '@/components/datatable/utils/style-utils';\n\n// Use AG-Grid's ColDef directly\nexport type ColDef = AgColDef;\n\nexport interface DialogState {\n  // Dialog state\n  open: boolean;\n\n  // Column management\n  selectedColumns: Set<string>;\n  columnDefinitions: Map<string, ColDef>;\n  columnState: Map<string, ColumnState>; // AG-Grid column state by colId\n  pendingChanges: Map<string, Partial<ColDef>>;\n\n  // UI state\n  activeTab: string;\n  showOnlyCommon: boolean;\n  compareMode: boolean;\n  searchTerm: string;\n  cellDataTypeFilter: string;\n  visibilityFilter: 'all' | 'visible' | 'hidden';\n  uiMode: 'simple' | 'advanced';\n  showPreviewPane: boolean;\n  collapsedSections: Set<string>;\n  quickFormatPinned: string[];\n\n  // Panel states\n  bulkActionsPanelCollapsed: boolean;\n  showColumnDrawer: boolean;\n\n  // Template columns for quick copy\n  templateColumns: Set<string>;\n  \n  // Applied templates tracking\n  appliedTemplates: Map<string, { templateId: string; templateName: string; appliedAt: number }>;\n}\n\nexport interface DialogActions {\n  // Dialog actions\n  setOpen: (open: boolean) => void;\n\n  // Column management\n  setSelectedColumns: (columns: Set<string>) => void;\n  toggleColumnSelection: (columnId: string) => void;\n  selectColumns: (columnIds: string[]) => void;\n  deselectColumns: (columnIds: string[]) => void;\n  setColumnDefinitions: (columns: Map<string, ColDef>) => void;\n  setColumnState: (columnState: ColumnState[]) => void;\n  updateBulkProperty: (property: string, value: unknown) => void;\n  updateBulkProperties: (properties: Record<string, unknown>) => void;\n  applyChanges: () => ColDef[];\n  resetChanges: () => void;\n\n  // UI actions\n  setActiveTab: (tab: string) => void;\n  setShowOnlyCommon: (show: boolean) => void;\n  setCompareMode: (compare: boolean) => void;\n  setSearchTerm: (term: string) => void;\n  setCellDataTypeFilter: (filter: string) => void;\n  setVisibilityFilter: (filter: 'all' | 'visible' | 'hidden') => void;\n  setUiMode: (mode: 'simple' | 'advanced') => void;\n  setShowPreviewPane: (show: boolean) => void;\n  toggleSectionCollapse: (section: string) => void;\n  setQuickFormatPinned: (formats: string[]) => void;\n  toggleQuickFormat: (format: string) => void;\n\n  // Panel actions\n  setBulkActionsPanelCollapsed: (collapsed: boolean) => void;\n  setShowColumnDrawer: (show: boolean) => void;\n\n  // Template column actions\n  toggleTemplateColumn: (columnId: string) => void;\n  clearTemplateColumns: () => void;\n  \n  // Customization removal\n  removeColumnCustomization: (columnId: string, type: string) => void;\n  clearAllCustomizations: () => void;\n  \n  // Template tracking\n  setAppliedTemplate: (columnId: string, templateId: string, templateName: string) => void;\n  removeAppliedTemplate: (columnId: string) => void;\n}\n\nexport type ColumnCustomizationStore = DialogState & DialogActions;\n\n\n/**\n * Ensure a column has a cellStyle function if its valueFormatter has conditional styling\n * Returns true if the column was modified\n */\nfunction ensureCellStyleForValueFormatter(column: ColDef): boolean {\n  // Check if valueFormatter has conditional styling\n  if (column.valueFormatter && typeof column.valueFormatter === 'function') {\n    const formatString = (column.valueFormatter as any).__formatString;\n    \n    if (formatString && hasConditionalStyling(formatString)) {\n      // Check if cellStyle already exists and is properly configured\n      if (!column.cellStyle || \n          (typeof column.cellStyle === 'function' && \n           (column.cellStyle as any).__formatString !== formatString)) {\n        \n        console.log('[Store] Creating cellStyle for conditional formatting:', {\n          field: column.field,\n          formatString,\n          hasExistingCellStyle: !!column.cellStyle,\n          existingCellStyleType: typeof column.cellStyle\n        });\n        \n        // Extract base style if it exists\n        let baseStyle: React.CSSProperties = {};\n        if (column.cellStyle) {\n          if (typeof column.cellStyle === 'object') {\n            baseStyle = column.cellStyle;\n          } else if (typeof column.cellStyle === 'function' && (column.cellStyle as any).__baseStyle) {\n            baseStyle = (column.cellStyle as any).__baseStyle;\n          }\n        }\n        \n        // Create cellStyle function\n        const styleFunc = createCellStyleFunction(formatString, baseStyle);\n        \n        // Attach metadata for future serialization\n        Object.defineProperty(styleFunc, '__formatString', { \n          value: formatString, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        Object.defineProperty(styleFunc, '__baseStyle', { \n          value: baseStyle, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        \n        column.cellStyle = styleFunc;\n        return true; // Column was modified\n      }\n    }\n  }\n  return false; // Column was not modified\n}\n\n// Performance optimization: memoized selectors\nexport const useSelectedColumns = () => useColumnCustomizationStore(state => state.selectedColumns);\nexport const useColumnDefinitions = () => useColumnCustomizationStore(state => state.columnDefinitions);\nexport const usePendingChanges = () => useColumnCustomizationStore(state => state.pendingChanges);\n\nexport const useColumnCustomizationStore = create<ColumnCustomizationStore>()(\n  subscribeWithSelector(\n    persist(\n      (set, get) => ({\n      // Initial state\n      open: false,\n      selectedColumns: new Set<string>(),\n      columnDefinitions: new Map<string, ColDef>(),\n      columnState: new Map<string, ColumnState>(),\n      pendingChanges: new Map<string, Partial<ColDef>>(),\n      activeTab: 'general',\n      showOnlyCommon: false,\n      compareMode: false,\n      searchTerm: '',\n      cellDataTypeFilter: 'all',\n      visibilityFilter: 'all',\n      bulkActionsPanelCollapsed: false,\n      templateColumns: new Set<string>(),\n      appliedTemplates: new Map<string, { templateId: string; templateName: string; appliedAt: number }>(),\n      uiMode: 'simple',\n      showPreviewPane: false,\n      collapsedSections: new Set<string>(),\n      quickFormatPinned: ['number', 'currency', 'percentage', 'date', 'text'],\n      showColumnDrawer: false,\n\n      // Actions\n      setOpen: (open) => set({ open }),\n\n      setSelectedColumns: (columns) => set({ selectedColumns: columns }),\n      \n      toggleColumnSelection: (columnId: string) => {\n        const { selectedColumns } = get();\n        const newSelected = new Set(selectedColumns);\n        if (newSelected.has(columnId)) {\n          newSelected.delete(columnId);\n        } else {\n          newSelected.add(columnId);\n        }\n        set({ selectedColumns: newSelected });\n      },\n      \n      selectColumns: (columnIds: string[]) => {\n        const { selectedColumns } = get();\n        const newSelected = new Set(selectedColumns);\n        columnIds.forEach(id => newSelected.add(id));\n        set({ selectedColumns: newSelected });\n      },\n      \n      deselectColumns: (columnIds: string[]) => {\n        const { selectedColumns } = get();\n        const newSelected = new Set(selectedColumns);\n        columnIds.forEach(id => newSelected.delete(id));\n        set({ selectedColumns: newSelected });\n      },\n\n      setColumnDefinitions: (columns) => set({ columnDefinitions: columns }),\n\n      setColumnState: (columnStateArray) => {\n        const stateMap = new Map();\n        if (columnStateArray) {\n          // console.log('[Store] Setting column state, array length:', columnStateArray.length);\n          let _visibleCount = 0;\n          let _hiddenCount = 0;\n          \n          columnStateArray.forEach(colState => {\n            stateMap.set(colState.colId, colState);\n            if (colState.hide) {\n              _hiddenCount++;\n            } else {\n              _visibleCount++;\n            }\n          });\n          \n          // console.log('[Store] Column state summary:', {\n          //   total: columnStateArray.length,\n          //   visible: visibleCount,\n          //   hidden: hiddenCount,\n          //   stateMapSize: stateMap.size\n          // });\n        }\n        set({ columnState: stateMap });\n      },\n\n      updateBulkProperty: (property, value) => {\n        const { selectedColumns, pendingChanges } = get();\n        if (selectedColumns.size === 0) return;\n        \n        // Prevent editing field property\n        if (property === 'field') {\n          console.warn('[Store] Field property cannot be edited');\n          return;\n        }\n        \n        // Prevent bulk editing of headerName\n        if (property === 'headerName' && selectedColumns.size > 1) {\n          console.warn('[Store] Header Name cannot be edited for multiple columns');\n          return;\n        }\n        \n        // Reuse existing Map for better performance\n        const newPendingChanges = new Map(pendingChanges);\n\n        // Process all updates in a single pass\n        if (value === undefined) {\n          // Delete property from selected columns\n          for (const colId of selectedColumns) {\n            const existing = newPendingChanges.get(colId);\n            if (existing && property in existing) {\n              const updated = { ...existing };\n              delete updated[property as keyof ColDef];\n              if (Object.keys(updated).length === 0) {\n                newPendingChanges.delete(colId);\n              } else {\n                newPendingChanges.set(colId, updated);\n              }\n            }\n          }\n        } else {\n          // Add/update property for selected columns\n          for (const colId of selectedColumns) {\n            const existing = newPendingChanges.get(colId);\n            newPendingChanges.set(colId, existing ? { ...existing, [property]: value } : { [property]: value });\n          }\n        }\n\n        set({ pendingChanges: newPendingChanges });\n      },\n\n      updateBulkProperties: (properties) => {\n        const { selectedColumns, pendingChanges } = get();\n        \n        // Filter out field and headerName for safety\n        const filteredProperties = { ...properties };\n        \n        // Always remove field from bulk updates\n        delete filteredProperties.field;\n        \n        // Remove headerName if multiple columns are selected\n        if (selectedColumns.size > 1) {\n          delete filteredProperties.headerName;\n        }\n        \n        const newPendingChanges = new Map(pendingChanges);\n\n        selectedColumns.forEach(colId => {\n          const existing = newPendingChanges.get(colId) || {};\n          const updated = { ...existing };\n\n          Object.entries(filteredProperties).forEach(([property, value]) => {\n            if (value === undefined) {\n              delete updated[property as keyof ColDef];\n            } else {\n              // For headerStyle, just save the style object directly\n              // We'll convert it to a function when loading from storage\n              (updated as Record<string, unknown>)[property] = value;\n            }\n          });\n\n          if (Object.keys(updated).length === 0) {\n            newPendingChanges.delete(colId);\n          } else {\n            newPendingChanges.set(colId, updated);\n          }\n        });\n\n        set({ pendingChanges: newPendingChanges });\n\n        // Never apply immediately - changes are only saved when Apply buttons are clicked\n      },\n\n      applyChanges: () => {\n        const startTime = performance.now();\n        const { columnDefinitions, pendingChanges } = get();\n        \n        // Early return if no changes\n        if (pendingChanges.size === 0) {\n          console.log('[ColumnCustomizationStore] No pending changes, returning original columns');\n          return Array.from(columnDefinitions.values());\n        }\n\n        console.log('[ColumnCustomizationStore] applyChanges called:', {\n          columnDefinitionsCount: columnDefinitions.size,\n          pendingChangesCount: pendingChanges.size\n        });\n\n        // List of properties that should be explicitly cleared (set to undefined)\n        const clearableProperties = [\n          'cellStyle', 'headerStyle', 'cellClass', 'headerClass', 'cellClassRules',\n          'valueFormatter', 'valueGetter', 'valueSetter', 'useValueFormatterForExport',\n          'filter', 'filterParams', 'floatingFilter', 'floatingFilterComponent', \n          'floatingFilterComponentParams', 'suppressHeaderMenuButton', \n          'suppressFiltersToolPanel', 'filterValueGetter',\n          'editable', 'cellEditor', 'cellEditorParams', 'cellEditorPopup',\n          'cellEditorPopupPosition', 'singleClickEdit', 'stopEditingWhenCellsLoseFocus',\n          'cellEditorSelector', 'cellRenderer', 'cellRendererParams', 'cellRendererSelector',\n          'wrapText', 'autoHeight', 'rowSpan', 'colSpan', 'textAlign', 'verticalAlign',\n          'headerTooltip', 'headerComponent', 'headerComponentParams', 'headerTextAlign',\n          'headerCheckboxSelection', 'headerCheckboxSelectionFilteredOnly',\n          'wrapHeaderText', 'autoHeaderHeight', 'sortable', 'sort', 'sortingOrder',\n          'comparator', 'unSortIcon', 'aggFunc', 'allowedAggFuncs',\n          'pinned', 'lockPosition', 'lockPinned', 'lockVisible',\n          'width', 'minWidth', 'maxWidth', 'flex', 'resizable', 'suppressSizeToFit',\n          'initialWidth', 'initialHide', 'initialPinned',\n          'tooltip', 'tooltipField', 'tooltipValueGetter', 'tooltipComponent',\n          'tooltipComponentParams', 'suppressKeyboardEvent', 'suppressNavigable',\n          'suppressPaste', 'checkboxSelection', 'showDisabledCheckboxes'\n        ];\n\n        // Pre-allocate array with exact size for better performance\n        const updatedColumns = new Array(columnDefinitions.size);\n        let index = 0;\n        \n        // Process columns in a single pass with minimal object creation\n        for (const [colId, colDef] of columnDefinitions) {\n          const changes = pendingChanges.get(colId);\n          if (changes && Object.keys(changes).length > 0) {\n            // Start with the original column to preserve all properties\n            const mergedColumn = { ...colDef };\n            \n            // Apply changes\n            Object.entries(changes).forEach(([key, value]) => {\n              if (value === undefined && clearableProperties.includes(key)) {\n                // Explicitly set clearable properties to undefined\n                (mergedColumn as any)[key] = undefined;\n              } else if (value !== undefined) {\n                // Set new values\n                (mergedColumn as any)[key] = value;\n              }\n            });\n            \n            // Check if we need to create cellStyle for conditional formatting\n            ensureCellStyleForValueFormatter(mergedColumn);\n            \n            updatedColumns[index] = mergedColumn;\n          } else {\n            // Even for unchanged columns, ensure cellStyle exists if needed\n            const columnCopy = { ...colDef };\n            if (ensureCellStyleForValueFormatter(columnCopy)) {\n              updatedColumns[index] = columnCopy;\n            } else {\n              // Reuse existing object reference for unchanged columns\n              updatedColumns[index] = colDef;\n            }\n          }\n          index++;\n        }\n\n        // Clear pending changes immediately\n        set({ pendingChanges: new Map() });\n\n        const endTime = performance.now();\n        console.log('[ColumnCustomizationStore] applyChanges completed:', {\n          totalColumns: updatedColumns.length,\n          columnsWithChanges: pendingChanges.size,\n          executionTime: `${(endTime - startTime).toFixed(2)}ms`\n        });\n\n        return updatedColumns;\n      },\n\n      resetChanges: () => set({ pendingChanges: new Map() }),\n\n      setActiveTab: (tab) => set({ activeTab: tab }),\n      setShowOnlyCommon: (show) => set({ showOnlyCommon: show }),\n      setCompareMode: (compare) => set({ compareMode: compare }),\n      setSearchTerm: (term) => set({ searchTerm: term }),\n      setCellDataTypeFilter: (filter) => set({ cellDataTypeFilter: filter }),\n      setVisibilityFilter: (filter) => set({ visibilityFilter: filter }),\n      setBulkActionsPanelCollapsed: (collapsed) => set({ bulkActionsPanelCollapsed: collapsed }),\n      setUiMode: (mode) => set({ uiMode: mode }),\n      setShowPreviewPane: (show) => set({ showPreviewPane: show }),\n      toggleSectionCollapse: (section) => {\n        const { collapsedSections } = get();\n        const newCollapsed = new Set(collapsedSections);\n        if (newCollapsed.has(section)) {\n          newCollapsed.delete(section);\n        } else {\n          newCollapsed.add(section);\n        }\n        set({ collapsedSections: newCollapsed });\n      },\n      setQuickFormatPinned: (formats) => set({ quickFormatPinned: formats }),\n      toggleQuickFormat: (format) => {\n        const { quickFormatPinned } = get();\n        const newPinned = quickFormatPinned.includes(format)\n          ? quickFormatPinned.filter(f => f !== format)\n          : [...quickFormatPinned, format];\n        set({ quickFormatPinned: newPinned });\n      },\n      setShowColumnDrawer: (show) => set({ showColumnDrawer: show }),\n\n      // Template column actions\n      toggleTemplateColumn: (columnId) => {\n        const { templateColumns } = get();\n        const newTemplates = new Set(templateColumns);\n        if (newTemplates.has(columnId)) {\n          newTemplates.delete(columnId);\n        } else {\n          newTemplates.add(columnId);\n        }\n        set({ templateColumns: newTemplates });\n      },\n\n      clearTemplateColumns: () => set({ templateColumns: new Set() }),\n      \n      removeColumnCustomization: (columnId, type) => {\n        const { columnDefinitions, pendingChanges } = get();\n        const column = columnDefinitions.get(columnId);\n        if (!column) return;\n        \n        const newPendingChanges = new Map(pendingChanges);\n        const existing = newPendingChanges.get(columnId) || {};\n        const updated = { ...existing };\n        \n        // Also update the column definitions immediately for UI feedback\n        const newColumnDefinitions = new Map(columnDefinitions);\n        const updatedColumn = { ...column };\n        \n        // Remove customizations based on type by setting them to undefined\n        // This will override any existing values in the original column definition\n        switch (type) {\n          case 'style':\n            updated.cellStyle = undefined;\n            updated.headerStyle = undefined;\n            updated.cellClass = undefined;\n            updated.headerClass = undefined;\n            // Also remove from column definition for immediate UI update\n            delete updatedColumn.cellStyle;\n            delete updatedColumn.headerStyle;\n            delete updatedColumn.cellClass;\n            delete updatedColumn.headerClass;\n            break;\n          case 'formatter':\n            updated.valueFormatter = undefined;\n            delete updatedColumn.valueFormatter;\n            break;\n          case 'filter':\n            updated.filter = undefined;\n            updated.filterParams = undefined;\n            delete updatedColumn.filter;\n            delete updatedColumn.filterParams;\n            break;\n          case 'editor':\n            updated.cellEditor = undefined;\n            updated.cellEditorParams = undefined;\n            delete updatedColumn.cellEditor;\n            delete updatedColumn.cellEditorParams;\n            break;\n          case 'general':\n            updated.width = undefined;\n            updated.minWidth = undefined;\n            updated.maxWidth = undefined;\n            updated.pinned = undefined;\n            updated.lockPosition = undefined;\n            updated.lockVisible = undefined;\n            delete updatedColumn.width;\n            delete updatedColumn.minWidth;\n            delete updatedColumn.maxWidth;\n            delete updatedColumn.pinned;\n            delete updatedColumn.lockPosition;\n            delete updatedColumn.lockVisible;\n            break;\n        }\n        \n        // Update both column definitions and pending changes\n        newColumnDefinitions.set(columnId, updatedColumn);\n        newPendingChanges.set(columnId, updated);\n        \n        set({ \n          columnDefinitions: newColumnDefinitions,\n          pendingChanges: newPendingChanges \n        });\n        \n        console.log('[Store] Removed customization:', { columnId, type, updatedChanges: updated });\n      },\n      \n      clearAllCustomizations: () => {\n        const { columnDefinitions } = get();\n        \n        console.log('[Store] Clearing all customizations from all columns');\n        \n        // Create new pending changes for all columns\n        const newPendingChanges = new Map<string, Partial<ColDef>>();\n        \n        let clearedCount = 0;\n        \n        // Comprehensive list of all customization properties to clear\n        const customizationProperties = [\n          // Data type and basic properties\n          'cellDataType', 'type', 'valueGetter', 'valueSetter',\n          \n          // Filter configurations\n          'filter', 'filterParams', 'floatingFilter', 'floatingFilterComponent', 'floatingFilterComponentParams',\n          'suppressHeaderMenuButton', 'suppressFiltersToolPanel', 'filterValueGetter',\n          \n          // Editor configurations\n          'editable', 'cellEditor', 'cellEditorParams', 'cellEditorPopup', 'cellEditorPopupPosition',\n          'singleClickEdit', 'stopEditingWhenCellsLoseFocus', 'cellEditorSelector',\n          \n          // Format configurations\n          'valueFormatter', 'useValueFormatterForExport',\n          'cellClass', 'cellClassRules', 'cellStyle',\n          \n          // Header configurations\n          'headerClass', 'headerStyle', 'headerTooltip', 'headerComponent', 'headerComponentParams',\n          'headerTextAlign', 'headerCheckboxSelection', 'headerCheckboxSelectionFilteredOnly',\n          'wrapHeaderText', 'autoHeaderHeight',\n          \n          // Cell renderer\n          'cellRenderer', 'cellRendererParams', 'cellRendererSelector',\n          \n          // Layout and display\n          'wrapText', 'autoHeight', 'rowSpan', 'colSpan',\n          'textAlign', 'verticalAlign',\n          \n          // Sorting and aggregation\n          'sortable', 'sort', 'sortingOrder', 'comparator',\n          'unSortIcon', 'aggFunc', 'allowedAggFuncs',\n          \n          // Pinning and sizing\n          'pinned', 'lockPosition', 'lockPinned', 'lockVisible',\n          'width', 'minWidth', 'maxWidth', 'flex',\n          'resizable', 'suppressSizeToFit',\n          'initialWidth', 'initialHide', 'initialPinned',\n          \n          // Tooltips\n          'tooltip', 'tooltipField', 'tooltipValueGetter', 'tooltipComponent', 'tooltipComponentParams',\n          \n          // Other properties\n          'suppressKeyboardEvent', 'suppressNavigable', 'suppressPaste',\n          'checkboxSelection', 'showDisabledCheckboxes'\n        ];\n        \n        // Process all columns\n        for (const [columnId, _column] of columnDefinitions) {\n          const pendingChanges: Partial<ColDef> = {};\n          \n          // Set all customization properties to undefined\n          customizationProperties.forEach(prop => {\n            (pendingChanges as any)[prop] = undefined;\n          });\n          \n          // Add to pending changes (will be applied when user clicks Apply)\n          newPendingChanges.set(columnId, pendingChanges);\n          clearedCount++;\n        }\n        \n        // Clear applied templates as well\n        const templateCount = get().appliedTemplates.size;\n        const newAppliedTemplates = new Map<string, { templateId: string; templateName: string; appliedAt: number }>();\n        \n        // Update store with pending changes (not applied yet)\n        set({ \n          pendingChanges: newPendingChanges,\n          appliedTemplates: newAppliedTemplates\n        });\n        \n        const totalCleared = clearedCount + (templateCount > 0 ? templateCount : 0);\n        console.log('[Store] Set pending clear for', clearedCount, 'columns and', templateCount, 'templates');\n        \n        return totalCleared;\n      },\n      \n      setAppliedTemplate: (columnId, templateId, templateName) => {\n        const { appliedTemplates } = get();\n        const newAppliedTemplates = new Map(appliedTemplates);\n        newAppliedTemplates.set(columnId, {\n          templateId,\n          templateName,\n          appliedAt: Date.now()\n        });\n        set({ appliedTemplates: newAppliedTemplates });\n      },\n      \n      removeAppliedTemplate: (columnId) => {\n        const { appliedTemplates } = get();\n        const newAppliedTemplates = new Map(appliedTemplates);\n        newAppliedTemplates.delete(columnId);\n        set({ appliedTemplates: newAppliedTemplates });\n        console.log('[Store] Removed template from column:', columnId, 'Remaining templates:', newAppliedTemplates.size);\n      },\n      }),\n      {\n        name: 'column-customization-store',\n        partialize: (state) => ({\n          // Only persist UI preferences, not data\n          activeTab: state.activeTab,\n          showOnlyCommon: state.showOnlyCommon,\n          compareMode: state.compareMode,\n          cellDataTypeFilter: state.cellDataTypeFilter,\n          visibilityFilter: state.visibilityFilter,\n          bulkActionsPanelCollapsed: state.bulkActionsPanelCollapsed,\n          templateColumns: Array.from(state.templateColumns), // Convert Set to Array for serialization\n          appliedTemplates: Array.from(state.appliedTemplates.entries()), // Convert Map to Array\n          uiMode: state.uiMode,\n          showPreviewPane: state.showPreviewPane,\n          collapsedSections: Array.from(state.collapsedSections), // Convert Set to Array\n          quickFormatPinned: state.quickFormatPinned,\n          showColumnDrawer: state.showColumnDrawer,\n        }),\n        onRehydrateStorage: () => (state) => {\n          // Convert Sets back from Arrays after rehydration\n          if (state) {\n            if (Array.isArray(state.templateColumns)) {\n              state.templateColumns = new Set(state.templateColumns);\n            }\n            if (Array.isArray(state.collapsedSections)) {\n              state.collapsedSections = new Set(state.collapsedSections);\n            }\n            if (Array.isArray(state.appliedTemplates)) {\n              state.appliedTemplates = new Map(state.appliedTemplates);\n            }\n          }\n        },\n      }\n    )\n  )\n);","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/tabs/AdvancedTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/tabs/EditorsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/tabs/FiltersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/tabs/FormatTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":357,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12066,12069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12066,12069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":389,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13292,13295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13292,13295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":390,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":390,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13366,13369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13366,13369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":410,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":410,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14011,14014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14011,14014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":429,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":429,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14646,14649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14646,14649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":430,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14709,14712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14709,14712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":431,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":431,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14772,14775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14772,14775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":432,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":432,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14835,14838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14835,14838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":438,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":438,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15142,15145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15142,15145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":492,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":492,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17461,17464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17461,17464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":518,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18781,18784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18781,18784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":519,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18847,18850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18847,18850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":583,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":583,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21576,21579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21576,21579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":584,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":584,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21638,21641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21638,21641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":589,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":589,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21769,21772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21769,21772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":747,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":747,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26366,26369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26366,26369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":754,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":754,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26603,26606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26603,26606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":775,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":775,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27819,27822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27819,27822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":776,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":776,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27885,27888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27885,27888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":836,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":836,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30567,30570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30567,30570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":837,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":837,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30631,30634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30631,30634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectSeparator } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { useColumnCustomizationStore } from '../store/column-customization.store';\nimport { ValueFormatterEditor } from '../editors/ValueFormatterEditor';\nimport { createExcelFormatter, getExcelStyleClass } from '@/components/datatable/utils/formatters';\nimport { \n  Hash, \n  DollarSign, \n  Percent, \n  Calendar, \n  Type, \n  Lightbulb, \n  ArrowUp, \n  Palette, \n  Info, \n  HelpCircle,\n  Sparkles,\n  Eye,\n  X\n} from 'lucide-react';\n\ninterface FormatTabProps {\n  uiMode?: 'simple' | 'advanced';\n}\n\n// Rich predefined formatters with categories\nconst RICH_FORMATTERS = {\n  'Basic Numbers': [\n    { \n      name: 'Number with Thousands', \n      format: '#,##0.00', \n      description: 'Format: 1,234.56',\n      example: '1,234.56'\n    },\n    { \n      name: 'Integer with Thousands', \n      format: '#,##0', \n      description: 'Format: 1,235',\n      example: '1,235'\n    },\n    { \n      name: 'Number (4 decimals)', \n      format: '#,##0.0000', \n      description: 'Format: 1,234.5600',\n      example: '1,234.5600'\n    },\n    { \n      name: 'Number in Thousands', \n      format: '#,##0,', \n      description: 'Format: 1,235 (displays 1234567 as 1,235)',\n      example: '1,235K'\n    },\n    { \n      name: 'Number in Millions', \n      format: '#,##0,,', \n      description: 'Format: 1 (displays 1234567 as 1)',\n      example: '1M'\n    }\n  ],\n  'Currency Formats': [\n    { \n      name: 'US Dollar', \n      format: '$#,##0.00', \n      description: 'Format: $1,234.56',\n      example: '$1,234.56'\n    },\n    { \n      name: 'Accounting (Parentheses)', \n      format: '$#,##0.00;($#,##0.00)', \n      description: 'Negative in parentheses: ($1,234.56)',\n      example: '$1,234.56 / ($1,234.56)'\n    },\n    { \n      name: 'Euro', \n      format: '€#,##0.00', \n      description: 'Format: €1,234.56',\n      example: '€1,234.56'\n    },\n    { \n      name: 'British Pound', \n      format: '£#,##0.00', \n      description: 'Format: £1,234.56',\n      example: '£1,234.56'\n    }\n  ],\n  'Percentage Formats': [\n    { \n      name: 'Percentage (2 decimals)', \n      format: '0.00%', \n      description: 'Format: 12.34%',\n      example: '12.34%'\n    },\n    { \n      name: 'Percentage (no decimals)', \n      format: '0%', \n      description: 'Format: 12%',\n      example: '12%'\n    },\n    { \n      name: 'Percentage (1 decimal)', \n      format: '0.0%', \n      description: 'Format: 12.3%',\n      example: '12.3%'\n    }\n  ],\n  'Positive/Negative Colors': [\n    { \n      name: 'Green Positive, Red Negative', \n      format: '[>0][Green]#,##0.00;[Red]#,##0.00', \n      description: 'Green for positive, red for negative (no minus sign)',\n      example: '1,234.56 / 1,234.56'\n    },\n    { \n      name: 'Green/Red with Currency', \n      format: '[>0][Green]$#,##0.00;[Red]$#,##0.00', \n      description: 'Currency with green/red colors',\n      example: '$1,234.56 / $1,234.56'\n    },\n    { \n      name: 'Blue Positive, Red Negative', \n      format: '[>0][Blue]#,##0.00;[Red]#,##0.00', \n      description: 'Blue for positive, red for negative',\n      example: '1,234.56 / 1,234.56'\n    },\n    { \n      name: 'Green/Red Percentage', \n      format: '[>0][Green]0.00%;[Red]0.00%', \n      description: 'Percentage with green/red colors',\n      example: '12.34% / 12.34%'\n    }\n  ],\n  'Conditional with Emojis': [\n    { \n      name: 'Traffic Light (90/70)', \n      format: '[>=90]\"🟢 \"#0;[>=70]\"🟡 \"#0;\"🔴 \"#0', \n      description: 'Green ≥90, Yellow ≥70, Red <70',\n      example: '🟢 95 / 🟡 75 / 🔴 60'\n    },\n    { \n      name: 'Performance Icons', \n      format: '[>=90]\"⭐ \"#0;[>=70]\"👍 \"#0;\"👎 \"#0', \n      description: 'Star ≥90, Thumbs up ≥70, Thumbs down <70',\n      example: '⭐ 95 / 👍 75 / 👎 60'\n    },\n    { \n      name: 'Arrow Trends', \n      format: '[>0]\"↗️ \"#,##0.00;[<0]\"↘️ \"#,##0.00;\"➡️ \"#,##0.00', \n      description: 'Up arrow for positive, down for negative, right for zero',\n      example: '↗️ 1,234.56 / ↘️ 1,234.56 / ➡️ 0.00'\n    },\n    { \n      name: 'Status Indicators', \n      format: '[>100]\"✅ \"#0\"%\";[>50]\"⚠️ \"#0\"%\";\"❌ \"#0\"%\"', \n      description: 'Check >100%, Warning >50%, X ≤50%',\n      example: '✅ 120% / ⚠️ 75% / ❌ 30%'\n    },\n    { \n      name: 'Temperature', \n      format: '[>=25]\"🔥 \"#0\"°C\";[>=15]\"☀️ \"#0\"°C\";[>=5]\"🌤️ \"#0\"°C\";\"❄️ \"#0\"°C\"', \n      description: 'Fire ≥25°C, Sun ≥15°C, Cloud ≥5°C, Snow <5°C',\n      example: '🔥 30°C / ☀️ 20°C / 🌤️ 10°C / ❄️ 0°C'\n    }\n  ],\n  'Special Symbols': [\n    { \n      name: 'Plus/Minus Signs', \n      format: '[>0]\"+ \"#,##0.00;[<0]\"- \"#,##0.00;\"± \"#,##0.00', \n      description: 'Explicit + for positive, - for negative, ± for zero',\n      example: '+ 1,234.56 / - 1,234.56 / ± 0.00'\n    },\n    { \n      name: 'Delta (Δ) Changes', \n      format: '[>0]\"Δ +\"#,##0.00;[<0]\"Δ \"#,##0.00;\"Δ \"#,##0.00', \n      description: 'Delta symbol with change indicators',\n      example: 'Δ +1,234.56 / Δ -1,234.56 / Δ 0.00'\n    },\n    { \n      name: 'Bullet Points', \n      format: '\"● \"#,##0.00', \n      description: 'Bullet point prefix',\n      example: '● 1,234.56'\n    },\n    { \n      name: 'Checkmark/Cross', \n      format: '[>0]\"✓ \"#,##0.00;\"✗ \"#,##0.00', \n      description: 'Checkmark for positive, cross for negative/zero',\n      example: '✓ 1,234.56 / ✗ 1,234.56'\n    }\n  ],\n  'Scientific & Technical': [\n    { \n      name: 'Scientific Notation', \n      format: '0.00E+00', \n      description: 'Format: 1.23E+03',\n      example: '1.23E+03'\n    },\n    { \n      name: 'Engineering Format', \n      format: '##0.0E+0', \n      description: 'Format: 123.4E+1',\n      example: '123.4E+1'\n    },\n    { \n      name: 'Bytes (KB/MB/GB)', \n      format: '[>=1000000000]#,##0,,,,\"TB\";[>=1000000]#,##0,,,\"GB\";[>=1000]#,##0,,\"MB\";#,##0,\"KB\"', \n      description: 'Automatic byte unit scaling',\n      example: '1,234 KB / 1 GB / 2 TB'\n    }\n  ],\n  'Date & Time': [\n    { \n      name: 'Short Date', \n      format: 'MM/DD/YYYY', \n      description: 'Format: 01/15/2023',\n      example: '01/15/2023'\n    },\n    { \n      name: 'Long Date', \n      format: 'MMMM D, YYYY', \n      description: 'Format: January 15, 2023',\n      example: 'January 15, 2023'\n    },\n    { \n      name: 'Date with Day', \n      format: 'dddd, MMMM D, YYYY', \n      description: 'Format: Sunday, January 15, 2023',\n      example: 'Sunday, January 15, 2023'\n    },\n    { \n      name: 'Time (12-hour)', \n      format: 'h:mm AM/PM', \n      description: 'Format: 2:30 PM',\n      example: '2:30 PM'\n    },\n    { \n      name: 'Time (24-hour)', \n      format: 'HH:mm', \n      description: 'Format: 14:30',\n      example: '14:30'\n    }\n  ],\n  'Text & Custom': [\n    { \n      name: 'ID Prefix', \n      format: '\"ID: \"#', \n      description: 'Add \"ID: \" prefix',\n      example: 'ID: 12345'\n    },\n    { \n      name: 'Reference Number', \n      format: '\"REF-\"0000', \n      description: 'Format: REF-0123',\n      example: 'REF-0123'\n    },\n    { \n      name: 'Version Number', \n      format: '\"v\"0.00', \n      description: 'Format: v1.23',\n      example: 'v1.23'\n    },\n    { \n      name: 'Quoted Text', \n      format: '\"\"\"@\"\"\"', \n      description: 'Wrap text in quotes',\n      example: '\"Sample Text\"'\n    }\n  ],\n  'Extended Styling': [\n    { \n      name: 'Green Background with Border', \n      format: '[>0][Green][BG:lightgreen][Bold][Border:2px-solid-green]#,##0.00;[Red][BG:lightred]#,##0.00', \n      description: 'Green text, light green background, bold, with green border for positive numbers',\n      example: 'Styled positive/negative numbers'\n    },\n    { \n      name: 'High-Value Highlight', \n      format: '[>1000][#ffffff][BG:#16a34a][Bold][Size:16][Center]#,##0;[>100][#0066cc][BG:#f0f9ff][Size:14]#,##0;#,##0', \n      description: 'White text on green background for values >1000, blue text on light blue for >100',\n      example: 'Dynamic styling based on value thresholds'\n    },\n    { \n      name: 'Status with Padding', \n      format: '[=\"Excellent\"][#16a34a][BG:Yellow][Border:2px-solid-green][Center][Bold][P:8px-12px]@;[=\"Good\"][#0066cc][BG:lightblue][P:6px]@;[BG:#f0f0f0][P:4px][Italic]@', \n      description: 'Different styling for \"Excellent\", \"Good\", and other text values with padding',\n      example: 'Padded and styled status indicators'\n    },\n    { \n      name: 'Currency with Enhanced Styling', \n      format: '[>1000][#ffffff][BG:#16a34a][Bold][Size:16]$#,##0.00;[>0][Green][BG:lightgreen]$#,##0.00;[Red][BG:lightred][Italic]$#,##0.00', \n      description: 'White text on green for >$1000, green text on light green for positive, red italic on light red for negative',\n      example: 'Multi-tier currency formatting'\n    },\n    { \n      name: 'Performance Score Card', \n      format: '[>=90][#ffffff][BG:#16a34a][Bold][Size:18][Center][P:8px][Border:3px-solid-darkgreen]@\"% ⭐\";[>=70][#663300][BG:#fbbf24][Bold][Center][P:6px][Border:2px-solid-orange]@\"% 👍\";[#ffffff][BG:#dc2626][Bold][Center][P:6px][Border:2px-solid-red]@\"% 👎\"', \n      description: 'Performance score with star for ≥90%, thumbs up for ≥70%, thumbs down for <70%',\n      example: 'Complete score card with emojis, colors, borders, and padding'\n    },\n    { \n      name: 'Priority Tags', \n      format: '[=\"High\"][#ffffff][BG:#dc2626][Bold][Size:14][Center][P:4px-8px][Border:1px-solid-red]\"🔴 HIGH\";[=\"Medium\"][#663300][BG:#fbbf24][Bold][Center][P:4px-8px][Border:1px-solid-orange]\"🟡 MEDIUM\";[#0066cc][BG:#dbeafe][Center][P:4px-8px][Border:1px-solid-blue]\"🔵 LOW\"', \n      description: 'Color-coded priority tags with emojis, borders, and padding',\n      example: 'Priority level indicators with complete styling'\n    },\n    { \n      name: 'Temperature Display', \n      format: '[>=25][#ff0000][BG:#ffeeee][Bold][Size:16]@\"°C 🔥\";[>=15][#ff8800][BG:#fff8ee]@\"°C ☀️\";[>=5][#0088cc][BG:#eef8ff]@\"°C 🌤️\";[#0066ff][BG:#eeeeff][Italic]@\"°C ❄️\"', \n      description: 'Temperature with appropriate colors and weather emojis',\n      example: 'Weather-themed temperature display'\n    },\n    { \n      name: 'Progress Bar Style', \n      format: '[>=100][#ffffff][BG:#16a34a][Bold][Size:14][Center][P:6px-12px][Border:2px-solid-green]@\"% COMPLETE\";[>=50][#663300][BG:#fbbf24][Bold][Center][P:6px-12px][Border:2px-solid-orange]@\"% IN PROGRESS\";[#666666][BG:#f3f4f6][Center][P:6px-12px][Border:1px-solid-gray]@\"% PENDING\"', \n      description: 'Progress bar styling with complete status indicators',\n      example: 'Full progress bar with status text and styling'\n    }\n  ]\n};\n\nexport const FormatTab: React.FC<FormatTabProps> = ({ uiMode: _uiMode = 'simple' }) => {\n  const {\n    selectedColumns,\n    columnDefinitions,\n    pendingChanges,\n    updateBulkProperty: _updateBulkProperty,\n    updateBulkProperties,\n    quickFormatPinned,\n  } = useColumnCustomizationStore();\n\n  const [showFormatterEditor, setShowFormatterEditor] = useState(false);\n  const [selectedRichFormatter, setSelectedRichFormatter] = useState<string>('');\n\n  // Get column data type to recommend formats\n  const selectedColumnTypes = useMemo(() => {\n    const types = new Set<string>();\n    selectedColumns.forEach(colId => {\n      const colDef = columnDefinitions.get(colId);\n      if (colDef) {\n        types.add(colDef.cellDataType || colDef.type || 'text');\n      }\n    });\n    return Array.from(types);\n  }, [selectedColumns, columnDefinitions]);\n\n  // Determine if we have a single data type\n  const singleDataType = selectedColumnTypes.length === 1 ? selectedColumnTypes[0] : null;\n\n  // Get current formatter for selected columns\n  const currentFormatters = useMemo(() => {\n    const formatters = new Map<string, any>();\n    selectedColumns.forEach(colId => {\n      const colDef = columnDefinitions.get(colId);\n      const pendingChange = pendingChanges.get(colId);\n      \n      // Check pending changes first, then fall back to column definition\n      let formatter;\n      if (pendingChange && 'valueFormatter' in pendingChange) {\n        formatter = pendingChange.valueFormatter;\n      } else if (colDef) {\n        formatter = colDef.valueFormatter;\n      }\n      \n      if (formatter) {\n        formatters.set(colId, formatter);\n      }\n    });\n    return formatters;\n  }, [selectedColumns, columnDefinitions, pendingChanges]);\n\n  // Check if all selected columns have the same formatter\n  const hasConsistentFormatter = useMemo(() => {\n    if (currentFormatters.size === 0) return true;\n    if (currentFormatters.size !== selectedColumns.size) return false;\n    \n    const formatters = Array.from(currentFormatters.values());\n    const firstFormatter = formatters[0];\n    \n    // Check if all formatters are the same\n    return formatters.every(formatter => {\n      if (typeof formatter === 'function' && typeof firstFormatter === 'function') {\n        // Compare format strings if available\n        const formatString = (formatter as any).__formatString;\n        const firstFormatString = (firstFormatter as any).__formatString;\n        \n        if (formatString && firstFormatString) {\n          return formatString === firstFormatString;\n        }\n        \n        // Can't reliably compare functions otherwise\n        return false;\n      }\n      \n      return formatter === firstFormatter;\n    });\n  }, [currentFormatters, selectedColumns]);\n\n  // Get current format string if consistent\n  const currentFormatString = useMemo(() => {\n    if (!hasConsistentFormatter || currentFormatters.size === 0) return '';\n    \n    const formatter = Array.from(currentFormatters.values())[0];\n    if (typeof formatter === 'function') {\n      return (formatter as any).__formatString || '';\n    }\n    \n    return '';\n  }, [hasConsistentFormatter, currentFormatters]);\n\n  // Apply a format to selected columns\n  const applyFormat = useCallback(async (formatString: string) => {\n    if (selectedColumns.size === 0) return;\n    \n    console.log('[FormatTab] Applying format:', formatString);\n    \n    try {\n      // Create formatter function\n      const formatter = createExcelFormatter(formatString);\n      \n      // Verify metadata was attached by createExcelFormatter\n      console.log('[FormatTab] Created formatter with metadata:', {\n        formatString,\n        hasFormatString: !!(formatter as any).__formatString,\n        hasFormatterType: !!(formatter as any).__formatterType,\n        formatStringValue: (formatter as any).__formatString,\n        formatterTypeValue: (formatter as any).__formatterType\n      });\n      \n      // For Rich Formatters (pre-built format strings), mark as excel type\n      // so they can be edited as format strings but not as visual rules\n      // Note: createExcelFormatter already sets this to 'excel', but we can override if needed\n      if ((formatter as any).__formatterType !== 'excel') {\n        Object.defineProperty(formatter, '__formatterType', { \n          value: 'excel', \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        console.log('[FormatTab] Override formatter type to excel');\n      }\n      \n      // Get CSS classes for this format\n      const cssClass = getExcelStyleClass(formatString);\n      \n      // Check if this format has conditional formatting or styling that needs cellStyle function\n      const hasStyledContent = formatString.includes('[') && (\n        // Basic conditional colors\n        formatString.toLowerCase().includes('[green]') || \n        formatString.toLowerCase().includes('[red]') || \n        formatString.toLowerCase().includes('[blue]') || \n        formatString.toLowerCase().includes('[yellow]') || \n        formatString.toLowerCase().includes('[orange]') || \n        formatString.toLowerCase().includes('[purple]') || \n        formatString.toLowerCase().includes('[gray]') || \n        formatString.toLowerCase().includes('[grey]') || \n        // Conditions\n        formatString.includes('[>') || \n        formatString.includes('[<') || \n        formatString.includes('[=') || \n        formatString.includes('[#') || // Hex colors\n        formatString.includes('[@=') || // Text equality \n        formatString.includes('[<>') ||\n        // Extended styling directives\n        formatString.includes('Weight:') ||\n        formatString.includes('FontWeight:') ||\n        formatString.includes('Background:') ||\n        formatString.includes('BG:') ||\n        formatString.includes('Border:') ||\n        formatString.includes('B:') ||\n        formatString.includes('Size:') ||\n        formatString.includes('FontSize:') ||\n        formatString.includes('Align:') ||\n        formatString.includes('TextAlign:') ||\n        formatString.includes('Padding:') ||\n        formatString.includes('P:') ||\n        // Keyword styles\n        formatString.includes('[Bold]') ||\n        formatString.includes('[Italic]') ||\n        formatString.includes('[Underline]') ||\n        formatString.includes('[Strikethrough]') ||\n        formatString.includes('[Center]') ||\n        formatString.includes('[Left]') ||\n        formatString.includes('[Right]')\n      );\n      \n      const properties: any = {\n        valueFormatter: formatter,\n        cellClass: cssClass,\n        // Enable export with formatter\n        useValueFormatterForExport: true\n      };\n      \n      // If format has conditional colors, styling directives, or any conditional formatting\n      // We'll handle cellStyle creation in StylingTab to avoid conflicts\n      // The valueFormatter's __formatString metadata will be used by StylingTab\n      if (hasStyledContent) {\n        console.log('[FormatTab] Format contains conditional styling. StylingTab will handle cellStyle creation.');\n        \n        // Check if we need to update existing cellStyle to work with new format\n        const firstColumnId = Array.from(selectedColumns)[0];\n        const colDef = columnDefinitions.get(firstColumnId);\n        const pendingChange = pendingChanges.get(firstColumnId);\n        const existingCellStyle = pendingChange?.cellStyle || colDef?.cellStyle;\n        \n        // If there's an existing cellStyle with base styles, we need to recreate it\n        // to work with the new format string\n        if (existingCellStyle) {\n          let baseStyle = {};\n          \n          if (typeof existingCellStyle === 'object') {\n            baseStyle = existingCellStyle;\n          } else if (typeof existingCellStyle === 'function' && (existingCellStyle as any).__baseStyle) {\n            baseStyle = (existingCellStyle as any).__baseStyle;\n          }\n          \n          if (Object.keys(baseStyle).length > 0) {\n            // Import the cellStyle function creator\n            const { createCellStyleFunction } = await import('@/components/datatable/utils/formatters');\n            \n            // Create a merged cellStyle function\n            const cellStyleFn = (params: { value: unknown }) => {\n              // Always start with base styles\n              const baseStyles = { ...baseStyle };\n              \n              // Get conditional styles using createCellStyleFunction with empty base\n              const conditionalStyleFn = createCellStyleFunction(formatString, {});\n              const conditionalStyles = conditionalStyleFn(params) || {};\n              \n              // Always merge base and conditional styles, with conditional taking precedence\n              const mergedStyles = { ...baseStyles, ...conditionalStyles };\n              \n              // Return merged styles if we have any, otherwise undefined\n              return Object.keys(mergedStyles).length > 0 ? mergedStyles : undefined;\n            };\n            \n            // Attach metadata for future serialization\n            Object.defineProperty(cellStyleFn, '__formatString', { \n              value: formatString, \n              writable: false,\n              enumerable: false,\n              configurable: true\n            });\n            Object.defineProperty(cellStyleFn, '__baseStyle', { \n              value: baseStyle, \n              writable: false,\n              enumerable: false,\n              configurable: true\n            });\n            \n            properties.cellStyle = cellStyleFn;\n            console.log('[FormatTab] Updated cellStyle to work with new format string while preserving base styles');\n          }\n        }\n      }\n      \n      // Apply all properties at once\n      updateBulkProperties(properties);\n    } catch (error) {\n      console.error('Error applying format:', error);\n    }\n  }, [selectedColumns, updateBulkProperties, columnDefinitions, pendingChanges]);\n\n  // Clear format from selected columns\n  const clearFormat = useCallback(() => {\n    if (selectedColumns.size === 0) return;\n    \n    // Check if we have base styles to preserve\n    const firstColumnId = Array.from(selectedColumns)[0];\n    const colDef = columnDefinitions.get(firstColumnId);\n    const pendingChange = pendingChanges.get(firstColumnId);\n    const existingCellStyle = pendingChange?.cellStyle || colDef?.cellStyle;\n    \n    let baseStyle = {};\n    if (existingCellStyle) {\n      if (typeof existingCellStyle === 'object') {\n        baseStyle = existingCellStyle;\n      } else if (typeof existingCellStyle === 'function' && (existingCellStyle as any).__baseStyle) {\n        baseStyle = (existingCellStyle as any).__baseStyle;\n      }\n    }\n    \n    // If we have base styles, preserve them; otherwise clear cellStyle\n    const properties: any = {\n      valueFormatter: undefined,\n      cellClass: undefined\n    };\n    \n    if (Object.keys(baseStyle).length > 0) {\n      // Preserve base styles\n      properties.cellStyle = baseStyle;\n    } else {\n      // No base styles to preserve, clear cellStyle\n      properties.cellStyle = undefined;\n    }\n    \n    updateBulkProperties(properties);\n  }, [selectedColumns, updateBulkProperties, columnDefinitions, pendingChanges]);\n\n  // Format presets\n  const formatPresets = useMemo(() => [\n    // Number formats\n    { \n      id: 'number', \n      name: 'Number', \n      icon: Hash, \n      format: '#,##0.00', \n      description: 'Format with thousands separator and 2 decimal places',\n      dataTypes: ['number', 'numericColumn']\n    },\n    { \n      id: 'integer', \n      name: 'Integer', \n      icon: Hash, \n      format: '#,##0', \n      description: 'Whole numbers with thousands separator',\n      dataTypes: ['number', 'numericColumn']\n    },\n    \n    // Currency formats\n    { \n      id: 'currency', \n      name: 'Currency', \n      icon: DollarSign, \n      format: '$#,##0.00', \n      description: 'US dollars with 2 decimal places',\n      dataTypes: ['number', 'numericColumn', 'currency']\n    },\n    { \n      id: 'accounting', \n      name: 'Accounting', \n      icon: DollarSign, \n      format: '$#,##0.00;($#,##0.00)', \n      description: 'Negative values in parentheses',\n      dataTypes: ['number', 'numericColumn', 'currency']\n    },\n    \n    // Percentage formats\n    { \n      id: 'percentage', \n      name: 'Percentage', \n      icon: Percent, \n      format: '0.00%', \n      description: 'Percentage with 2 decimal places',\n      dataTypes: ['number', 'numericColumn']\n    },\n    { \n      id: 'percentage-simple', \n      name: 'Percentage (0 dp)', \n      icon: Percent, \n      format: '0%', \n      description: 'Percentage with no decimal places',\n      dataTypes: ['number', 'numericColumn']\n    },\n    \n    // Date formats\n    { \n      id: 'date-short', \n      name: 'Short Date', \n      icon: Calendar, \n      format: 'MM/DD/YYYY', \n      description: 'MM/DD/YYYY format',\n      dataTypes: ['date', 'dateColumn']\n    },\n    { \n      id: 'date-long', \n      name: 'Long Date', \n      icon: Calendar, \n      format: 'MMMM D, YYYY', \n      description: 'Month Day, Year format',\n      dataTypes: ['date', 'dateColumn']\n    },\n    \n    // Text formats\n    { \n      id: 'text-prefix', \n      name: 'Text Prefix', \n      icon: Type, \n      format: '\"ID: \"#', \n      description: 'Add \"ID: \" prefix to values',\n      dataTypes: ['text', 'textColumn', 'string']\n    },\n    \n    // Conditional formats\n    { \n      id: 'conditional-color', \n      name: 'Conditional Color', \n      icon: Palette, \n      format: '[&gt;0][Green]#,##0.00;[&lt;0][Red]#,##0.00;0.00', \n      description: 'Green for positive, red for negative',\n      dataTypes: ['number', 'numericColumn']\n    },\n    { \n      id: 'traffic-light', \n      name: 'Traffic Light', \n      icon: Sparkles, \n      format: '[&gt;=90]\"🟢 \"#0;[&gt;=70]\"🟡 \"#0;\"🔴 \"#0', \n      description: 'Colored indicators based on value',\n      dataTypes: ['number', 'numericColumn']\n    },\n    { \n      id: 'arrows', \n      name: 'Arrows', \n      icon: ArrowUp, \n      format: '[&gt;0]\"↑ \"#,##0.00;[&lt;0]\"↓ \"#,##0.00;\"-\"', \n      description: 'Up/down arrows for positive/negative',\n      dataTypes: ['number', 'numericColumn']\n    }\n  ], []);\n\n  // Filter presets based on selected column types\n  const recommendedPresets = useMemo(() => {\n    if (selectedColumnTypes.length === 0) return [];\n    \n    return formatPresets.filter(preset => {\n      // If no specific data types, show for all\n      if (!preset.dataTypes) return true;\n      \n      // Check if any selected column type matches any preset data type\n      return selectedColumnTypes.some(type => \n        preset.dataTypes.some(presetType => \n          type.includes(presetType) || presetType.includes(type)\n        )\n      );\n    });\n  }, [selectedColumnTypes, formatPresets]);\n\n  // Get pinned formats\n  const pinnedFormats = useMemo(() => {\n    return formatPresets.filter(preset => quickFormatPinned.includes(preset.id));\n  }, [formatPresets, quickFormatPinned]);\n\n  // Handle opening the formatter editor\n  const openFormatterEditor = useCallback(() => {\n    setShowFormatterEditor(true);\n  }, []);\n\n  // Handle saving from formatter editor\n  const handleSaveFormatter = useCallback(async (formatter: (params: { value: unknown }) => string, cellStyle?: (params: { value: unknown }) => React.CSSProperties) => {\n    if (selectedColumns.size === 0) return;\n    \n    const properties: any = {\n      valueFormatter: formatter,\n      // Enable export with formatter\n      useValueFormatterForExport: true\n    };\n    \n    // Check if formatter has format string metadata (Excel format)\n    const formatString = (formatter as any).__formatString;\n    if (formatString) {\n      // Apply CSS class based on format\n      const cssClass = getExcelStyleClass(formatString);\n      if (cssClass) {\n        properties.cellClass = cssClass;\n      }\n      \n      // If we have a format string with styling AND a cellStyle function from ValueFormatterEditor\n      // We need to merge them with any existing base styles\n      if (cellStyle || formatString.match(/\\[(BG:|Background:|Border:|B:|Size:|FontSize:|Align:|TextAlign:|Padding:|P:|Weight:|FontWeight:|Bold|Italic|Underline|Center|Left|Right|#[0-9A-Fa-f]{3,6}|Red|Green|Blue|Yellow|Orange|Purple|Gray|Grey|Black|White|Magenta|Cyan)/i)) {\n        // Get existing base styles\n        const firstColumnId = Array.from(selectedColumns)[0];\n        const colDef = columnDefinitions.get(firstColumnId);\n        const pendingChange = pendingChanges.get(firstColumnId);\n        const existingCellStyle = pendingChange?.cellStyle || colDef?.cellStyle;\n        \n        let baseStyle = {};\n        if (existingCellStyle) {\n          if (typeof existingCellStyle === 'object') {\n            baseStyle = existingCellStyle;\n          } else if (typeof existingCellStyle === 'function' && (existingCellStyle as any).__baseStyle) {\n            baseStyle = (existingCellStyle as any).__baseStyle;\n          }\n        }\n        \n        // Import the cellStyle function creator\n        const { createCellStyleFunction } = await import('@/components/datatable/utils/formatters');\n        \n        // Create a merged cellStyle function\n        const mergedCellStyleFn = (params: { value: unknown }) => {\n          // Start with base styles from styling tab\n          const baseStyles = Object.keys(baseStyle).length > 0 ? { ...baseStyle } : {};\n          \n          // Get conditional styles from format string if any\n          let conditionalStyles = {};\n          if (formatString.match(/\\[(BG:|Background:|Border:|B:|Size:|FontSize:|Align:|TextAlign:|Padding:|P:|Weight:|FontWeight:|Bold|Italic|Underline|Center|Left|Right|#[0-9A-Fa-f]{3,6}|Red|Green|Blue|Yellow|Orange|Purple|Gray|Grey|Black|White|Magenta|Cyan)/i)) {\n            const conditionalStyleFn = createCellStyleFunction(formatString, {});\n            conditionalStyles = conditionalStyleFn(params) || {};\n          }\n          \n          // Get styles from ValueFormatterEditor if any\n          let editorStyles = {};\n          if (cellStyle) {\n            editorStyles = cellStyle(params) || {};\n          }\n          \n          // Merge all styles: base -> conditional -> editor (later ones take precedence)\n          const mergedStyles = { ...baseStyles, ...conditionalStyles, ...editorStyles };\n          \n          // Return merged styles if we have any\n          return Object.keys(mergedStyles).length > 0 ? mergedStyles : undefined;\n        };\n        \n        // Attach metadata\n        Object.defineProperty(mergedCellStyleFn, '__formatString', { \n          value: formatString, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        Object.defineProperty(mergedCellStyleFn, '__baseStyle', { \n          value: baseStyle, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        \n        properties.cellStyle = mergedCellStyleFn;\n      }\n    } else if (cellStyle) {\n      // No format string but we have cellStyle from ValueFormatterEditor\n      // Need to preserve existing base styles\n      const firstColumnId = Array.from(selectedColumns)[0];\n      const colDef = columnDefinitions.get(firstColumnId);\n      const pendingChange = pendingChanges.get(firstColumnId);\n      const existingCellStyle = pendingChange?.cellStyle || colDef?.cellStyle;\n      \n      let baseStyle = {};\n      if (existingCellStyle) {\n        if (typeof existingCellStyle === 'object') {\n          baseStyle = existingCellStyle;\n        } else if (typeof existingCellStyle === 'function' && (existingCellStyle as any).__baseStyle) {\n          baseStyle = (existingCellStyle as any).__baseStyle;\n        }\n      }\n      \n      // Create merged function\n      const mergedCellStyleFn = (params: { value: unknown }) => {\n        const baseStyles = Object.keys(baseStyle).length > 0 ? { ...baseStyle } : {};\n        const editorStyles = cellStyle(params) || {};\n        const mergedStyles = { ...baseStyles, ...editorStyles };\n        return Object.keys(mergedStyles).length > 0 ? mergedStyles : undefined;\n      };\n      \n      properties.cellStyle = mergedCellStyleFn;\n    }\n    \n    // Apply all properties\n    updateBulkProperties(properties);\n    setShowFormatterEditor(false);\n  }, [selectedColumns, updateBulkProperties, columnDefinitions, pendingChanges]);\n\n  const isDisabled = selectedColumns.size === 0;\n\n  return (\n    <ScrollArea className=\"h-full\">\n      <div className=\"px-6 py-4 space-y-6\">\n        {/* Header with description */}\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold leading-none\">Format Values</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Apply formatting to display values in a specific way without changing the underlying data.\n          </p>\n        </div>\n\n        {/* Rich Formatter Dropdown */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Palette className=\"h-4 w-4 text-primary\" />\n              Rich Formatters Library\n            </CardTitle>\n            <CardDescription className=\"text-sm\">\n              Comprehensive collection of predefined formatters including conditional colors, emojis, and symbols\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isDisabled ? (\n              <Alert className=\"bg-muted/50\">\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-sm\">\n                  Select one or more columns to apply rich formatting\n                </AlertDescription>\n              </Alert>\n            ) : (\n              <div className=\"space-y-3\">\n                <Select value={selectedRichFormatter} onValueChange={setSelectedRichFormatter}>\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Choose from rich formatter library...\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"max-h-80\">\n                    {Object.entries(RICH_FORMATTERS).map(([category, formatters]) => (\n                      <div key={category}>\n                        <div className=\"px-2 py-1.5 text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          {category}\n                        </div>\n                        {formatters.map((formatter, index) => (\n                          <SelectItem \n                            key={`${category}-${index}`} \n                            value={formatter.format}\n                            className=\"flex flex-col items-start py-3\"\n                          >\n                            <div className=\"flex items-center justify-between w-full\">\n                              <span className=\"font-medium\">{formatter.name}</span>\n                              <Badge variant=\"outline\" className=\"text-xs font-mono ml-2\">\n                                {formatter.example}\n                              </Badge>\n                            </div>\n                            <span className=\"text-xs text-muted-foreground mt-1\">\n                              {formatter.description}\n                            </span>\n                          </SelectItem>\n                        ))}\n                        {category !== Object.keys(RICH_FORMATTERS)[Object.keys(RICH_FORMATTERS).length - 1] && (\n                          <SelectSeparator />\n                        )}\n                      </div>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                {selectedRichFormatter && (\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"default\"\n                      size=\"sm\"\n                      onClick={() => {\n                        applyFormat(selectedRichFormatter);\n                        setSelectedRichFormatter('');\n                      }}\n                      className=\"flex-1 gap-2\"\n                    >\n                      <Sparkles className=\"h-4 w-4\" />\n                      Apply Rich Format\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setSelectedRichFormatter('')}\n                      className=\"gap-2\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                      Clear\n                    </Button>\n                  </div>\n                )}\n                \n                {selectedRichFormatter && (\n                  <div className=\"p-3 bg-muted/30 rounded-md border\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm font-medium\">Format String</span>\n                    </div>\n                    <code className=\"text-xs font-mono text-muted-foreground bg-background px-2 py-1 rounded\">\n                      {selectedRichFormatter}\n                    </code>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Format Buttons */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Sparkles className=\"h-4 w-4 text-primary\" />\n              Quick Formats\n            </CardTitle>\n            <CardDescription className=\"text-sm\">\n              Apply common formats with one click\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isDisabled ? (\n              <Alert className=\"bg-muted/50\">\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-sm\">\n                  Select one or more columns to apply formatting\n                </AlertDescription>\n              </Alert>\n            ) : (\n              <>\n                {singleDataType && recommendedPresets.length > 0 && (\n                  <div className=\"mb-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Lightbulb className=\"h-4 w-4 text-amber-500\" />\n                      <span className=\"text-sm font-medium\">Recommended for {singleDataType}</span>\n                    </div>\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2\">\n                      {recommendedPresets.slice(0, 6).map(preset => (\n                        <Button\n                          key={preset.id}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => applyFormat(preset.format)}\n                          disabled={isDisabled}\n                          className=\"h-9 justify-start gap-2 text-sm\"\n                          title={preset.description}\n                        >\n                          <preset.icon className=\"h-4 w-4 text-primary\" />\n                          <span className=\"truncate\">{preset.name}</span>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2\">\n                  {pinnedFormats.map(format => (\n                    <Button\n                      key={format.id}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => applyFormat(format.format)}\n                      disabled={isDisabled}\n                      className={`h-9 justify-start gap-2 text-sm ${\n                        currentFormatString === format.format ? 'border-primary bg-primary/10' : ''\n                      }`}\n                      title={format.description}\n                    >\n                      <format.icon className=\"h-4 w-4 text-primary\" />\n                      <span className=\"truncate\">{format.name}</span>\n                    </Button>\n                  ))}\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={clearFormat}\n                    disabled={isDisabled || currentFormatters.size === 0}\n                    className=\"h-9 justify-start gap-2 text-sm\"\n                  >\n                    <X className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>Clear Format</span>\n                  </Button>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Custom Format Editor */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Hash className=\"h-4 w-4 text-primary\" />\n              Custom Format\n            </CardTitle>\n            <CardDescription className=\"text-sm\">\n              Create advanced formatting with Excel-like syntax\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {isDisabled ? (\n              <Alert className=\"bg-muted/50\">\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-sm\">\n                  Select one or more columns to apply custom formatting\n                </AlertDescription>\n              </Alert>\n            ) : (\n              <>\n                {!hasConsistentFormatter && currentFormatters.size > 0 && (\n                  <Alert className=\"bg-amber-50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-800/50\">\n                    <Lightbulb className=\"h-4 w-4 text-amber-600 dark:text-amber-400\" />\n                    <AlertDescription className=\"text-sm text-amber-800 dark:text-amber-200\">\n                      Selected columns have different formats. Applying a new format will override all of them.\n                    </AlertDescription>\n                  </Alert>\n                )}\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Current Format</Label>\n                    <Badge variant=\"outline\" className=\"text-xs font-mono\">\n                      {currentFormatString || 'None'}\n                    </Badge>\n                  </div>\n                  \n                  <Button\n                    variant=\"default\"\n                    size=\"sm\"\n                    onClick={openFormatterEditor}\n                    disabled={isDisabled}\n                    className=\"w-full justify-center gap-2 h-9\"\n                  >\n                    <Palette className=\"h-4 w-4\" />\n                    <span>Open Format Editor</span>\n                  </Button>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Format Guide</Label>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-7 px-2 gap-1\"\n                      onClick={() => window.open('https://support.microsoft.com/en-us/office/number-format-codes-5026bbd6-04bc-48cd-bf33-80f18b4eae68', '_blank')}\n                    >\n                      <HelpCircle className=\"h-3.5 w-3.5\" />\n                      <span className=\"text-xs\">Help</span>\n                    </Button>\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground space-y-1.5\">\n                    <p><strong>Basic:</strong> <code className=\"bg-muted px-1 py-0.5 rounded\">#,##0.00</code> - Number with thousands separator and 2 decimals</p>\n                    <p><strong>Currency:</strong> <code className=\"bg-muted px-1 py-0.5 rounded\">$#,##0.00</code> - Currency with symbol</p>\n                    <p><strong>Percentage:</strong> <code className=\"bg-muted px-1 py-0.5 rounded\">0.00%</code> - Percentage with 2 decimals</p>\n                    <p><strong>Conditional:</strong> <code className=\"bg-muted px-1 py-0.5 rounded\">[&gt;0][Green]#,##0;[Red]#,##0</code> - Color based on value</p>\n                  </div>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Format Preview */}\n        {!isDisabled && (\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Eye className=\"h-4 w-4 text-primary\" />\n                Format Preview\n              </CardTitle>\n              <CardDescription className=\"text-sm\">\n                See how your format will look with sample data\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-xs text-muted-foreground\">Original</Label>\n                    <div className=\"p-2 bg-muted/30 rounded-md border text-sm\">\n                      {singleDataType === 'number' ? '1234.56' : \n                       singleDataType === 'date' ? '2023-01-15' : \n                       'Sample Text'}\n                    </div>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-xs text-muted-foreground\">Formatted</Label>\n                    <div className=\"p-2 bg-primary/5 rounded-md border border-primary/20 text-sm font-medium\">\n                      {currentFormatString ? (\n                        singleDataType === 'number' ? '$1,234.56' : \n                        singleDataType === 'date' ? 'Jan 15, 2023' : \n                        'Sample Text'\n                      ) : (\n                        <span className=\"text-muted-foreground italic\">No format applied</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Value Formatter Editor Dialog */}\n        <ValueFormatterEditor\n          open={showFormatterEditor}\n          onOpenChange={setShowFormatterEditor}\n          initialFormatter={currentFormatters.size > 0 && hasConsistentFormatter ? \n            Array.from(currentFormatters.values())[0] : undefined}\n          onSave={handleSaveFormatter}\n          title=\"Custom Value Formatter\"\n          columnType={singleDataType as 'text' | 'number' | 'date' | 'boolean'}\n        />\n      </div>\n    </ScrollArea>\n  );\n};\n\nexport default FormatTab;","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/tabs/GeneralTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/tabs/StylingTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2839,2842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2839,2842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3655,3658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3655,3658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7430,7433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7430,7433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":277,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11741,11744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11741,11744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { ThreeStateCheckbox } from '../components/ThreeStateCheckbox';\nimport { AlignmentIconPicker } from '../components/AlignmentIconPicker';\nimport { Button } from '@/components/ui/button';\nimport { Palette, Eraser } from 'lucide-react';\nimport { StyleEditor } from '../editors/StyleEditor';\nimport { useColumnCustomizationStore } from '../store/column-customization.store';\nimport { createCellStyleFunction } from '@/components/datatable/utils/formatters';\n\ninterface StylingTabProps {\n  uiMode?: 'simple' | 'advanced';\n}\n\nexport const StylingTab: React.FC<StylingTabProps> = ({ uiMode: _uiMode = 'simple' }) => {\n  const {\n    selectedColumns,\n    columnDefinitions,\n    pendingChanges,\n    updateBulkProperty\n  } = useColumnCustomizationStore();\n\n  const [showCellStyleEditor, setShowCellStyleEditor] = useState(false);\n  const [showHeaderStyleEditor, setShowHeaderStyleEditor] = useState(false);\n\n  const getMixedValue = (property: string) => {\n    const values = new Set();\n    const allValues: unknown[] = [];\n\n    selectedColumns.forEach(colId => {\n      const colDef = columnDefinitions.get(colId);\n      const pendingChange = pendingChanges.get(colId);\n\n      // Check pending changes first, then fall back to column definition\n      let value;\n      if (pendingChange && property in pendingChange) {\n        value = pendingChange[property as keyof typeof pendingChange];\n      } else if (colDef) {\n        value = colDef[property as keyof typeof colDef];\n      }\n\n      values.add(value);\n      allValues.push(value);\n    });\n\n    if (values.size === 0) return { value: undefined, isMixed: false };\n    if (values.size === 1) return { value: Array.from(values)[0], isMixed: false };\n    return { value: undefined, isMixed: true, values: allValues };\n  };\n\n  const isDisabled = selectedColumns.size === 0;\n  const isMultipleSelection = selectedColumns.size > 1;\n\n  const handleCellStyleSave = (style: React.CSSProperties) => {\n    // Check if we have conditional formatting that needs to be preserved\n    let hasConditionalFormatting = false;\n    let formatString = '';\n    \n    selectedColumns.forEach(colId => {\n      const colDef = columnDefinitions.get(colId);\n      const pendingChange = pendingChanges.get(colId);\n      \n      // Check pending changes first, then column definition\n      const valueFormatter = pendingChange?.valueFormatter || colDef?.valueFormatter;\n      const cellStyle = pendingChange?.cellStyle || colDef?.cellStyle;\n      \n      // First check if valueFormatter has format string metadata\n      if (valueFormatter && typeof valueFormatter === 'function') {\n        const metadata = (valueFormatter as any).__formatString;\n        if (metadata && metadata.includes('[') && metadata.includes(']')) {\n          // Check if format string contains style directives OR color specifications\n          const hasStyleDirectives = metadata.match(/\\[(BG:|Background:|Border:|B:|Size:|FontSize:|Align:|TextAlign:|Padding:|P:|Weight:|FontWeight:|Bold|Italic|Underline|Center|Left|Right|#[0-9A-Fa-f]{3,6}|Red|Green|Blue|Yellow|Orange|Purple|Gray|Grey|Black|White|Magenta|Cyan)/i);\n          if (hasStyleDirectives) {\n            hasConditionalFormatting = true;\n            formatString = metadata;\n          }\n        }\n      }\n      \n      // Also check if existing cellStyle has format string metadata\n      if (!hasConditionalFormatting && cellStyle && typeof cellStyle === 'function') {\n        const metadata = (cellStyle as any).__formatString;\n        if (metadata && metadata.includes('[') && metadata.includes(']')) {\n          hasConditionalFormatting = true;\n          formatString = metadata;\n        }\n      }\n    });\n    \n    if (hasConditionalFormatting) {\n      // We have conditional formatting from valueFormatter\n      // Create a cellStyle function that merges base styles with conditional styles\n      // Conditional styles take precedence (similar to the reference implementation)\n      // Create a custom cellStyle function that always merges base and conditional styles\n      // This is different from createCellStyleFunction which returns EITHER conditional OR base styles\n      const cellStyleFn = (params: { value: unknown }) => {\n        // Always start with base styles\n        const baseStyles = style && Object.keys(style).length > 0 ? { ...style } : {};\n        \n        // Get conditional styles using createCellStyleFunction with empty base\n        // This ensures we only get the conditional styles when conditions match\n        const conditionalStyleFn = createCellStyleFunction(formatString, {});\n        const conditionalStyles = conditionalStyleFn(params) || {};\n        \n        // Always merge base and conditional styles, with conditional taking precedence\n        // This matches the reference implementation pattern\n        const mergedStyles = { ...baseStyles, ...conditionalStyles };\n        \n        // Return merged styles if we have any, otherwise undefined\n        return Object.keys(mergedStyles).length > 0 ? mergedStyles : undefined;\n      };\n      \n      // Attach metadata for future serialization\n      Object.defineProperty(cellStyleFn, '__formatString', { \n        value: formatString, \n        writable: false,\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(cellStyleFn, '__baseStyle', { \n        value: style, \n        writable: false,\n        enumerable: false,\n        configurable: true\n      });\n      updateBulkProperty('cellStyle', cellStyleFn);\n    } else {\n      // No conditional formatting, just save the style directly\n      updateBulkProperty('cellStyle', style);\n    }\n  };\n\n  const handleHeaderStyleSave = (style: React.CSSProperties) => {\n    console.log('[StylingTab] Saving headerStyle:', {\n      style,\n      selectedColumnsCount: selectedColumns.size,\n      selectedColumns: Array.from(selectedColumns)\n    });\n    \n    // Create a function that applies styles only to regular headers, not floating filters\n    const headerStyleFn = (params: { floatingFilter?: boolean }) => {\n      // Don't apply styles to floating filter row\n      if (params?.floatingFilter) {\n        return null;\n      }\n      return style;\n    };\n    \n    updateBulkProperty('headerStyle', headerStyleFn);\n  };\n\n  // Clear all styles\n  const _clearAllStyles = () => {\n    updateBulkProperty('cellStyle', undefined);\n    updateBulkProperty('headerStyle', undefined);\n    updateBulkProperty('cellClass', undefined);\n    updateBulkProperty('headerClass', undefined);\n  };\n\n  // Clear only cell styles\n  const clearCellStyles = () => {\n    // Check if we have conditional formatting from valueFormatter that needs to be preserved\n    let hasConditionalFormatting = false;\n    let formatString = '';\n    \n    selectedColumns.forEach(colId => {\n      const colDef = columnDefinitions.get(colId);\n      const pendingChange = pendingChanges.get(colId);\n      \n      // Check pending changes first, then column definition\n      const valueFormatter = pendingChange?.valueFormatter || colDef?.valueFormatter;\n      \n      // Check if valueFormatter has format string metadata (from conditional formatting)\n      if (valueFormatter && typeof valueFormatter === 'function') {\n        const metadata = (valueFormatter as any).__formatString;\n        if (metadata && metadata.includes('[') && metadata.includes(']')) {\n          // Check if format string contains style directives OR color specifications\n          const hasStyleDirectives = metadata.match(/\\[(BG:|Background:|Border:|B:|Size:|FontSize:|Align:|TextAlign:|Padding:|P:|Weight:|FontWeight:|Bold|Italic|Underline|Center|Left|Right|#[0-9A-Fa-f]{3,6}|Red|Green|Blue|Yellow|Orange|Purple|Gray|Grey|Black|White|Magenta|Cyan)/i);\n          if (hasStyleDirectives) {\n            hasConditionalFormatting = true;\n            formatString = metadata;\n          }\n        }\n      }\n    });\n    \n    if (hasConditionalFormatting) {\n      // Keep conditional formatting but clear base styles\n      // This is the same as handleCellStyleSave but with empty base styles\n      const cellStyleFn = (params: { value: unknown }) => {\n        // No base styles (cleared)\n        const _baseStyles = {};\n        \n        // Get conditional styles using createCellStyleFunction with empty base\n        const conditionalStyleFn = createCellStyleFunction(formatString, {});\n        const conditionalStyles = conditionalStyleFn(params) || {};\n        \n        // Return only conditional styles since base styles are cleared\n        return Object.keys(conditionalStyles).length > 0 ? conditionalStyles : undefined;\n      };\n      \n      // Attach metadata for future serialization\n      Object.defineProperty(cellStyleFn, '__formatString', { \n        value: formatString, \n        writable: false,\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(cellStyleFn, '__baseStyle', { \n        value: {}, \n        writable: false,\n        enumerable: false,\n        configurable: true\n      });\n      updateBulkProperty('cellStyle', cellStyleFn);\n    } else {\n      updateBulkProperty('cellStyle', undefined);\n    }\n    \n    // Clear non-format related classes\n    const currentCellClass = getMixedValue('cellClass');\n    if (currentCellClass.value) {\n      const classes = (currentCellClass.value as string).split(' ').filter(c => \n        c.startsWith('ag-numeric-cell') || c.startsWith('ag-currency-cell') || \n        c.startsWith('ag-percentage-cell') || c.startsWith('ag-date-cell')\n      );\n      updateBulkProperty('cellClass', classes.length > 0 ? classes.join(' ') : undefined);\n    }\n  };\n\n  // Clear only header styles\n  const clearHeaderStyles = () => {\n    updateBulkProperty('headerStyle', undefined);\n    updateBulkProperty('headerClass', undefined);\n  };\n\n  // Clear only alignment classes (keep other styles)\n  const _clearAlignment = () => {\n    const currentHeaderClass = getMixedValue('headerClass');\n    const currentCellClass = getMixedValue('cellClass');\n\n    // Remove alignment classes from headerClass\n    if (currentHeaderClass.value) {\n      const headerClasses = (currentHeaderClass.value as string).split(' ').filter(c =>\n        !c.startsWith('header-align-') && !c.startsWith('header-valign-')\n      );\n      updateBulkProperty('headerClass', headerClasses.length > 0 ? headerClasses.join(' ') : undefined);\n    }\n\n    // Remove alignment classes from cellClass\n    if (currentCellClass.value) {\n      const cellClasses = (currentCellClass.value as string).split(' ').filter(c =>\n        !c.startsWith('cell-align-') && !c.startsWith('cell-valign-')\n      );\n      updateBulkProperty('cellClass', cellClasses.length > 0 ? cellClasses.join(' ') : undefined);\n    }\n  };\n\n  // Get current cell style (if consistent across selected columns)\n  const currentCellStyle = getMixedValue('cellStyle');\n  const currentHeaderStyle = getMixedValue('headerStyle');\n  \n  // Extract style object from headerStyle if it's a function\n  const getHeaderStyleObject = () => {\n    if (currentHeaderStyle.value && typeof currentHeaderStyle.value === 'function') {\n      // Call the function with non-floating filter context to get the style object\n      return currentHeaderStyle.value({ floatingFilter: false });\n    }\n    return currentHeaderStyle.value;\n  };\n\n  // Extract style object from cellStyle if it's a function\n  const getCellStyleObject = () => {\n    if (currentCellStyle.value && typeof currentCellStyle.value === 'function') {\n      // Check if this function has base style metadata\n      const baseStyle = (currentCellStyle.value as any).__baseStyle;\n      if (baseStyle) {\n        return baseStyle;\n      }\n      // Don't pass function-based styles to the editor without base style\n      return {};\n    }\n    return currentCellStyle.value;\n  };\n\n  // Handle header alignment changes using headerClass (separate from headerStyle)\n  const handleHeaderAlignmentChange = (alignment: string, type: 'horizontal' | 'vertical') => {\n    const currentHeaderClass = getMixedValue('headerClass');\n    // Ensure we always work with strings, not booleans\n    const currentClassesRaw = currentHeaderClass.value;\n    const currentClasses = (typeof currentClassesRaw === 'string' ? currentClassesRaw : '').trim();\n    const classArray = currentClasses ? currentClasses.split(' ').filter(c => c) : [];\n\n    // Remove existing alignment classes\n    const filteredClasses = classArray.filter(c => {\n      if (type === 'horizontal') {\n        return !c.startsWith('header-align-');\n      } else {\n        return !c.startsWith('header-valign-');\n      }\n    });\n\n    // Add new alignment class if not default\n    if (alignment !== 'default') {\n      const prefix = type === 'horizontal' ? 'header-align-' : 'header-valign-';\n      const newClass = prefix + alignment;\n      filteredClasses.push(newClass);\n    }\n\n    const newHeaderClass = filteredClasses.join(' ').trim();\n    updateBulkProperty('headerClass', newHeaderClass || undefined);\n  };\n\n  // Handle cell alignment changes using cellClass\n  const handleCellAlignmentChange = (alignment: string, type: 'horizontal' | 'vertical') => {\n    const currentCellClass = getMixedValue('cellClass');\n    // Ensure we always work with strings, not booleans\n    const currentClassesRaw = currentCellClass.value;\n    const currentClasses = (typeof currentClassesRaw === 'string' ? currentClassesRaw : '').trim();\n    const classArray = currentClasses ? currentClasses.split(' ').filter(c => c) : [];\n\n    // Remove existing alignment classes\n    const filteredClasses = classArray.filter(c => {\n      if (type === 'horizontal') {\n        return !c.startsWith('cell-align-');\n      } else {\n        return !c.startsWith('cell-valign-');\n      }\n    });\n\n    // Add new alignment class if not default\n    if (alignment !== 'default') {\n      const prefix = type === 'horizontal' ? 'cell-align-' : 'cell-valign-';\n      const newClass = prefix + alignment;\n      filteredClasses.push(newClass);\n    }\n\n    const newCellClass = filteredClasses.join(' ').trim();\n    updateBulkProperty('cellClass', newCellClass || undefined);\n  };\n\n  // Extract current header alignment from headerClass\n  const getCurrentHeaderAlignment = (type: 'horizontal' | 'vertical') => {\n    const headerClassValue = getMixedValue('headerClass');\n    const headerClassRaw = headerClassValue.value;\n    const headerClass = (typeof headerClassRaw === 'string' ? headerClassRaw : '').trim();\n\n    if (!headerClass) return 'default';\n\n    const prefix = type === 'horizontal' ? 'header-align-' : 'header-valign-';\n    const regex = new RegExp(`${prefix}(\\\\w+)`);\n    const match = headerClass.match(regex);\n\n    return match ? match[1] : 'default';\n  };\n\n  // Extract current cell alignment from cellClass\n  const getCurrentCellAlignment = (type: 'horizontal' | 'vertical') => {\n    const cellClassValue = getMixedValue('cellClass');\n    const cellClassRaw = cellClassValue.value;\n    const cellClass = (typeof cellClassRaw === 'string' ? cellClassRaw : '').trim();\n\n    if (!cellClass) return 'default';\n\n    const prefix = type === 'horizontal' ? 'cell-align-' : 'cell-valign-';\n    const regex = new RegExp(`${prefix}(\\\\w+)`);\n    const match = cellClass.match(regex);\n\n    return match ? match[1] : 'default';\n  };\n\n  // Check if header alignment is mixed\n  const isHeaderAlignmentMixed = (_type: 'horizontal' | 'vertical') => {\n    const headerClassValue = getMixedValue('headerClass');\n    return headerClassValue.isMixed;\n  };\n\n  // Check if cell alignment is mixed\n  const isCellAlignmentMixed = (_type: 'horizontal' | 'vertical') => {\n    const cellClassValue = getMixedValue('cellClass');\n    return cellClassValue.isMixed;\n  };\n\n  return (\n    <ScrollArea className=\"h-full\">\n      <div className=\"px-6 py-4 space-y-6\">\n        {/* Two-column layout for better space utilization */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Left Column */}\n          <div className=\"space-y-6\">\n            {/* Header Alignment */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base\">Header Alignment</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Set text alignment for column headers\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <AlignmentIconPicker\n                  label=\"Horizontal\"\n                  type=\"horizontal\"\n                  value={getCurrentHeaderAlignment('horizontal')}\n                  onChange={(value) => handleHeaderAlignmentChange(value, 'horizontal')}\n                  disabled={isDisabled || (isMultipleSelection && isHeaderAlignmentMixed('horizontal'))}\n                  isMixed={isMultipleSelection && isHeaderAlignmentMixed('horizontal')}\n                />\n\n                <AlignmentIconPicker\n                  label=\"Vertical\"\n                  type=\"vertical\"\n                  value={getCurrentHeaderAlignment('vertical')}\n                  onChange={(value) => handleHeaderAlignmentChange(value, 'vertical')}\n                  disabled={isDisabled || (isMultipleSelection && isHeaderAlignmentMixed('vertical'))}\n                  isMixed={isMultipleSelection && isHeaderAlignmentMixed('vertical')}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Style Editors */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base\">Style Editors</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Customize visual appearance\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full justify-start gap-2 h-9\"\n                  disabled={isDisabled}\n                  onClick={() => setShowHeaderStyleEditor(true)}\n                >\n                  <Palette className=\"h-4 w-4\" />\n                  Edit Header Style\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full justify-start gap-2 h-9\"\n                  disabled={isDisabled}\n                  onClick={() => setShowCellStyleEditor(true)}\n                >\n                  <Palette className=\"h-4 w-4\" />\n                  Edit Cell Style\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Text Display Options */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base\">Text Display</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Control how text is displayed in cells\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <ThreeStateCheckbox\n                  label=\"Wrap Text\"\n                  property=\"wrapText\"\n                  mixedValue={getMixedValue('wrapText')}\n                  onChange={(value) => updateBulkProperty('wrapText', value)}\n                  disabled={isDisabled || (isMultipleSelection && getMixedValue('wrapText').isMixed)}\n                  description=\"Wrap long text within cells\"\n                />\n\n                <ThreeStateCheckbox\n                  label=\"Auto Height\"\n                  property=\"autoHeight\"\n                  mixedValue={getMixedValue('autoHeight')}\n                  onChange={(value) => updateBulkProperty('autoHeight', value)}\n                  disabled={isDisabled || (isMultipleSelection && getMixedValue('autoHeight').isMixed)}\n                  description=\"Automatically adjust row height to fit content\"\n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-6\">\n            {/* Cell Alignment */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base\">Cell Alignment</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Set text alignment for cell content\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <AlignmentIconPicker\n                  label=\"Horizontal\"\n                  type=\"horizontal\"\n                  value={getCurrentCellAlignment('horizontal')}\n                  onChange={(value) => handleCellAlignmentChange(value, 'horizontal')}\n                  disabled={isDisabled || (isMultipleSelection && isCellAlignmentMixed('horizontal'))}\n                  isMixed={isMultipleSelection && isCellAlignmentMixed('horizontal')}\n                />\n\n                <AlignmentIconPicker\n                  label=\"Vertical\"\n                  type=\"vertical\"\n                  value={getCurrentCellAlignment('vertical')}\n                  onChange={(value) => handleCellAlignmentChange(value, 'vertical')}\n                  disabled={isDisabled || (isMultipleSelection && isCellAlignmentMixed('vertical'))}\n                  isMixed={isMultipleSelection && isCellAlignmentMixed('vertical')}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Clear Styles */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base\">Reset Styles</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Remove custom styling and formatting\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full justify-start gap-2 h-9\"\n                  disabled={isDisabled}\n                  onClick={clearCellStyles}\n                >\n                  <Eraser className=\"h-4 w-4\" />\n                  Clear Cell Styles\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full justify-start gap-2 h-9\"\n                  disabled={isDisabled}\n                  onClick={clearHeaderStyles}\n                >\n                  <Eraser className=\"h-4 w-4\" />\n                  Clear Header Styles\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Header Text */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base\">Header Text</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Header text display options\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <ThreeStateCheckbox\n                  label=\"Wrap Header Text\"\n                  property=\"wrapHeaderText\"\n                  mixedValue={getMixedValue('wrapHeaderText')}\n                  onChange={(value) => updateBulkProperty('wrapHeaderText', value)}\n                  disabled={isDisabled || (isMultipleSelection && getMixedValue('wrapHeaderText').isMixed)}\n                  description=\"Wrap long text in column headers\"\n                />\n\n                <ThreeStateCheckbox\n                  label=\"Auto Header Height\"\n                  property=\"autoHeaderHeight\"\n                  mixedValue={getMixedValue('autoHeaderHeight')}\n                  onChange={(value) => updateBulkProperty('autoHeaderHeight', value)}\n                  disabled={isDisabled || (isMultipleSelection && getMixedValue('autoHeaderHeight').isMixed)}\n                  description=\"Automatically adjust header height\"\n                />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Style Editors */}\n        <StyleEditor\n          open={showCellStyleEditor}\n          onOpenChange={setShowCellStyleEditor}\n          title=\"Cell Style Editor\"\n          initialStyle={currentCellStyle.isMixed ? {} : (getCellStyleObject() as React.CSSProperties || {})}\n          onSave={handleCellStyleSave}\n          isHeaderStyle={false}\n        />\n\n        <StyleEditor\n          open={showHeaderStyleEditor}\n          onOpenChange={setShowHeaderStyleEditor}\n          title=\"Header Style Editor\"\n          initialStyle={currentHeaderStyle.isMixed ? {} : (getHeaderStyleObject() as React.CSSProperties || {})}\n          onSave={handleHeaderStyleSave}\n          isHeaderStyle={true}\n        />\n      </div>\n    </ScrollArea>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/tabs/ValueFormattersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/dialogs/columnSettings/utils/feedback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/hooks/useColumnOperations.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'gridApiRef'. Either include it or remove the dependency array.","line":38,"column":5,"nodeType":"ArrayExpression","endLine":38,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [gridApiRef]","fix":{"range":[1422,1424],"text":"[gridApiRef]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'gridApiRef'. Either include it or remove the dependency array.","line":177,"column":6,"nodeType":"ArrayExpression","endLine":177,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [gridApiRef, setCurrentColumnDefs, activeProfile, applyColumnChangesDebounced]","fix":{"range":[7085,7151],"text":"[gridApiRef, setCurrentColumnDefs, activeProfile, applyColumnChangesDebounced]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef, useMemo } from 'react';\nimport { ColDef, GridApi } from 'ag-grid-community';\nimport { useActiveProfile } from '@/stores/profile.store';\nimport { profileOptimizer } from '@/lib/profile-optimizer';\nimport { debounce } from '@/lib/utils';\nimport { ColumnDef } from '../types';\nimport { STATE_RESTORATION_DELAY_MS, COLUMN_UPDATE_DEBOUNCE_MS } from '../utils/constants';\n\n/**\n * Custom hook for handling column operations and updates\n */\nexport function useColumnOperations(\n  gridApiRef: React.MutableRefObject<GridApi | null>,\n  setCurrentColumnDefs: (columns: ColumnDef[]) => void\n) {\n  const activeProfile = useActiveProfile();\n  const columnDefsWithStylesRef = useRef<ColumnDef[]>([]);\n  \n  // Debounced column update to prevent rapid re-renders\n  const applyColumnChangesDebounced = useMemo(\n    () => debounce((columns: ColDef[]) => {\n      if (gridApiRef.current) {\n        gridApiRef.current.setGridOption('columnDefs', columns);\n        \n        // Force header refresh to ensure styles are applied\n        gridApiRef.current.refreshHeader();\n        \n        // Also refresh cells to ensure cell styles are applied/cleared\n        gridApiRef.current.refreshCells({ \n          force: true,\n          suppressFlash: false \n        });\n        \n        // Redraw rows to ensure all styling is updated\n        gridApiRef.current.redrawRows();\n      }\n    }, COLUMN_UPDATE_DEBOUNCE_MS),\n    []\n  );\n  \n  const handleApplyColumnChanges = useCallback((updatedColumns: ColDef[]) => {\n    console.log('[useColumnOperations] handleApplyColumnChanges:', {\n      updatedColumnsCount: updatedColumns.length,\n      hasGridApi: !!gridApiRef.current,\n      hasCustomizations: updatedColumns.some(col => \n        col.cellStyle || col.valueFormatter || col.cellClass\n      ),\n      firstColumn: updatedColumns[0]?.field\n    });\n    \n    // IMPORTANT: We need to preserve the current column state (width, position, visibility)\n    // and only update the customization properties\n    if (gridApiRef.current) {\n      // Get current column state to preserve\n      const currentColumnState = gridApiRef.current.getColumnState();\n      const currentFilterModel = gridApiRef.current.getFilterModel();\n      const currentSortModel = gridApiRef.current.getColumnState().filter(col => col.sort);\n      const currentColumnDefs = gridApiRef.current.getColumnDefs() || [];\n      \n      console.log('[useColumnOperations] Preserving AG-Grid state:', {\n        columnStateCount: currentColumnState.length,\n        visibleColumns: currentColumnState.filter(cs => !cs.hide).length,\n        hiddenColumns: currentColumnState.filter(cs => cs.hide).length,\n        pinnedColumns: currentColumnState.filter(cs => cs.pinned).length,\n        sortedColumns: currentSortModel.length,\n        hasFilters: Object.keys(currentFilterModel).length > 0\n      });\n      \n      // Create a map of current columns for quick lookup\n      const currentColMap = new Map();\n      currentColumnDefs.forEach(col => {\n        if ('field' in col && col.field) {\n          currentColMap.set(col.field, col);\n        } else if ('colId' in col && col.colId) {\n          currentColMap.set(col.colId, col);\n        }\n      });\n      \n      // Merge the customizations with existing column definitions\n      const mergedColumns = updatedColumns.map(updatedCol => {\n        const field = updatedCol.field || updatedCol.colId;\n        const currentCol = currentColMap.get(field);\n        \n        if (currentCol) {\n          // Enhanced logging for debugging style application\n          const hasCellStyle = updatedCol.cellStyle !== undefined;\n          const hasValueFormatter = updatedCol.valueFormatter !== undefined;\n          \n          if (hasCellStyle || hasValueFormatter) {\n            console.log(`[useColumnOperations] Column ${field} style/formatter update:`, {\n              field,\n              hasCellStyle,\n              cellStyleType: typeof updatedCol.cellStyle,\n              hasValueFormatter,\n              valueFormatterType: typeof updatedCol.valueFormatter,\n            });\n          }\n          \n          // For columns being updated, use the updated version entirely\n          // The store has already handled property removal/addition\n          return updatedCol;\n        }\n        \n        // If column not found in current state, return as is\n        return updatedCol;\n      });\n      \n      // Store the merged columns with styles for later retrieval\n      columnDefsWithStylesRef.current = mergedColumns as ColumnDef[];\n      \n      // Update the currentColumnDefs state to ensure consistency\n      setCurrentColumnDefs(mergedColumns as ColumnDef[]);\n      \n      // Apply the merged column definitions with debouncing\n      applyColumnChangesDebounced(mergedColumns);\n      \n      // Restore the column state, filters, and sorts to preserve user's current view\n      // Small delay to ensure column definitions are fully applied\n      setTimeout(() => {\n        if (gridApiRef.current) {\n          // Restore column state (width, position, visibility, pinning)\n          if (currentColumnState) {\n            console.log('[useColumnOperations] Restoring column state after customization');\n            gridApiRef.current.applyColumnState({\n              state: currentColumnState,\n              applyOrder: true\n            });\n          }\n          \n          // Restore filters\n          if (currentFilterModel && Object.keys(currentFilterModel).length > 0) {\n            console.log('[useColumnOperations] Restoring filters:', currentFilterModel);\n            gridApiRef.current.setFilterModel(currentFilterModel);\n          }\n          \n          // Restore sorts\n          if (currentSortModel && currentSortModel.length > 0) {\n            console.log('[useColumnOperations] Restoring sorts:', currentSortModel);\n            const sortState = currentSortModel.map(col => ({\n              colId: col.colId,\n              sort: col.sort,\n              sortIndex: col.sortIndex\n            }));\n            gridApiRef.current.applyColumnState({\n              state: sortState\n            });\n          }\n          \n          // Force a final refresh to ensure everything is applied correctly\n          gridApiRef.current.refreshCells({ force: true });\n        }\n        \n        // Don't show toast here as this is called frequently during editing\n        // Toast will be shown when the user saves the profile\n      }, STATE_RESTORATION_DELAY_MS); // Small delay to ensure column definitions are fully applied\n    }\n    \n    // Update React state\n    setCurrentColumnDefs(updatedColumns.map((col) => {\n      if (col.field && col.headerName) {\n        return col as ColumnDef;\n      }\n      \n      return {\n        ...col,\n        field: col.field || '',\n        headerName: col.headerName || col.field || ''\n      };\n    }));\n    \n    // Clear optimizer cache for active profile since columns changed\n    if (activeProfile) {\n      profileOptimizer.clearCache(activeProfile.id);\n    }\n    \n    // Column changes from dialog are only saved when Save Profile button is clicked\n  }, [activeProfile, setCurrentColumnDefs, applyColumnChangesDebounced]);\n  \n  // Get column definitions with styles\n  const getColumnDefsWithStyles = useCallback(() => {\n    return columnDefsWithStylesRef.current;\n  }, []);\n  \n  return {\n    handleApplyColumnChanges,\n    getColumnDefsWithStyles,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/hooks/useColumnProcessor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[861,864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[861,864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1099,1102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1099,1102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\nimport { createCellStyleFunction, hasConditionalStyling } from '../utils/style-utils';\nimport { ColumnDef } from '../types';\n\n/**\n * Custom hook that processes columns to ensure cellStyle functions are created\n * for columns with conditional formatting in their valueFormatters.\n * \n * This preserves the CRITICAL functionality from ensureCellStyleForColumns\n * that merges base styles with conditional styles.\n */\nexport function useColumnProcessor(columns: ColumnDef[]): ColumnDef[] {\n  return useMemo(() => {\n    let hasChanges = false;\n    \n    const processed = columns.map(col => {\n      // Check if valueFormatter has conditional styling that needs cellStyle\n      if (!col.valueFormatter || typeof col.valueFormatter !== 'function') {\n        return col;\n      }\n      \n      const formatString = (col.valueFormatter as any).__formatString;\n      \n      if (!formatString || !hasConditionalStyling(formatString)) {\n        return col;\n      }\n      \n      // Check if cellStyle needs to be created or updated\n      const existingCellStyle = col.cellStyle as any;\n      const needsCellStyle = !col.cellStyle || \n                            (typeof col.cellStyle === 'function' && \n                             existingCellStyle.__formatString !== formatString);\n      \n      if (!needsCellStyle) {\n        return col;\n      }\n      \n      hasChanges = true;\n      \n      console.log('[useColumnProcessor] Creating cellStyle for conditional formatting:', {\n        field: col.field,\n        formatString,\n        hasExistingCellStyle: !!col.cellStyle\n      });\n      \n      // Extract base style if it exists\n      let baseStyle: React.CSSProperties = {};\n      if (col.cellStyle) {\n        if (typeof col.cellStyle === 'object') {\n          baseStyle = col.cellStyle as React.CSSProperties;\n        } else if (typeof col.cellStyle === 'function' && existingCellStyle.__baseStyle) {\n          baseStyle = existingCellStyle.__baseStyle;\n        }\n      }\n      \n      // Create cellStyle function with proper base style merging\n      const cellStyleFn = createCellStyleFunction(formatString, baseStyle);\n      \n      // Attach metadata for future serialization\n      Object.defineProperty(cellStyleFn, '__formatString', { \n        value: formatString, \n        writable: false,\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(cellStyleFn, '__baseStyle', { \n        value: baseStyle, \n        writable: false,\n        enumerable: false,\n        configurable: true\n      });\n      \n      return { ...col, cellStyle: cellStyleFn };\n    });\n    \n    // Only return new array if changes were made\n    return hasChanges ? processed : columns;\n  }, [columns]);\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/hooks/useGridCallbacks.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'gridApiRef'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [activeProfile, gridApiRef, setSelectedFont]","fix":{"range":[2185,2217],"text":"[activeProfile, gridApiRef, setSelectedFont]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3853,3856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3853,3856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4249,4252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4249,4252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useMemo } from 'react';\nimport { GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { profileOptimizer } from '@/lib/profile-optimizer';\nimport { useActiveProfile } from '@/stores/profile.store';\n\n/**\n * Custom hook for memoized grid callbacks to prevent unnecessary re-renders\n */\nexport function useGridCallbacks(\n  gridApiRef: React.MutableRefObject<GridApi | null>,\n  setSelectedFont: (font: string) => void\n) {\n  const activeProfile = useActiveProfile();\n  \n  // Context menu items - memoized as they never change\n  const getContextMenuItems = useCallback(() => {\n    return [\n      \"autoSizeAll\",\n      \"resetColumns\",\n      \"separator\",\n      \"copy\",\n      \"copyWithHeaders\",\n      \"paste\",\n      \"separator\",\n      \"export\",\n    ];\n  }, []);\n  \n  // Grid ready handler\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\n    gridApiRef.current = params.api;\n    \n    console.log('[useGridCallbacks] onGridReady:', {\n      hasActiveProfile: !!activeProfile,\n      activeProfileId: activeProfile?.id,\n      activeProfileName: activeProfile?.name,\n      hasGridState: !!activeProfile?.gridState\n    });\n    \n    // Load active profile on grid ready using the optimizer\n    if (activeProfile && activeProfile.gridState) {\n      // The column definitions are already set in the grid from the initial state\n      // Just apply the grid states (column state, filters, sorts)\n      await profileOptimizer.applyProfile(\n        params.api,\n        activeProfile,\n        null, // No previous profile on initial load\n        {\n          showTransition: false, // No transition on initial load\n          onProgress: (progress) => {\n            console.log(`[useGridCallbacks] Initial profile load progress: ${Math.round(progress * 100)}%`);\n          }\n        }\n      );\n      \n      // Apply font immediately (doesn't depend on grid state)\n      if (activeProfile.gridState.font) {\n        console.log('[useGridCallbacks] Applying font:', activeProfile.gridState.font);\n        setSelectedFont(activeProfile.gridState.font);\n      }\n    } else {\n      console.log('[useGridCallbacks] No active profile or gridState to apply');\n    }\n  }, [activeProfile, setSelectedFont]);\n  \n  // Column event handlers - no auto-save, only saved when Save Profile button is clicked\n  const onColumnMoved = useCallback(() => {\n    // State changes are only saved when Save Profile button is clicked\n  }, []);\n  \n  const onColumnResized = useCallback(() => {\n    // State changes are only saved when Save Profile button is clicked\n  }, []);\n  \n  const onColumnVisible = useCallback(() => {\n    // State changes are only saved when Save Profile button is clicked\n  }, []);\n  \n  const onToolPanelVisibleChanged = useCallback(() => {\n    // State changes are only saved when Save Profile button is clicked\n  }, []);\n  \n  const onSortChanged = useCallback(() => {\n    // State changes are only saved when Save Profile button is clicked\n  }, []);\n  \n  const onFilterChanged = useCallback(() => {\n    // State changes are only saved when Save Profile button is clicked\n  }, []);\n  \n  // Excel export styles\n  const excelStyles = useMemo(() => [\n    {\n      id: 'header',\n      font: { bold: true },\n      alignment: { horizontal: 'Center' as const, vertical: 'Center' as const }\n    },\n    {\n      id: 'ag-numeric-cell',\n      alignment: { horizontal: 'Right' as const }\n    },\n    {\n      id: 'ag-currency-cell',\n      numberFormat: { format: '$#,##0.00' },\n      alignment: { horizontal: 'Right' as const }\n    },\n    {\n      id: 'ag-percentage-cell',\n      numberFormat: { format: '0.00%' },\n      alignment: { horizontal: 'Right' as const }\n    }\n  ], []);\n  \n  // Default Excel export params\n  const defaultExcelExportParams = useMemo(() => ({\n    // Apply column formatting to Excel export\n    processCellCallback: (params: any) => {\n      const colDef = params.column.getColDef();\n      // Use valueFormatter for export if available\n      if (colDef.valueFormatter) {\n        return typeof colDef.valueFormatter === 'function'\n          ? colDef.valueFormatter(params)\n          : params.value;\n      }\n      return params.value;\n    },\n    // Include column headers with formatting\n    processHeaderCallback: (params: any) => {\n      return params.column.getColDef().headerName || params.column.getColId();\n    }\n  }), []);\n  \n  return {\n    // Event handlers\n    getContextMenuItems,\n    onGridReady,\n    onColumnMoved,\n    onColumnResized,\n    onColumnVisible,\n    onToolPanelVisibleChanged,\n    onSortChanged,\n    onFilterChanged,\n    \n    // Export configuration\n    excelStyles,\n    defaultExcelExportParams,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/hooks/useGridState.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1298,1301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1298,1301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { useProfileStore, useActiveProfile } from '@/stores/profile.store';\nimport { ColumnDef } from '../types';\n\n/**\n * Custom hook for managing DataTable grid state\n */\nexport function useGridState(initialColumnDefs: ColumnDef[]) {\n  const activeProfile = useActiveProfile();\n  const { getColumnDefs } = useProfileStore();\n  \n  // Initialize font from active profile\n  const [selectedFont, setSelectedFont] = useState(() => {\n    return activeProfile?.gridState?.font || 'monospace';\n  });\n  \n  // Dialog visibility\n  const [showColumnDialog, setShowColumnDialog] = useState(false);\n  \n  // Initialize column definitions from profile or use defaults\n  const [currentColumnDefs, setCurrentColumnDefs] = useState<ColumnDef[]>(() => {\n    // Try to get column definitions from profile (will use lightweight format if available)\n    const savedColumnDefs = getColumnDefs();\n    \n    if (savedColumnDefs && savedColumnDefs.length > 0) {\n      console.log('[useGridState] Initializing with saved columnDefs from profile:', {\n        profileName: activeProfile?.name,\n        columnCount: savedColumnDefs.length,\n        hasLightweightFormat: !!(activeProfile?.gridState?.columnCustomizations),\n        columnsWithFormatters: savedColumnDefs.filter((col: any) => col.valueFormatter).length,\n      });\n      \n      return savedColumnDefs as ColumnDef[];\n    }\n    \n    console.log('[useGridState] Initializing with default columnDefs');\n    return initialColumnDefs;\n  });\n  \n  // Font change handler\n  const handleFontChange = useCallback((font: string) => {\n    setSelectedFont(font);\n    // Font changes are only saved when Save Profile button is clicked\n  }, []);\n  \n  // Update column definitions\n  const updateColumnDefs = useCallback((columns: ColumnDef[]) => {\n    setCurrentColumnDefs(columns);\n  }, []);\n  \n  return {\n    // State\n    currentColumnDefs,\n    selectedFont,\n    showColumnDialog,\n    \n    // Actions\n    setCurrentColumnDefs: updateColumnDefs,\n    setSelectedFont: handleFontChange,\n    setShowColumnDialog,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/hooks/useProfileSync.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/lazy-ag-grid.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":95,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":95,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":100,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":100,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { lazy, useEffect } from 'react';\nimport { Skeleton } from '@/components/ui/skeleton';\n\n// Lazy load AG-Grid modules\nconst loadAgGridModules = () => {\n  // perfMonitor.mark('ag-grid-load-start');\n  \n  return Promise.all([\n    import('ag-grid-community'),\n    import('ag-grid-enterprise'),\n    import('ag-grid-react')\n  ]).then(([community, enterprise, react]) => {\n    // Register modules\n    community.ModuleRegistry.registerModules([enterprise.AllEnterpriseModule]);\n    \n    // perfMonitor.mark('ag-grid-load-end');\n    // perfMonitor.measure('agGridLoadTime', 'ag-grid-load-start', 'ag-grid-load-end');\n    \n    return {\n      ...community,\n      ...enterprise,\n      AgGridReact: react.AgGridReact\n    };\n  });\n};\n\n// Grid skeleton component\nexport const GridSkeleton = () => {\n  return (\n    <div className=\"h-full w-full flex flex-col p-4 space-y-4\">\n      {/* Toolbar skeleton */}\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <Skeleton className=\"h-9 w-32\" />\n          <Skeleton className=\"h-9 w-24\" />\n          <Skeleton className=\"h-9 w-24\" />\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Skeleton className=\"h-9 w-36\" />\n          <Skeleton className=\"h-9 w-32\" />\n        </div>\n      </div>\n      \n      {/* Grid skeleton */}\n      <div className=\"flex-1 border rounded-md overflow-hidden\">\n        {/* Header */}\n        <div className=\"h-12 bg-muted/50 border-b flex\">\n          {Array.from({ length: 8 }).map((_, i) => (\n            <div key={i} className=\"flex-1 p-3 border-r\">\n              <Skeleton className=\"h-4 w-full\" />\n            </div>\n          ))}\n        </div>\n        \n        {/* Rows */}\n        <div className=\"space-y-0\">\n          {Array.from({ length: 12 }).map((_, rowIndex) => (\n            <div key={rowIndex} className=\"h-10 border-b flex\">\n              {Array.from({ length: 8 }).map((_, colIndex) => (\n                <div key={colIndex} className=\"flex-1 p-2 border-r\">\n                  <Skeleton className=\"h-4 w-full\" />\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Loading indicator */}\n      <div className=\"absolute inset-0 flex items-center justify-center bg-background/80 backdrop-blur-sm\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-sm text-muted-foreground\">Loading grid...</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Export the lazy-loaded DataTable\nexport const LazyDataTable = lazy(() => {\n  // perfMonitor.mark('datatable-import-start');\n  \n  return import('./data-table').then(module => {\n    // perfMonitor.mark('datatable-import-end');\n    // perfMonitor.measure('dataTableImportTime', 'datatable-import-start', 'datatable-import-end');\n    \n    return {\n      default: module.DataTable\n    };\n  });\n});\n\n// Preload AG-Grid modules function\nexport const preloadAgGrid = () => {\n  return loadAgGridModules();\n};\n\n// Hook to preload on idle\nexport const usePreloadAgGrid = () => {\n  useEffect(() => {\n    if ('requestIdleCallback' in window) {\n      const handle = requestIdleCallback(() => {\n        preloadAgGrid();\n      }, { timeout: 2000 });\n      \n      return () => cancelIdleCallback(handle);\n    } else {\n      // Fallback for browsers without requestIdleCallback\n      const timer = setTimeout(() => {\n        preloadAgGrid();\n      }, 1000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, []);\n};","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/profile-manager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3024,3027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3024,3027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ValueFormatterParams, CellStyleParams, ColDef as AgColDef } from 'ag-grid-community';\n\n/**\n * Enhanced column definition with required fields\n */\nexport interface ColumnDef extends Omit<AgColDef, 'field' | 'headerName' | 'type'> {\n  field: string;\n  headerName: string;\n  type?: string | string[]; // For legacy/custom use\n  cellDataType?: 'text' | 'number' | 'date' | 'boolean' | string | boolean; // ag-Grid v33+ optimization\n}\n\n/**\n * Metadata attached to formatter functions for serialization\n */\nexport interface FormatterMetadata {\n  __formatString: string;\n  __formatterType: 'excel' | 'visual' | 'custom';\n  __visualRules?: SerializedFormattingRule[];\n  __visualDefaultFallback?: SerializedDefaultFallback;\n}\n\n/**\n * Metadata attached to cell style functions\n */\nexport interface CellStyleMetadata {\n  __formatString?: string;\n  __baseStyle?: React.CSSProperties;\n  __cacheKey?: string;\n}\n\n/**\n * Enhanced formatter function type with metadata\n */\nexport type FormatterFunction = ((params: ValueFormatterParams) => string) & FormatterMetadata;\n\n/**\n * Enhanced cell style function type with metadata\n */\nexport type CellStyleFunction = ((params: CellStyleParams) => React.CSSProperties | undefined) & CellStyleMetadata;\n\n/**\n * Serialized formatting rule for visual formatter\n */\nexport interface SerializedFormattingRule {\n  id: string;\n  condition: {\n    type: 'equals' | 'contains' | 'startsWith' | 'endsWith' | 'greaterThan' | 'lessThan' | 'greaterEqual' | 'lessEqual' | 'between' | 'isEmpty' | 'isNotEmpty';\n    value: string;\n    value2?: string;\n  };\n  display: {\n    type: 'text' | 'original' | 'custom';\n    text: string;\n  };\n  styling: {\n    backgroundColor?: string;\n    textColor?: string;\n    fontSize?: number;\n    fontWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n    fontStyle?: 'normal' | 'italic';\n    textDecoration?: 'none' | 'underline' | 'line-through';\n    textAlign?: 'left' | 'center' | 'right';\n    border?: {\n      width: number;\n      style: 'solid' | 'dashed' | 'dotted' | 'double';\n      color: string;\n      sides: {\n        top: boolean;\n        right: boolean;\n        bottom: boolean;\n        left: boolean;\n      };\n    };\n    padding?: {\n      top: number;\n      right: number;\n      bottom: number;\n      left: number;\n    };\n  };\n  enabled: boolean;\n}\n\n/**\n * Serialized default fallback for visual formatter\n */\nexport interface SerializedDefaultFallback {\n  display: {\n    type: 'original' | 'text';\n    text: string;\n  };\n  styling: SerializedFormattingRule['styling'];\n}\n\n/**\n * Props for DataTable component\n */\nexport interface DataTableProps {\n  columnDefs: ColumnDef[];\n  dataRow: Record<string, unknown>[];\n}\n\n/**\n * Context value for DataTable\n */\nexport interface DataTableContextValue {\n  processedColumns: ColumnDef[];\n  selectedFont: string;\n  handleFontChange: (font: string) => void;\n  showColumnDialog: boolean;\n  setShowColumnDialog: (show: boolean) => void;\n  gridApiRef: React.MutableRefObject<any | null>;\n  getColumnDefsWithStyles: () => ColumnDef[];\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/utils/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/utils/style-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/datatable/utils/type-guards.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[733,736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[733,736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[766,769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[766,769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[876,879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[876,879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[923,926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[923,926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[969,972],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[969,972],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1023,1026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1023,1026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1362,1365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1362,1365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1405,1408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1405,1408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1444,1447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1444,1447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FormatterFunction, CellStyleFunction } from '../types';\n\n/**\n * Type guard to check if a function is a formatter with metadata\n */\nexport function isFormatterFunction(fn: unknown): fn is FormatterFunction {\n  return typeof fn === 'function' && '__formatString' in fn;\n}\n\n/**\n * Type guard to check if a function is a cell style function with metadata\n */\nexport function isCellStyleFunction(fn: unknown): fn is CellStyleFunction {\n  return typeof fn === 'function' && ('__formatString' in fn || '__baseStyle' in fn);\n}\n\n/**\n * Safely extract formatter metadata from a function\n */\nexport function getFormatterMetadata(fn: unknown): {\n  formatString?: string;\n  formatterType?: 'excel' | 'visual' | 'custom';\n  visualRules?: any[];\n  visualDefaultFallback?: any;\n} | null {\n  if (!isFormatterFunction(fn)) {\n    return null;\n  }\n  \n  return {\n    formatString: (fn as any).__formatString,\n    formatterType: (fn as any).__formatterType,\n    visualRules: (fn as any).__visualRules,\n    visualDefaultFallback: (fn as any).__visualDefaultFallback,\n  };\n}\n\n/**\n * Safely extract cell style metadata from a function\n */\nexport function getCellStyleMetadata(fn: unknown): {\n  formatString?: string;\n  baseStyle?: React.CSSProperties;\n  cacheKey?: string;\n} | null {\n  if (!isCellStyleFunction(fn)) {\n    return null;\n  }\n  \n  return {\n    formatString: (fn as any).__formatString,\n    baseStyle: (fn as any).__baseStyle,\n    cacheKey: (fn as any).__cacheKey,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/theme-provider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":50,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":50,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light';\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  enableSystem?: boolean;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: 'dark',\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'dark',\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(defaultTheme);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error('useTheme must be used within a ThemeProvider');\n\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive:\n          'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',\n        outline: 'text-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":57,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":57,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',\n        outline:\n          'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'h-9 w-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":169,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":169,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { Slot } from '@radix-ui/react-slot';\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from 'react-hook-form';\n\nimport { cn } from '@/lib/utils';\nimport { Label } from '@/components/ui/label';\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>');\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n);\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn('space-y-2', className)} {...props} />\n    </FormItemContext.Provider>\n  );\n});\nFormItem.displayName = 'FormItem';\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && 'text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n});\nFormLabel.displayName = 'FormLabel';\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n});\nFormControl.displayName = 'FormControl';\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn('text-[0.8rem] text-muted-foreground', className)}\n      {...props}\n    />\n  );\n});\nFormDescription.displayName = 'FormDescription';\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn('text-[0.8rem] font-medium text-destructive', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n});\nFormMessage.displayName = 'FormMessage';\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\nimport * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';\nimport { cva } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      'relative z-10 flex max-w-max flex-1 items-center justify-center',\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      'group flex flex-1 list-none items-center justify-center space-x-1',\n      className\n    )}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), 'group', className)}\n    {...props}\n  >\n    {children}{' '}\n    <ChevronDownIcon\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',\n      className\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn('absolute left-0 top-full flex justify-center')}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":769,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":769,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\nimport { ViewVerticalIcon } from \"@radix-ui/react-icons\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <ViewVerticalIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport * as TogglePrimitive from '@radix-ui/react-toggle';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst toggleVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-9 px-3',\n        sm: 'h-8 px-2',\n        lg: 'h-10 px-3',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/lib/data-generator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/lib/performance-monitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1780,1783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1780,1783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Performance monitoring utility\nexport interface PerformanceMetrics {\n  appStartTime: number;\n  gridInitTime?: number;\n  profileLoadTime?: number;\n  dataGenerationTime?: number;\n  firstRenderTime?: number;\n  fullyLoadedTime?: number;\n  [key: string]: number | undefined;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetrics;\n  private marks: Map<string, number> = new Map();\n\n  constructor() {\n    this.metrics = {\n      appStartTime: performance.now()\n    };\n  }\n\n  mark(name: string) {\n    const time = performance.now();\n    this.marks.set(name, time);\n    // console.log(`[Performance] ${name}: ${time.toFixed(2)}ms`);\n  }\n\n  measure(name: string, startMark: string, endMark?: string) {\n    const startTime = this.marks.get(startMark) || 0;\n    const endTime = endMark ? (this.marks.get(endMark) || performance.now()) : performance.now();\n    const duration = endTime - startTime;\n    \n    this.metrics[name] = duration;\n    // console.log(`[Performance] ${name}: ${duration.toFixed(2)}ms`);\n    \n    return duration;\n  }\n\n  measureFromStart(name: string) {\n    const duration = performance.now() - this.metrics.appStartTime;\n    this.metrics[name] = duration;\n    // console.log(`[Performance] ${name} from start: ${duration.toFixed(2)}ms`);\n    return duration;\n  }\n\n  getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  logSummary() {\n    // console.group('📊 Performance Summary');\n    // Object.entries(this.metrics).forEach(([key, value]) => {\n    //   if (value !== undefined) {\n    //     console.log(`${key}: ${value.toFixed(2)}ms`);\n    //   }\n    // });\n    // console.groupEnd();\n  }\n}\n\nexport const perfMonitor = new PerformanceMonitor();\n\n// Export to window for debugging\nif (typeof window !== 'undefined') {\n  (window as any).perfMonitor = perfMonitor;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/lib/performance-test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3681,3684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3681,3684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3756,3759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3756,3759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3908,3911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3908,3911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Performance testing utilities\nimport { perfMonitor } from './performance-monitor';\n\nexport interface PerformanceTestResult {\n  testName: string;\n  metrics: {\n    [key: string]: number;\n  };\n  timestamp: number;\n  userAgent: string;\n}\n\nclass PerformanceTester {\n  private results: PerformanceTestResult[] = [];\n\n  async runLoadTest(): Promise<PerformanceTestResult> {\n    const testName = 'Page Load Performance';\n    const metrics = perfMonitor.getMetrics();\n    \n    // Calculate derived metrics\n    const derivedMetrics = {\n      ...metrics,\n      totalLoadTime: metrics.fullyLoadedTime || 0,\n      gridLoadTime: (metrics.gridInitTime || 0) - (metrics.appStartTime || 0),\n      dataGenTime: metrics.dataGenerationTime || 0,\n      profileLoadOverhead: metrics.profileLoadTime || 0,\n      perceivedLoadTime: metrics.firstRenderTime || 0,\n    };\n\n    const result: PerformanceTestResult = {\n      testName,\n      metrics: derivedMetrics,\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n    };\n\n    this.results.push(result);\n    return result;\n  }\n\n  async runProfileSwitchTest(profileId: string): Promise<PerformanceTestResult> {\n    const startTime = performance.now();\n    \n    // This would need to be integrated with the actual profile switching logic\n    // For now, we'll just measure the time it takes to switch profiles\n    \n    const endTime = performance.now();\n    const switchTime = endTime - startTime;\n\n    const result: PerformanceTestResult = {\n      testName: 'Profile Switch Performance',\n      metrics: {\n        profileSwitchTime: switchTime,\n        profileId: profileId.length, // Just for reference\n      },\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n    };\n\n    this.results.push(result);\n    return result;\n  }\n\n  getResults(): PerformanceTestResult[] {\n    return [...this.results];\n  }\n\n  generateReport(): string {\n    const report = ['# Performance Test Report', ''];\n    \n    this.results.forEach((result, index) => {\n      report.push(`## Test ${index + 1}: ${result.testName}`);\n      report.push(`Timestamp: ${new Date(result.timestamp).toISOString()}`);\n      report.push('');\n      report.push('### Metrics:');\n      \n      Object.entries(result.metrics).forEach(([key, value]) => {\n        if (typeof value === 'number') {\n          report.push(`- ${key}: ${value.toFixed(2)}ms`);\n        }\n      });\n      \n      report.push('');\n    });\n\n    // Summary statistics\n    if (this.results.length > 0) {\n      report.push('## Summary');\n      report.push('');\n      \n      const loadTests = this.results.filter(r => r.testName === 'Page Load Performance');\n      if (loadTests.length > 0) {\n        const avgTotalLoad = loadTests.reduce((sum, test) => \n          sum + (test.metrics.totalLoadTime || 0), 0) / loadTests.length;\n        const avgPerceivedLoad = loadTests.reduce((sum, test) => \n          sum + (test.metrics.perceivedLoadTime || 0), 0) / loadTests.length;\n        \n        report.push(`- Average Total Load Time: ${avgTotalLoad.toFixed(2)}ms`);\n        report.push(`- Average Perceived Load Time: ${avgPerceivedLoad.toFixed(2)}ms`);\n      }\n    }\n\n    return report.join('\\n');\n  }\n\n  logReport(): void {\n    console.group('📊 Performance Test Report');\n    \n    this.results.forEach((result, index) => {\n      console.group(`Test ${index + 1}: ${result.testName}`);\n      console.table(result.metrics);\n      console.log('Timestamp:', new Date(result.timestamp).toISOString());\n      console.groupEnd();\n    });\n    \n    console.groupEnd();\n  }\n}\n\nexport const perfTester = new PerformanceTester();\n\n// Export to window for easy access\nif (typeof window !== 'undefined') {\n  (window as any).perfTester = perfTester;\n  \n  // Add convenience methods\n  (window as any).runPerfTest = async () => {\n    const result = await perfTester.runLoadTest();\n    perfTester.logReport();\n    return result;\n  };\n  \n  (window as any).getPerfReport = () => {\n    return perfTester.generateReport();\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/lib/profile-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[815,818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[815,818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1027,1030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1027,1030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3002,3005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3002,3005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3047,3050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3047,3050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3094,3097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3094,3097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3307,3310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3307,3310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3864,3867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3864,3867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7953,7956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7953,7956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":402,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13722,13725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13722,13725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":444,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14924,14927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14924,14927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ColDef, ColumnState, SortModelItem, GridApi } from 'ag-grid-community';\nimport { GridProfile } from '@/stores/profile.store';\nimport { deserializeColumnCustomizations } from '@/stores/column-serializer';\nimport { createExcelFormatter } from '@/components/datatable/utils/formatters';\n\ninterface ProfileCache {\n  processedColumnDefs: ColDef[];\n  columnStateHash: string;\n  filterModelHash: string;\n  sortModelHash: string;\n  timestamp: number;\n}\n\ninterface ProfileDiff {\n  columnDefsChanged: boolean;\n  columnStateChanged: boolean;\n  filterModelChanged: boolean;\n  sortModelChanged: boolean;\n  gridOptionsChanged: boolean;\n  changes: {\n    addedColumns: string[];\n    removedColumns: string[];\n    modifiedColumns: string[];\n    columnStateChanges: Partial<ColumnState>[];\n    filterChanges: Record<string, any>;\n    sortChanges: SortModelItem[];\n  };\n}\n\nclass ProfileOptimizer {\n  private cache = new Map<string, ProfileCache>();\n  private currentProfileId: string | null = null;\n  private pendingUpdates: Map<string, any> = new Map();\n  private updateFrameId: number | null = null;\n  \n  // Pre-process profiles in background\n  async preprocessProfile(profile: GridProfile) {\n    if (this.cache.has(profile.id)) {\n      const cached = this.cache.get(profile.id)!;\n      // Cache is valid for 5 minutes\n      if (Date.now() - cached.timestamp < 5 * 60 * 1000) {\n        return;\n      }\n    }\n    \n    // Use requestIdleCallback for background processing\n    if ('requestIdleCallback' in window) {\n      requestIdleCallback(() => this.processProfile(profile), { timeout: 2000 });\n    } else {\n      setTimeout(() => this.processProfile(profile), 100);\n    }\n  }\n  \n  private processProfile(profile: GridProfile) {\n    // perfMonitor.mark('profile-process-start');\n    \n    let processedColumnDefs: ColDef[] = [];\n    \n    // Process column definitions\n    if (profile.gridState.columnCustomizations && profile.gridState.baseColumnDefs) {\n      processedColumnDefs = deserializeColumnCustomizations(\n        profile.gridState.columnCustomizations,\n        profile.gridState.baseColumnDefs\n      );\n    } else if (profile.gridState.columnDefs) {\n      processedColumnDefs = this.processLegacyColumnDefs(profile.gridState.columnDefs);\n    }\n    \n    // Create hashes for quick comparison\n    const columnStateHash = this.hashObject(profile.gridState.columnState || []);\n    const filterModelHash = this.hashObject(profile.gridState.filterModel || {});\n    const sortModelHash = this.hashObject(profile.gridState.sortModel || []);\n    \n    this.cache.set(profile.id, {\n      processedColumnDefs,\n      columnStateHash,\n      filterModelHash,\n      sortModelHash,\n      timestamp: Date.now()\n    });\n    \n          // perfMonitor.measure('profileProcessTime', 'profile-process-start');\n  }\n  \n  private processLegacyColumnDefs(columnDefs: ColDef[]): ColDef[] {\n    return columnDefs.map(col => {\n      const processed = { ...col };\n      \n      // Clean invalid properties\n      delete (processed as any).valueFormat;\n      delete (processed as any)._hasFormatter;\n      delete (processed as any).excelFormat;\n      \n      // Convert headerStyle objects back to functions\n      if (processed.headerStyle && typeof processed.headerStyle === 'object') {\n        const styleConfig = processed.headerStyle as any;\n        \n        if (styleConfig._isHeaderStyleConfig) {\n          processed.headerStyle = ((params: { floatingFilter?: boolean }) => {\n            if (params?.floatingFilter) {\n              return styleConfig.floating || null;\n            }\n            return styleConfig.regular || null;\n          }) as ColDef['headerStyle'];\n        }\n      }\n      \n      // Recreate valueFormatter from saved config\n      if (processed.valueFormatter && typeof processed.valueFormatter === 'object') {\n        const formatterConfig = processed.valueFormatter as any;\n        \n        if (formatterConfig._isFormatterConfig && formatterConfig.type === 'excel' && formatterConfig.formatString) {\n          // Recreate the formatter function\n          const formatter = createExcelFormatter(formatterConfig.formatString);\n          processed.valueFormatter = formatter;\n          // Value formatter will be used for export automatically\n        } else {\n          // Invalid formatter config, remove it\n          delete processed.valueFormatter;\n          // No export formatter needed\n        }\n      }\n      \n      return processed;\n    });\n  }\n  \n  // Calculate diff between current and target profile\n  calculateDiff(currentProfile: GridProfile | null, targetProfile: GridProfile): ProfileDiff {\n    const diff: ProfileDiff = {\n      columnDefsChanged: false,\n      columnStateChanged: false,\n      filterModelChanged: false,\n      sortModelChanged: false,\n      gridOptionsChanged: false,\n      changes: {\n        addedColumns: [],\n        removedColumns: [],\n        modifiedColumns: [],\n        columnStateChanges: [],\n        filterChanges: {},\n        sortChanges: []\n      }\n    };\n    \n    if (!currentProfile) {\n      // Everything is new\n      diff.columnDefsChanged = true;\n      diff.columnStateChanged = true;\n      diff.filterModelChanged = !!targetProfile.gridState.filterModel;\n      diff.sortModelChanged = !!targetProfile.gridState.sortModel?.length;\n      diff.gridOptionsChanged = !!targetProfile.gridState.gridOptions;\n      return diff;\n    }\n    \n    // Compare column definitions\n    const currentCache = this.cache.get(currentProfile.id);\n    const targetCache = this.cache.get(targetProfile.id);\n    \n    if (!currentCache || !targetCache || \n        currentCache.processedColumnDefs.length !== targetCache.processedColumnDefs.length) {\n      diff.columnDefsChanged = true;\n    } else {\n      // Deep comparison of column definitions\n      for (let i = 0; i < currentCache.processedColumnDefs.length; i++) {\n        const current = currentCache.processedColumnDefs[i];\n        const target = targetCache.processedColumnDefs[i];\n        \n        if (JSON.stringify(current) !== JSON.stringify(target)) {\n          diff.columnDefsChanged = true;\n          diff.changes.modifiedColumns.push(current.field || '');\n        }\n      }\n    }\n    \n    // Compare states using hashes\n    diff.columnStateChanged = currentCache?.columnStateHash !== targetCache?.columnStateHash;\n    diff.filterModelChanged = currentCache?.filterModelHash !== targetCache?.filterModelHash;\n    diff.sortModelChanged = currentCache?.sortModelHash !== targetCache?.sortModelHash;\n    \n    // Compare grid options\n    diff.gridOptionsChanged = JSON.stringify(currentProfile.gridState.gridOptions) !== \n                             JSON.stringify(targetProfile.gridState.gridOptions);\n    \n    return diff;\n  }\n  \n  // Apply profile with optimizations\n  async applyProfile(\n    gridApi: GridApi,\n    profile: GridProfile,\n    currentProfile: GridProfile | null,\n    options: {\n      showTransition?: boolean;\n      onProgress?: (progress: number) => void;\n    } = {}\n  ) {\n    const startTime = performance.now();\n    // perfMonitor.mark('profile-switch-start');\n    \n    // Ensure profile is preprocessed\n    if (!this.cache.has(profile.id)) {\n      await this.processProfile(profile);\n    }\n    \n    const cached = this.cache.get(profile.id);\n    if (!cached) {\n      console.error('[ProfileOptimizer] Failed to cache profile:', profile.id);\n      return;\n    }\n    \n    // Calculate diff\n    const diff = this.calculateDiff(currentProfile, profile);\n    \n    // Show transition if needed\n    if (options.showTransition) {\n      this.showTransitionEffect(gridApi);\n    }\n    \n    // Optimistic update - immediately update visual indicators\n    this.currentProfileId = profile.id;\n    \n    // Batch all updates\n    this.batchUpdates(() => {\n      let progress = 0;\n      const totalSteps = Object.keys(diff).filter(key => diff[key as keyof ProfileDiff]).length;\n      \n      // Collect all updates to apply in a single transaction\n      const gridUpdates: any = {};\n      let needsHeaderRefresh = false;\n      let needsFilterRefresh = false;\n      \n      // Step 1: Prepare column definitions if changed\n      if (diff.columnDefsChanged && cached.processedColumnDefs.length > 0) {\n        // Get current defaultColDef to ensure it's preserved\n        const defaultColDef = gridApi.getGridOption('defaultColDef') || {\n          minWidth: 100,\n          filter: true,\n          floatingFilter: true,\n          enableValue: true,\n          enableRowGroup: true,\n          enablePivot: true,\n          resizable: true,\n          sortable: true,\n          useValueFormatterForExport: true,\n        };\n        \n        gridUpdates.columnDefs = cached.processedColumnDefs;\n        gridUpdates.defaultColDef = defaultColDef;\n        \n        // Check if we need header refresh\n        needsHeaderRefresh = cached.processedColumnDefs.some(col => \n          col.floatingFilter !== false || col.headerStyle\n        );\n        \n        progress++;\n        options.onProgress?.(progress / totalSteps);\n      }\n      \n      // Apply all grid updates in one call\n      if (Object.keys(gridUpdates).length > 0) {\n        gridApi.updateGridOptions(gridUpdates);\n      }\n      \n      // Batch all remaining state updates into a single operation\n      this.scheduleUpdate('profileState', () => {\n        // Apply column state, sort, and filter in optimal order\n        \n        // 1. Column state (includes visibility, width, position)\n        if (diff.columnStateChanged && profile.gridState.columnState) {\n          gridApi.applyColumnState({\n            state: profile.gridState.columnState,\n            applyOrder: true\n          });\n          progress++;\n          options.onProgress?.(progress / totalSteps);\n        }\n        \n        // 2. Sort model (part of column state)\n        if (diff.sortModelChanged && profile.gridState.sortModel?.length > 0) {\n          const sortState = profile.gridState.sortModel.map(sort => ({\n            colId: sort.colId,\n            sort: sort.sort,\n            sortIndex: sort.sortIndex\n          }));\n          gridApi.applyColumnState({ state: sortState });\n          progress++;\n          options.onProgress?.(progress / totalSteps);\n        }\n        \n        // 3. Filter model (apply after column state)\n        if (diff.filterModelChanged) {\n          gridApi.setFilterModel(profile.gridState.filterModel || {});\n          needsFilterRefresh = true;\n          progress++;\n          options.onProgress?.(progress / totalSteps);\n        }\n        \n        // 4. Single refresh at the end if needed\n        if (needsHeaderRefresh || needsFilterRefresh) {\n          requestAnimationFrame(() => {\n            if (needsHeaderRefresh) {\n              gridApi.refreshHeader();\n            }\n            if (needsFilterRefresh) {\n              // In AG-Grid v33, refreshFilters doesn't exist\n              // Instead, we notify that filters have changed\n              gridApi.onFilterChanged();\n            }\n          });\n        }\n      }, 1); // High priority\n      \n      // Apply grid options if changed\n      if (diff.gridOptionsChanged && profile.gridState.gridOptions) {\n        this.scheduleUpdate('gridOptions', () => {\n          const options = profile.gridState.gridOptions!;\n          if (options.rowHeight) {\n            gridApi.resetRowHeights();\n            gridApi.setGridOption('rowHeight', options.rowHeight);\n          }\n          if (options.headerHeight) {\n            gridApi.setGridOption('headerHeight', options.headerHeight);\n          }\n        }, 4);\n      }\n    });\n    \n    // Log performance metrics\n    const endTime = performance.now();\n    const switchTime = endTime - startTime;\n    \n    console.log('[ProfileOptimizer] Profile switch completed:', {\n      profileId: profile.id,\n      profileName: profile.name,\n      switchTime: `${switchTime.toFixed(1)}ms`,\n      operations: {\n        columnDefsChanged: diff.columnDefsChanged,\n        columnStateChanged: diff.columnStateChanged,\n        filterModelChanged: diff.filterModelChanged,\n        sortModelChanged: diff.sortModelChanged,\n        gridOptionsChanged: diff.gridOptionsChanged\n      }\n    });\n    \n    // perfMonitor.measure('profileSwitchTime', 'profile-switch-start');\n  }\n  \n  private batchUpdates(callback: () => void) {\n    // Cancel any pending frame\n    if (this.updateFrameId !== null) {\n      cancelAnimationFrame(this.updateFrameId);\n    }\n    \n    callback();\n    \n    // Process updates in next animation frame\n    this.updateFrameId = requestAnimationFrame(() => {\n      this.processPendingUpdates();\n    });\n  }\n  \n  private scheduleUpdate(key: string, update: () => void, priority: number = 0) {\n    this.pendingUpdates.set(key, { update, priority });\n  }\n  \n  private processPendingUpdates() {\n    // Sort updates by priority\n    const updates = Array.from(this.pendingUpdates.entries())\n      .sort((a, b) => a[1].priority - b[1].priority);\n    \n    // Execute updates\n    updates.forEach(([key, { update }]) => {\n      try {\n        update();\n      } catch (error) {\n        console.error(`[ProfileOptimizer] Error applying ${key}:`, error);\n      }\n    });\n    \n    this.pendingUpdates.clear();\n    this.updateFrameId = null;\n  }\n  \n  private showTransitionEffect(_gridApi: GridApi) {\n    // Get the grid wrapper element\n    const gridElement = document.querySelector('.ag-root-wrapper') as HTMLElement;\n    if (!gridElement) return;\n    \n    // Use CSS classes for better performance\n    gridElement.classList.add('profile-switching');\n    \n    // Remove class after animation completes\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        gridElement.classList.remove('profile-switching');\n      });\n    });\n  }\n  \n  private hashObject(obj: any): string {\n    return JSON.stringify(obj).split('').reduce((a, b) => {\n      a = ((a << 5) - a) + b.charCodeAt(0);\n      return a & a;\n    }, 0).toString(36);\n  }\n  \n  // Clear cache for a specific profile\n  clearCache(profileId?: string) {\n    if (profileId) {\n      this.cache.delete(profileId);\n    } else {\n      this.cache.clear();\n    }\n  }\n  \n  // Preload all profiles\n  async preloadAllProfiles(profiles: GridProfile[]) {\n    // Process profiles in batches during idle time\n    const batchSize = 2;\n    for (let i = 0; i < profiles.length; i += batchSize) {\n      const batch = profiles.slice(i, i + batchSize);\n      \n      if ('requestIdleCallback' in window) {\n        await new Promise(resolve => {\n          requestIdleCallback(() => {\n            batch.forEach(profile => this.processProfile(profile));\n            resolve(undefined);\n          }, { timeout: 1000 });\n        });\n      } else {\n        batch.forEach(profile => this.processProfile(profile));\n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n    }\n  }\n}\n\nexport const profileOptimizer = new ProfileOptimizer();\n\n// Export to window for debugging\nif (typeof window !== 'undefined') {\n  (window as any).profileOptimizer = profileOptimizer;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/lib/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[372,375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[372,375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[382,385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[382,385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Debounce function that delays invoking func until after wait milliseconds\n * have elapsed since the last time the debounced function was invoked.\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout | undefined;\n\n  return function debounced(...args: Parameters<T>) {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, wait);\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/stores/column-serializer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3869,3872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3869,3872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6892,6895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6892,6895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6955,6958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6955,6958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7676,7679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7676,7679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":262,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7756,7759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7756,7759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8049,8052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8049,8052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":302,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8938,8941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8938,8941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":303,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9010,9013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9010,9013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":304,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9081,9084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9081,9084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":305,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9160,9163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9160,9163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":404,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13436,13439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13436,13439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":410,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":410,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13713,13716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13713,13716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":424,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14343,14346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14343,14346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":425,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":425,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14408,14411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14408,14411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":548,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":548,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19066,19069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19066,19069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":549,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":549,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19131,19134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19131,19134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":550,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19205,19208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19205,19208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ColDef } from 'ag-grid-community';\nimport { createExcelFormatter, createCellStyleFunction } from '@/components/datatable/utils/formatters';\nimport { hasConditionalStyling } from '@/components/datatable/utils/style-utils';\n\n// Minimal types for visual formatter data (to avoid circular imports)\ninterface SerializedFormattingRule {\n  id: string;\n  condition: {\n    type: 'equals' | 'contains' | 'startsWith' | 'endsWith' | 'greaterThan' | 'lessThan' | 'greaterEqual' | 'lessEqual' | 'between' | 'isEmpty' | 'isNotEmpty';\n    value: string;\n    value2?: string;\n  };\n  display: {\n    type: 'text' | 'original' | 'custom';\n    text: string;\n  };\n  styling: {\n    backgroundColor?: string;\n    textColor?: string;\n    fontSize?: number;\n    fontWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n    fontStyle?: 'normal' | 'italic';\n    textDecoration?: 'none' | 'underline' | 'line-through';\n    textAlign?: 'left' | 'center' | 'right';\n    border?: {\n      width: number;\n      style: 'solid' | 'dashed' | 'dotted' | 'double';\n      color: string;\n      sides: {\n        top: boolean;\n        right: boolean;\n        bottom: boolean;\n        left: boolean;\n      };\n    };\n    padding?: {\n      top: number;\n      right: number;\n      bottom: number;\n      left: number;\n    };\n  };\n  enabled: boolean;\n}\n\ninterface SerializedDefaultFallback {\n  display: {\n    type: 'original' | 'text';\n    text: string;\n  };\n  styling: {\n    backgroundColor?: string;\n    textColor?: string;\n    fontSize?: number;\n    fontWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n    fontStyle?: 'normal' | 'italic';\n    textDecoration?: 'none' | 'underline' | 'line-through';\n    textAlign?: 'left' | 'center' | 'right';\n    border?: {\n      width: number;\n      style: 'solid' | 'dashed' | 'dotted' | 'double';\n      color: string;\n      sides: {\n        top: boolean;\n        right: boolean;\n        bottom: boolean;\n        left: boolean;\n      };\n    };\n    padding?: {\n      top: number;\n      right: number;\n      bottom: number;\n      left: number;\n    };\n  };\n}\n\n// Type for serialized column customizations\nexport interface ColumnCustomization {\n  // Identity\n  field: string;\n  \n  // Basic properties (only if changed from defaults)\n  headerName?: string;\n  width?: number;\n  minWidth?: number;\n  maxWidth?: number;\n  flex?: number;\n  \n  // Boolean flags (only if changed from defaults)\n  sortable?: boolean;\n  resizable?: boolean;\n  editable?: boolean;\n  filter?: boolean;\n  floatingFilter?: boolean;\n  hide?: boolean;\n  lockPosition?: boolean;\n  lockVisible?: boolean;\n  lockPinned?: boolean;\n  suppressHeaderMenuButton?: boolean;\n  \n  // Positioning\n  pinned?: 'left' | 'right' | null;\n  \n  // Styles (serialized format)\n  cellStyle?: {\n    type: 'static' | 'function';\n    value?: React.CSSProperties;\n    formatString?: string; // For conditional formatting\n    baseStyle?: React.CSSProperties;\n  };\n  headerStyle?: {\n    type: 'static' | 'function';\n    regular?: React.CSSProperties;\n    floating?: React.CSSProperties | null;\n  };\n  \n  // CSS Classes\n  cellClass?: string | string[];\n  headerClass?: string | string[];\n  \n  // Formatters (metadata only)\n  valueFormatter?: {\n    type: 'excel' | 'visual' | 'custom';\n    formatString?: string;\n    // Visual editor data (for full round-trip editing)\n    rules?: SerializedFormattingRule[];\n    defaultFallback?: SerializedDefaultFallback;\n  };\n  \n  // Cell data type\n  cellDataType?: 'text' | 'number' | 'date' | 'boolean';\n  \n  // Other commonly customized properties\n  headerTooltip?: string;\n  tooltipField?: string;\n  headerCheckboxSelection?: boolean;\n  checkboxSelection?: boolean;\n  rowGroup?: boolean;\n  pivot?: boolean;\n  aggFunc?: string | null;\n  \n  // Alignment classes\n  cellClassRules?: Record<string, any>;\n}\n\n// Default values for comparison\nconst COLUMN_DEFAULTS: Partial<ColDef> = {\n  sortable: true,\n  resizable: true,\n  filter: true,\n  floatingFilter: true,\n  editable: false,\n  hide: false,\n  lockPosition: false,\n  lockVisible: false,\n  lockPinned: false,\n  suppressHeaderMenuButton: false,\n  flex: 1,\n  minWidth: 100,\n};\n\n/**\n * Extract only the customized properties from a column definition\n */\nfunction extractCustomizations(col: ColDef, baseCol?: ColDef): ColumnCustomization {\n  const customization: ColumnCustomization = {\n    field: col.field!,\n  };\n  \n  // Compare against base column or defaults\n  const compareBase = baseCol || COLUMN_DEFAULTS;\n  \n  // Basic properties\n  if (col.headerName !== baseCol?.headerName && col.headerName !== col.field) {\n    customization.headerName = col.headerName;\n  }\n  \n  // Width properties\n  if (col.width !== undefined && col.width !== compareBase.width) {\n    customization.width = col.width;\n  }\n  if (col.minWidth !== undefined && col.minWidth !== compareBase.minWidth) {\n    customization.minWidth = col.minWidth;\n  }\n  if (col.maxWidth !== undefined && col.maxWidth !== compareBase.maxWidth) {\n    customization.maxWidth = col.maxWidth;\n  }\n  if (col.flex !== undefined && col.flex !== compareBase.flex) {\n    customization.flex = col.flex;\n  }\n  \n  // Boolean flags - only save if different from defaults\n  if (col.sortable !== undefined && col.sortable !== compareBase.sortable) {\n    customization.sortable = col.sortable;\n  }\n  if (col.resizable !== undefined && col.resizable !== compareBase.resizable) {\n    customization.resizable = col.resizable;\n  }\n  if (col.editable !== undefined && col.editable !== compareBase.editable) {\n    customization.editable = col.editable;\n  }\n  if (col.filter !== undefined && col.filter !== compareBase.filter) {\n    customization.filter = col.filter;\n  }\n  if (col.floatingFilter !== undefined && col.floatingFilter !== compareBase.floatingFilter) {\n    customization.floatingFilter = col.floatingFilter;\n  }\n  if (col.hide !== undefined && col.hide !== compareBase.hide) {\n    customization.hide = col.hide;\n  }\n  if (col.lockPosition !== undefined && col.lockPosition !== compareBase.lockPosition) {\n    customization.lockPosition = col.lockPosition;\n  }\n  if (col.lockVisible !== undefined && col.lockVisible !== compareBase.lockVisible) {\n    customization.lockVisible = col.lockVisible;\n  }\n  if (col.lockPinned !== undefined && col.lockPinned !== compareBase.lockPinned) {\n    customization.lockPinned = col.lockPinned;\n  }\n  if (col.suppressHeaderMenuButton !== undefined && col.suppressHeaderMenuButton !== compareBase.suppressHeaderMenuButton) {\n    customization.suppressHeaderMenuButton = col.suppressHeaderMenuButton;\n  }\n  \n  // Positioning\n  if (col.pinned !== undefined && col.pinned !== null) {\n    customization.pinned = col.pinned;\n  }\n  \n  // Cell style\n  if (col.cellStyle) {\n    if (typeof col.cellStyle === 'function') {\n      // Check if it has our metadata\n      const metadata = (col.cellStyle as any).__formatString;\n      const baseStyle = (col.cellStyle as any).__baseStyle;\n      console.log('[ColumnSerializer] Saving cellStyle function:', {\n        field: col.field,\n        hasMetadata: !!metadata,\n        formatString: metadata,\n        hasBaseStyle: !!baseStyle,\n        baseStyle\n      });\n      customization.cellStyle = {\n        type: 'function',\n        formatString: metadata,\n        baseStyle: baseStyle\n      };\n    } else {\n      customization.cellStyle = {\n        type: 'static',\n        value: col.cellStyle as React.CSSProperties\n      };\n    }\n  }\n  \n  // Header style\n  if (col.headerStyle) {\n    if (typeof col.headerStyle === 'function') {\n      // Try to extract the style config if it's our custom format\n      const testRegular = (col.headerStyle as any)({ floatingFilter: false });\n      const testFloating = (col.headerStyle as any)({ floatingFilter: true });\n      \n      customization.headerStyle = {\n        type: 'function',\n        regular: testRegular || undefined,\n        floating: testFloating || undefined\n      };\n    } else if (typeof col.headerStyle === 'object') {\n      const styleObj = col.headerStyle as any;\n      if (styleObj._isHeaderStyleConfig) {\n        customization.headerStyle = {\n          type: 'function',\n          regular: styleObj.regular,\n          floating: styleObj.floating\n        };\n      } else {\n        customization.headerStyle = {\n          type: 'static',\n          regular: col.headerStyle as React.CSSProperties\n        };\n      }\n    }\n  }\n  \n  // CSS Classes\n  if (col.cellClass) {\n    customization.cellClass = col.cellClass;\n  }\n  if (col.headerClass) {\n    customization.headerClass = col.headerClass;\n  }\n  \n  // Value formatter\n  if (col.valueFormatter) {\n    console.log('[ColumnSerializer] Processing valueFormatter for field:', col.field, {\n      type: typeof col.valueFormatter,\n      isFunction: typeof col.valueFormatter === 'function'\n    });\n    \n    if (typeof col.valueFormatter === 'function') {\n      const formatString = (col.valueFormatter as any).__formatString;\n      const formatterType = (col.valueFormatter as any).__formatterType;\n      const visualRules = (col.valueFormatter as any).__visualRules;\n      const visualDefaultFallback = (col.valueFormatter as any).__visualDefaultFallback;\n      \n      console.log('[ColumnSerializer] Function formatter metadata:', {\n        field: col.field,\n        hasFormatString: !!formatString,\n        formatString: formatString,\n        formatterType: formatterType,\n        hasVisualRules: !!visualRules,\n        hasDefaultFallback: !!visualDefaultFallback\n      });\n      \n      if (formatString) {\n        customization.valueFormatter = {\n          type: formatterType || 'excel',\n          formatString,\n          // Include visual editor data if available\n          ...(visualRules && { rules: visualRules }),\n          ...(visualDefaultFallback && { defaultFallback: visualDefaultFallback })\n        };\n        console.log('[ColumnSerializer] ✅ Serialized formatter for field:', col.field);\n      } else {\n        console.warn('[ColumnSerializer] ⚠️ Formatter function has no __formatString metadata for field:', col.field);\n        // Try to serialize as custom formatter without format string\n        customization.valueFormatter = {\n          type: 'custom',\n          formatString: `// Custom formatter function for ${col.field}\\n// (Function body not serializable)`\n        };\n        console.log('[ColumnSerializer] ⚠️ Serialized as custom formatter without metadata for field:', col.field);\n      }\n    } else if (typeof col.valueFormatter === 'object') {\n      // Handle saved formatter config\n      const config = col.valueFormatter as Record<string, unknown>;\n      console.log('[ColumnSerializer] Object formatter config:', config);\n      \n      if (config._isFormatterConfig) {\n        customization.valueFormatter = {\n          type: (config.type as 'excel' | 'visual' | 'custom') || 'excel',\n          formatString: config.formatString as string,\n          ...(config.rules && { rules: config.rules as SerializedFormattingRule[] }),\n          ...(config.defaultFallback && { defaultFallback: config.defaultFallback as SerializedDefaultFallback })\n        };\n        console.log('[ColumnSerializer] ✅ Serialized object formatter for field:', col.field);\n      } else {\n        console.warn('[ColumnSerializer] ⚠️ Object formatter is not a recognized config for field:', col.field);\n      }\n    } else {\n      console.warn('[ColumnSerializer] ⚠️ Unknown formatter type for field:', col.field, typeof col.valueFormatter);\n    }\n  }\n  \n  // Cell data type\n  if (col.cellDataType && col.cellDataType !== baseCol?.cellDataType) {\n    customization.cellDataType = col.cellDataType;\n  }\n  \n  // Other properties\n  if (col.headerTooltip) customization.headerTooltip = col.headerTooltip;\n  if (col.tooltipField) customization.tooltipField = col.tooltipField;\n  if (col.headerCheckboxSelection !== undefined) customization.headerCheckboxSelection = col.headerCheckboxSelection;\n  if (col.checkboxSelection !== undefined) customization.checkboxSelection = col.checkboxSelection;\n  if (col.rowGroup !== undefined) customization.rowGroup = col.rowGroup;\n  if (col.pivot !== undefined) customization.pivot = col.pivot;\n  if (col.aggFunc !== undefined) customization.aggFunc = col.aggFunc;\n  if (col.cellClassRules) customization.cellClassRules = col.cellClassRules;\n  \n  return customization;\n}\n\n/**\n * Serialize column customizations - only saves properties that differ from defaults\n */\nexport function serializeColumnCustomizations(\n  columns: ColDef[], \n  baseColumns?: ColDef[]\n): Record<string, ColumnCustomization> {\n  const customizations: Record<string, ColumnCustomization> = {};\n  \n  columns.forEach((col, _index) => {\n    if (!col.field) return;\n    \n    const baseCol = baseColumns?.find(base => base.field === col.field);\n    const extracted = extractCustomizations(col, baseCol);\n    \n    // Only include if there are actual customizations beyond the field\n    if (Object.keys(extracted).length > 1) {\n      customizations[col.field] = extracted;\n    }\n  });\n  \n  return customizations;\n}\n\n\n/**\n * Ensure a column has a cellStyle function if its valueFormatter has conditional styling\n */\nfunction ensureCellStyleForConditionalFormatting(merged: ColDef, _custom: ColumnCustomization): void {\n  // Check if valueFormatter has conditional styling\n  if (merged.valueFormatter && typeof merged.valueFormatter === 'function') {\n    const formatString = (merged.valueFormatter as any).__formatString;\n    \n    if (formatString && hasConditionalStyling(formatString)) {\n      // Check if cellStyle already exists and is properly configured\n      if (!merged.cellStyle || \n          (typeof merged.cellStyle === 'function' && \n           (merged.cellStyle as any).__formatString !== formatString)) {\n        \n        console.log('[ColumnSerializer] Creating cellStyle for conditional formatting:', {\n          field: merged.field,\n          formatString,\n          hasExistingCellStyle: !!merged.cellStyle,\n          existingCellStyleType: typeof merged.cellStyle\n        });\n        \n        // Extract base style if it exists\n        let baseStyle: React.CSSProperties = {};\n        if (merged.cellStyle) {\n          if (typeof merged.cellStyle === 'object') {\n            baseStyle = merged.cellStyle;\n          } else if (typeof merged.cellStyle === 'function' && (merged.cellStyle as any).__baseStyle) {\n            baseStyle = (merged.cellStyle as any).__baseStyle;\n          }\n        }\n        \n        // Create cellStyle function\n        const styleFunc = createCellStyleFunction(formatString, baseStyle);\n        \n        // Attach metadata for future serialization\n        Object.defineProperty(styleFunc, '__formatString', { \n          value: formatString, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        Object.defineProperty(styleFunc, '__baseStyle', { \n          value: baseStyle, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        \n        merged.cellStyle = styleFunc;\n      }\n    }\n  }\n}\n\n/**\n * Apply customizations to base columns\n */\nexport function deserializeColumnCustomizations(\n  customizations: Record<string, ColumnCustomization>,\n  baseColumns: ColDef[]\n): ColDef[] {\n  // Handle case where baseColumns is empty\n  if (!baseColumns || baseColumns.length === 0) {\n    console.warn('[ColumnSerializer] No base columns provided for deserialization');\n    return [];\n  }\n  \n  return baseColumns.map(baseCol => {\n    const field = baseCol.field;\n    if (!field || !customizations[field]) {\n      // Apply defaults even if no customizations\n      return {\n        ...baseCol,\n        ...COLUMN_DEFAULTS\n      };\n    }\n    \n    const custom = customizations[field];\n    // Start with base column merged with defaults\n    const merged: ColDef = { \n      ...COLUMN_DEFAULTS,\n      ...baseCol \n    };\n    \n    // Apply basic properties\n    if (custom.headerName !== undefined) merged.headerName = custom.headerName;\n    if (custom.width !== undefined) merged.width = custom.width;\n    if (custom.minWidth !== undefined) merged.minWidth = custom.minWidth;\n    if (custom.maxWidth !== undefined) merged.maxWidth = custom.maxWidth;\n    if (custom.flex !== undefined) merged.flex = custom.flex;\n    \n    // Apply boolean flags\n    if (custom.sortable !== undefined) merged.sortable = custom.sortable;\n    if (custom.resizable !== undefined) merged.resizable = custom.resizable;\n    if (custom.editable !== undefined) merged.editable = custom.editable;\n    if (custom.filter !== undefined) merged.filter = custom.filter;\n    if (custom.floatingFilter !== undefined) merged.floatingFilter = custom.floatingFilter;\n    if (custom.hide !== undefined) merged.hide = custom.hide;\n    if (custom.lockPosition !== undefined) merged.lockPosition = custom.lockPosition;\n    if (custom.lockVisible !== undefined) merged.lockVisible = custom.lockVisible;\n    if (custom.lockPinned !== undefined) merged.lockPinned = custom.lockPinned;\n    if (custom.suppressHeaderMenuButton !== undefined) merged.suppressHeaderMenuButton = custom.suppressHeaderMenuButton;\n    \n    // Apply positioning\n    if (custom.pinned !== undefined) merged.pinned = custom.pinned;\n    \n    // Apply cell style\n    if (custom.cellStyle) {\n      if (custom.cellStyle.type === 'static' && custom.cellStyle.value) {\n        merged.cellStyle = custom.cellStyle.value;\n      } else if (custom.cellStyle.type === 'function' && custom.cellStyle.formatString) {\n        console.log('[ColumnSerializer] Loading cellStyle function:', {\n          field,\n          formatString: custom.cellStyle.formatString,\n          hasBaseStyle: !!custom.cellStyle.baseStyle,\n          baseStyle: custom.cellStyle.baseStyle\n        });\n        // Recreate the cell style function\n        const styleFunc = createCellStyleFunction(custom.cellStyle.formatString, custom.cellStyle.baseStyle);\n        // Attach metadata for future serialization\n        Object.defineProperty(styleFunc, '__formatString', { \n          value: custom.cellStyle.formatString, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        Object.defineProperty(styleFunc, '__baseStyle', { \n          value: custom.cellStyle.baseStyle, \n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        merged.cellStyle = styleFunc;\n      }\n    }\n    \n    // Apply header style\n    if (custom.headerStyle) {\n      if (custom.headerStyle.type === 'static' && custom.headerStyle.regular) {\n        merged.headerStyle = custom.headerStyle.regular;\n      } else if (custom.headerStyle.type === 'function') {\n        // Create the header style function\n        merged.headerStyle = (params: { floatingFilter?: boolean }) => {\n          if (params?.floatingFilter) {\n            return custom.headerStyle?.floating || null;\n          }\n          return custom.headerStyle?.regular || null;\n        };\n        \n        // Also store as object format for persistence\n        (merged.headerStyle as any)._isHeaderStyleConfig = true;\n        (merged.headerStyle as any).regular = custom.headerStyle.regular;\n        (merged.headerStyle as any).floating = custom.headerStyle.floating;\n      }\n    }\n    \n    // Apply CSS classes\n    if (custom.cellClass !== undefined) merged.cellClass = custom.cellClass;\n    if (custom.headerClass !== undefined) merged.headerClass = custom.headerClass;\n    \n    // Apply value formatter\n    if (custom.valueFormatter && custom.valueFormatter.formatString) {\n      if (custom.valueFormatter.type === 'excel' || custom.valueFormatter.type === 'visual') {\n        console.log('[ColumnSerializer] Recreating formatter for field:', field, {\n          formatString: custom.valueFormatter.formatString,\n          type: custom.valueFormatter.type,\n          hasRules: !!custom.valueFormatter.rules,\n          hasDefaultFallback: !!custom.valueFormatter.defaultFallback\n        });\n        const formatter = createExcelFormatter(custom.valueFormatter.formatString);\n        \n        // Attach visual editor metadata if available\n        if (custom.valueFormatter.rules) {\n          Object.defineProperty(formatter, '__visualRules', { \n            value: custom.valueFormatter.rules, \n            writable: false,\n            enumerable: false,\n            configurable: true\n          });\n        }\n        \n        if (custom.valueFormatter.defaultFallback) {\n          Object.defineProperty(formatter, '__visualDefaultFallback', { \n            value: custom.valueFormatter.defaultFallback, \n            writable: false,\n            enumerable: false,\n            configurable: true\n          });\n        }\n        \n        merged.valueFormatter = formatter;\n        // Value formatter will be used for export automatically\n      }\n    }\n    \n    // Apply cell data type\n    if (custom.cellDataType !== undefined) merged.cellDataType = custom.cellDataType;\n    \n    // Apply other properties\n    if (custom.headerTooltip !== undefined) merged.headerTooltip = custom.headerTooltip;\n    if (custom.tooltipField !== undefined) merged.tooltipField = custom.tooltipField;\n    if (custom.headerCheckboxSelection !== undefined) merged.headerCheckboxSelection = custom.headerCheckboxSelection;\n    if (custom.checkboxSelection !== undefined) merged.checkboxSelection = custom.checkboxSelection;\n    if (custom.rowGroup !== undefined) merged.rowGroup = custom.rowGroup;\n    if (custom.pivot !== undefined) merged.pivot = custom.pivot;\n    if (custom.aggFunc !== undefined) merged.aggFunc = custom.aggFunc;\n    if (custom.cellClassRules !== undefined) merged.cellClassRules = custom.cellClassRules;\n    \n    // Ensure cellStyle is created if valueFormatter has conditional styling\n    ensureCellStyleForConditionalFormatting(merged, custom);\n    \n    return merged;\n  });\n}\n\n/**\n * Calculate the size of serialized customizations in bytes\n */\nexport function calculateCustomizationSize(customizations: Record<string, ColumnCustomization>): number {\n  return JSON.stringify(customizations).length;\n}\n\n/**\n * Get a summary of what's customized\n */\nexport function getCustomizationSummary(customizations: Record<string, ColumnCustomization>): {\n  totalColumns: number;\n  customizedColumns: number;\n  properties: Record<string, number>;\n} {\n  const propertyCount: Record<string, number> = {};\n  \n  Object.values(customizations).forEach(custom => {\n    Object.keys(custom).forEach(key => {\n      if (key !== 'field') {\n        propertyCount[key] = (propertyCount[key] || 0) + 1;\n      }\n    });\n  });\n  \n  return {\n    totalColumns: Object.keys(customizations).length,\n    customizedColumns: Object.keys(customizations).length,\n    properties: propertyCount\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/stores/migrate-profiles.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3119,3122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3119,3122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3188,3191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3188,3191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProfileStore } from './profile.store';\nimport { logStorageAnalysis } from './storage-analyzer';\n\n/**\n * Migrate all profiles to use lightweight column serialization\n * This will convert all existing profiles that still use full columnDefs\n * to the new lightweight format\n */\nexport function migrateAllProfilesToLightweight() {\n  const store = useProfileStore.getState();\n  const profiles = store.profiles;\n  \n  console.group('🔄 Migrating profiles to lightweight format');\n  \n  let migratedCount = 0;\n  \n  profiles.forEach(profile => {\n    // Check if profile has full columnDefs but no lightweight format\n    if (profile.gridState.columnDefs && \n        profile.gridState.columnDefs.length > 0 && \n        !profile.gridState.columnCustomizations) {\n      \n      console.log(`📦 Migrating profile: ${profile.name} (${profile.id})`);\n      \n      // Get the column definitions using the store method (handles all formats)\n      const columnDefs = store.getColumnDefs(profile.id);\n      \n      if (columnDefs) {\n        // Save using the lightweight format\n        // We need to temporarily set this as the active profile to use saveColumnCustomizations\n        const currentActiveId = store.activeProfileId;\n        store.setActiveProfile(profile.id);\n        \n        // Save the columns in lightweight format\n        store.saveColumnCustomizations(columnDefs, columnDefs);\n        \n        // Restore the previous active profile\n        store.setActiveProfile(currentActiveId);\n        \n        migratedCount++;\n        console.log(`✅ Successfully migrated profile: ${profile.name}`);\n      }\n    } else if (profile.gridState.columnCustomizations) {\n      console.log(`⏭️  Profile already using lightweight format: ${profile.name}`);\n    } else {\n      console.log(`⏭️  Profile has no column definitions: ${profile.name}`);\n    }\n  });\n  \n  console.log(`\\n📊 Migration complete: ${migratedCount} profiles migrated`);\n  console.groupEnd();\n  \n  // Show storage analysis after migration\n  console.log('\\n');\n  logStorageAnalysis();\n}\n\n/**\n * Force refresh all profiles to ensure they're using the latest format\n * This will reload column definitions and re-save them\n */\nexport function refreshAllProfiles() {\n  const store = useProfileStore.getState();\n  const profiles = store.profiles;\n  const currentActiveId = store.activeProfileId;\n  \n  console.group('🔄 Refreshing all profiles');\n  \n  profiles.forEach(profile => {\n    const columnDefs = store.getColumnDefs(profile.id);\n    if (columnDefs && columnDefs.length > 0) {\n      console.log(`🔧 Refreshing profile: ${profile.name}`);\n      \n      // Temporarily switch to this profile\n      store.setActiveProfile(profile.id);\n      \n      // Re-save with current format\n      store.saveColumnCustomizations(columnDefs, profile.gridState.baseColumnDefs || columnDefs);\n      \n      console.log(`✅ Refreshed: ${profile.name}`);\n    }\n  });\n  \n  // Restore original active profile\n  store.setActiveProfile(currentActiveId);\n  \n  console.groupEnd();\n}\n\n// Export functions to window for easy console access\nif (typeof window !== 'undefined') {\n  (window as any).migrateProfiles = migrateAllProfilesToLightweight;\n  (window as any).refreshProfiles = refreshAllProfiles;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/stores/profile.store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/stores/storage-analyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4582,4585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4582,4585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GridProfile } from './profile.store';\nimport { calculateCustomizationSize, getCustomizationSummary } from './column-serializer';\n\nexport interface StorageAnalysis {\n  totalProfiles: number;\n  totalSizeKB: number;\n  profileAnalysis: {\n    profileId: string;\n    profileName: string;\n    legacySizeKB: number;\n    lightweightSizeKB: number;\n    savingsKB: number;\n    savingsPercent: number;\n    customizationSummary?: ReturnType<typeof getCustomizationSummary>;\n  }[];\n  overallSavings: {\n    totalLegacySizeKB: number;\n    totalLightweightSizeKB: number;\n    totalSavingsKB: number;\n    totalSavingsPercent: number;\n  };\n}\n\nexport function analyzeProfileStorage(): StorageAnalysis {\n  const storageKey = 'grid-profile-storage';\n  const stored = localStorage.getItem(storageKey);\n  \n  if (!stored) {\n    return {\n      totalProfiles: 0,\n      totalSizeKB: 0,\n      profileAnalysis: [],\n      overallSavings: {\n        totalLegacySizeKB: 0,\n        totalLightweightSizeKB: 0,\n        totalSavingsKB: 0,\n        totalSavingsPercent: 0\n      }\n    };\n  }\n  \n  const parsedData = JSON.parse(stored);\n  const profiles: GridProfile[] = parsedData.state?.profiles || [];\n  \n  const profileAnalysis = profiles.map(profile => {\n    // Calculate legacy size (full columnDefs)\n    const legacySize = profile.gridState.columnDefs \n      ? JSON.stringify(profile.gridState.columnDefs).length / 1024\n      : 0;\n    \n    // Calculate lightweight size\n    const lightweightSize = profile.gridState.columnCustomizations\n      ? calculateCustomizationSize(profile.gridState.columnCustomizations) / 1024\n      : 0;\n    \n    // Get customization summary if using lightweight format\n    const customizationSummary = profile.gridState.columnCustomizations\n      ? getCustomizationSummary(profile.gridState.columnCustomizations)\n      : undefined;\n    \n    const _actualSize = profile.gridState.columnCustomizations ? lightweightSize : legacySize;\n    const potentialSavings = legacySize > 0 ? legacySize - lightweightSize : 0;\n    const savingsPercent = legacySize > 0 ? (potentialSavings / legacySize) * 100 : 0;\n    \n    return {\n      profileId: profile.id,\n      profileName: profile.name,\n      legacySizeKB: legacySize,\n      lightweightSizeKB: lightweightSize,\n      savingsKB: potentialSavings,\n      savingsPercent,\n      customizationSummary\n    };\n  });\n  \n  const totalLegacySizeKB = profileAnalysis.reduce((sum, p) => sum + p.legacySizeKB, 0);\n  const totalLightweightSizeKB = profileAnalysis.reduce((sum, p) => sum + p.lightweightSizeKB, 0);\n  const totalSavingsKB = totalLegacySizeKB - totalLightweightSizeKB;\n  const totalSavingsPercent = totalLegacySizeKB > 0 ? (totalSavingsKB / totalLegacySizeKB) * 100 : 0;\n  \n  return {\n    totalProfiles: profiles.length,\n    totalSizeKB: stored.length / 1024,\n    profileAnalysis,\n    overallSavings: {\n      totalLegacySizeKB,\n      totalLightweightSizeKB,\n      totalSavingsKB,\n      totalSavingsPercent\n    }\n  };\n}\n\nexport function logStorageAnalysis() {\n  const analysis = analyzeProfileStorage();\n  \n  console.group('🗄️ Profile Storage Analysis');\n  console.log(`Total profiles: ${analysis.totalProfiles}`);\n  console.log(`Total storage size: ${analysis.totalSizeKB.toFixed(2)} KB`);\n  \n  console.group('📊 Profile Breakdown');\n  analysis.profileAnalysis.forEach(profile => {\n    console.group(`📁 ${profile.profileName} (${profile.profileId})`);\n    console.log(`Legacy size: ${profile.legacySizeKB.toFixed(2)} KB`);\n    console.log(`Lightweight size: ${profile.lightweightSizeKB.toFixed(2)} KB`);\n    console.log(`Savings: ${profile.savingsKB.toFixed(2)} KB (${profile.savingsPercent.toFixed(1)}%)`);\n    \n    if (profile.customizationSummary) {\n      console.group('🔧 Customizations');\n      console.log(`Customized columns: ${profile.customizationSummary.customizedColumns}`);\n      console.log('Property usage:', profile.customizationSummary.properties);\n      console.groupEnd();\n    }\n    \n    console.groupEnd();\n  });\n  console.groupEnd();\n  \n  console.group('💰 Overall Savings');\n  console.log(`Total legacy size: ${analysis.overallSavings.totalLegacySizeKB.toFixed(2)} KB`);\n  console.log(`Total lightweight size: ${analysis.overallSavings.totalLightweightSizeKB.toFixed(2)} KB`);\n  console.log(`Total savings: ${analysis.overallSavings.totalSavingsKB.toFixed(2)} KB`);\n  console.log(`Savings percentage: ${analysis.overallSavings.totalSavingsPercent.toFixed(1)}%`);\n  console.groupEnd();\n  \n  console.groupEnd();\n}\n\n// Export function to window for easy console access\nif (typeof window !== 'undefined') {\n  (window as any).analyzeProfileStorage = logStorageAnalysis;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/stores/style-serializer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/andyrao/Documents/projects/agv1/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
